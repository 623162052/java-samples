使用\n  \t控制输出


常用JavaDoc标记
@version		指定版本信息
@since			指定最早出现的版本
@author			指定作者
@see			参考其他JavaDoc
@link			参考其他JavaDoc的链接
@param			描述方法的参数
@return			描述方法的返回值
@throws			描述方法跑出的异常
//可以在工具类中少写注释，而在调用类时多写注释


版权信息 
类描述
方法描述


生成Java Doc：
	右键项目--export--Java Doc--选择要生成的信息



java中的注释
单行注释 //......
多行注释 /* .......*/
文档注释/** ........<p>*/

文档注释一般写在类定义之前、方法之前、属性之前






Java包名全部小写。
类名首字母大写其余每个单词的首字母大写。
Java类中的方法名首字母小写其余每个单词的首字母大写, 第一个单词一般是动词。
变量规范：
变量的名字必须用一个小写字母开头。后面的单词用大写字母开头。 
Static Final 变量的名字应该都大写，并且指出完整含义。 
所有常量名均全部大写，单词间以‘_’隔开。使用常数的地方尽量使用使用常量。
参数的名字必须和变量的命名规范一致。
数组的命名：
	数组应该总是用下面的方式来命名：
	byte[] buffer; 
	而不是：
	byte buffer[];
缩进：
缩进应该是每行2个空格，不要在源文件中保存Tab字符。在使用不同的源代码管理工具时Tab字符将因为用户设置的不同而扩展为不同的宽度。 
页宽：
	页宽应该设置为80字符. 源代码一般不会超过这个宽度, 并导致无法完整显示, 但这一设置也可以灵活调整. 在任何情况下, 超长的语句应该在一个逗号或者一个操作符后折行. 一条语句折行后, 应该比原来的语句再缩进2个字符.
{} 对：
{} 中的语句应该单独作为一行. 例如, 下面的第1行是错误的, 第2行是正确的:  
	if (i>0) { i ++ }; // 错误, { 和 } 在同一行  
	if (i>0) {  
	i ++  
	}; // 正确 
} 语句永远单独作为一行. } 语句应该缩进到与其相对应的 { 那一行相对齐的位置。
括号：
左括号和后一个字符之间不应该出现空格, 同样, 右括号和前一个字符之间也不应该出现空格。
访问类的成员变量：
	大部分的类成员变量应该定义为 private或protected ，来防止继承类使用他们。
在每一行里写一条语句，但不包括FOR语句。
不要使用不推荐的API，随着JDK的升级，标记为DEPRECATED方法可能将不会再得到支持。
为了保证可移植性：  
尽量不要使用已经被标为不赞成使用的类或方法。  
如果需要换行的话，尽量用 println 来代替在字符串中使用"\n"。  
用separator()方法代替路径中的”/”或”\” 。  
用pathSeptarator()方法代替路径中的 ” : ” 或 ” ;”
Java注释：
版权信息、类的说明、作者及编码日期：
版权信息及作者必须在 java 文件的开头，然后是类的说明，比如：  
	/** 
	* Copyright 2007 Jiangsu OceanSoft Information System Co. Ltd. 
	* All right reserved. 
	* CaseInfo.java：This class will describe the attributes of a case and provide the methods to 
	* get and set these attributes.
	* Author：***        Date：2007-8-2
	*/ 
其他不需要出现在 javadoc 的信息也可以包含在这里。
如果有修改，则每次修改必须添加以下注释：
		/*
		Log编号：<Log编号,从1开始一次增加>
		修改描述：<对此修改的描述>
		作者：<修改者姓名>
		编写日期：<模块修改日期，格式：YYYY-MM-DD>
		*/
	其中，作者或修改者姓名必须是完整的中文姓名，不得是英文名或中文简称。
	例如：
	/*
	 作用：公司信息修改
	 作者：丁小军
	 日期：2004-4-20
	
	 修改1
	 作用：添加**功能
	 作者：丁小军
	 日期：2004-4-21
	 
	 修改2
	 作用：修改**功能
	 作者：丁小军
	 日期：2004-4-22
	*/
public class CompanyCreateEdit : System.Web.UI.Page
	{
		//region 修改一
		// 添加**功能
		private void Edit()
		{
		}
		//endregion
		
		private void btnOK(object sender, System.EventArgs e)
		{
			//region 修改一
			//EditOld();  //这里是删除的旧代码
			Edit();
			//endregion

			//region 修改二
			Fix();
			//endregion
		}
	}
在代码修改的地方加//region 和 //endregion，删除旧代码时不要彻底删除，做注释。
所有类中的方法是手工编写的代码必须有注释，系统自动生成的代码除外。
Java类中对于public 或者 protected 级别的方法采用 “/** */”的方式进行注释，对于参数中使用到别的非JDK提供的类，需要使用“@see”标记标注。
Java类中对于private 级别的方法可以不进行注释，如果要使用注释可以采用 “/* */”| 或 “//”的方式。
Java 类中的内部变量可以不进行注释，建议对关键的内部变量进行注释。
Java 接口中的方法需要有比较详细的注释，采用“/** */”的方式进行注释，对于参数中使用到别的非JDK提供的类，需要使用“@see”标记标注。
四．其他规范
Java包名
	所有包名都以“域名” + “.” +  “模块名”开头
	以城管为例，这里只是假设：
	例如：
	数字城管域名：“www.citymanager.gov.cn” 
	人员管理的模块名：“usermanager” 
那么在设计“数字城管”的“人员管理”模块时的Java包名就是“cn.gov.citymanager.usermanager”。
	“cn.gov.citymanager.usermanager”是一个基础的包名，在这个包下应该还包括至少四个子项，分别是：
pojo包：模块中涉及到对象的Java类，这些Java类对应与数据库中的一张或多张表。另外如果使用到Hibernate框架，那么对应得xml配置文件也在该包下出现。
dao包：模块中涉及到对数据库操作的Java类或接口，DAO类中的操作不涉及到对数据库事物的处理。
logic包：业务对象处理包，模块中涉及到的业务处理的逻辑都包含在该包下的Java类中，该包中Java类会包含一个或多个dao包中的接口，以实现在业务处理时对数据库的操作，该包下的Java类会将包含对数据库的事物处理。
web包：所有web上涉及请求于提交操作的Java类对象，例如Spring MVC框架中的Controller、Validator或自己定义的页面Form对象等。
Spring配置文件：
	项目中有三个配置文件，分别是：
	dataAccessContext.xml 负责数据库操作层的配置
	applicationContext.xml	负责业务逻辑层的配置
	citymanager-servlet.xml	负责Web表现层的配置
