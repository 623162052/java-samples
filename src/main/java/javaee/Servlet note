Servlet:
	1.Servlet生命周期
		1.产生servlet，加载到servlet 容器中，再调用init()
		2.以多线程的方式来处理Client的请求---request，response机制
		3.调用destroy()销毁servlet，进行垃圾回收
			Init()―doGet()/doPost()---destory()
			只有第一次运行时才init(),在对象销毁之前不再运行init()
		----------
			1.服务器加载Servlet
			2.服务器创建Servlet实例
			3.调用Servlet实例的init()
			4.客户端对Servlet发出请求----
			5.调用service()方法----------4.5是循环过程【service():	处理用户的请求，可以根据请求的类型不同拆分成doGet(),doPost()方法】
			6.destroy()方法
			7.服务器Servlet卸载
		-----------
			
			
	2.Servlet创建,及web.xml配置
		1.创建Servlet
		2.配置web.xml
			<servlet>
				<servlet-name>随意</servlet-name>	
				<servlet-class>包名.类名</servlet-class>
				<load-on-stratup>1</load-on-stratup>	<!--可以设定在服务器一启动时Servlet被创建的顺序，0最大，往后依次变小-->
														<!--大于等于0时，才创建对象-->
			</servlet>
			<servlet-mapping>
				<servlet-name>随意</servlet-name>
				<url-pattern>*/xxx</url-pattern>
			</servlet-mapping>
	3.Servlet获取用户信息
		在HttpServlet里doPost()或doGet().
			/*Http头信息*/
			PrintWriter out = response.getWriter();
			String get = request.getHeader("Get");
			String host = request.getHeader("Host");
			String userAgent = request.getHeader("User-Agent");
			String accept = request.getHeader("Accept");
			String acceptLanguage = request.getHeader("Accept-Language");

			String requestURI = request.getRequestURI();
			String contextPath = request.getContextPath();
			String servletPath = request.getServletPath();

			String ip = request.getRemoteAddr();		//获得IP地址
			out.println(ip);				//往浏览器输出IP地址

			out.println(get + "<br />");
			out.println(host + "<br />");
			out.println(userAgent + "<br />");
			out.println(accept + "<br />");
			out.println(acceptLanguage + "<br />");

			out.println(requestURI + "<br />");
			out.println(contextPath + "<br />");
			out.println(servletPath + "<br />");
			--------------
			表单提交时获取提交内容：

4.跳转和重定向
	1.跳转
		ServletA传递参数到ServletB
		request.getRequestDispatcher("ServletB").forward(request,response)
		特点:	数据传递
				只能转发给当前站点类的页面
				页面还是停留在ServletA
				1) 工程内部的转发
				2）把请求向下传递
				3）效率高一些
	2.重定向
		可以到其他站点页面
		不能传递数据
		response.sendRedirect("ServletB")
		页面停留在ServletB
		 1）可以跳转到工程的外部
		 2）不会将请求向下传递，每一次都发出一个新的请求
		 3)效率低一些

		例如：假如一个网页在WEB-INF里，通过外部浏览器不能直接访问，但是可以通过服务器内部跳转访问。
		不能通过重定向访问WEB-INF里的网页，因为重定向是外部浏览器重新发送一个请求给服务器
		
5.换行
	servlet里的PrintWriter out = response.getWriter();
	out.println不能换行显示,需要在引号里加<br />
	或者
	把内容放到<pre></pre>里
6.Servlet与JDBC
	sql注入攻击:
	zzz' or '1'='1         -------->  'zzz' or '1'='1'恒为真
	"select * from tbl_studentinfo where stuname='" + name + "' and stuno='" + stuno + "'
	解决办法：传递参数法
	Class.forName(url);
	coon = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Student","root","admin");
	PreparedStatement ps = coon.prepareStatement("select * from tbl_studentinfo where stuname=? and spass=?;");
	ps.setString(1, name);
	ps.setString(2, pass);
	res = ps.executeQuery();
		【Servlet与数据库操作出错:打印sql代码，看有没有错，没错放到数据库里执行，看有没有结果】

--------------------------------------------------------------------------------------		
7.Servlet中文处理
三个地方会出现乱码：
1.页面
2.类
3.数据库
4.容器
5.本来就是乱码

几种中文编码方式：
GB2312		只能显示4000简体汉字
GBK			显示8000简体中文汉字
GB18030		显示8000-10000简体汉字+5000繁体汉字
big5		繁体中文汉字【tw，澳门，香港】


安装数据库 指定utf-8，使用第三方工具创建数据库时指定utf-8

-------------------------
Servlet中文处理
	调用doGet时的中文处理
	【响应】Servlet往网页输出中文：response.setContentType("text.html;charset=UTF-8");
	【获得】
			sname = new String(sname.getBytes("ISO-8859-1"),"UTF-8");
			spass = new String(spass.getBytes("ISO-8859-1"),"UTF-8");

	调用doPost时的中文处理
	【响应】Servlet往网页输出中文：	response.setContentType("text/html;charset=UTF-8");
	【获得】从网页获取内容			request.setCharacterEncoding("UTF-8");
	或
	sname = new String(sname.getBytes("ISO-8859-1"),"UTF-8");
	spass = new String(spass.getBytes("ISO-8859-1"),"UTF-8");	【一般密码不允许中文】

----------------------------------------------------------------	
----------------------------------------------------------------
request/response			当客户端向服务器发送一个请求，服务器向客户端返回一个响应，请求对象就被销毁了,
							之后再向服务器发送新的请求 服务器会创建新的request对象，该request对象和之前request,
							对象没有任何联系，因此也无法获取到之前request对象所存放的数据
	
Cookie						存储在客户端
HttpSession					只要浏览器不关闭session对象就会一直存在，因此在同一个浏览器窗口，无论向服务器发送多少个请求,session对象只有一个
ServletContext(application)	存活范围最大的对象，只要服务器没有关闭，application对象中的数据就会一直存在，在整个服务器运行过程中只有一个application对象

---------------------------------------------
8.Servlet获取Html表单内容：
request.getParameter("name");			取到一个数据
request.getParameterValues("name");		取到一组数据，可以用于取得复选框数据

------------------------------------------------------------
Session
	web服务器跟踪客户状态的四种方法：
		1：建立含有跟踪数据的隐藏字段
		2：重写URL
		3：使用cookie
		4：session会话机制
		
	HttpSession：在一段是时间内，单个客户与web服务器的一连串的交互过程	
		session.getId():获取session的ID
		session.setMaxInactiveInterval(6);	//设置session最大存活时间为6秒
		session.invalidate();			//使当前session立即失效，Servlet容器会释放该对象所占用的资源
		session.isNew();		//判断session是新创建的，还是从浏览器的cooike中取出的【重定向时返回true，跳转时放回false】
				
		session.setAttribute("键","值");
		session.getAttribute("键");
		








 