From: =?gb2312?B?08kgV2luZG93cyBJbnRlcm5ldCBFeHBsb3JlciA5ILGjtOY=?=
Subject: jQuery Fundamentals
Date: Sat, 14 Apr 2012 14:17:34 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CD1A49.568899A0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: file://D:\Project\javascript\WebContent\jQuery\jQuery Fundamentals.htm

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!DOCTYPE html><!-- saved from =
url=3D(0041)http://jqfundamentals.com/book/index.html --><HTML><HEAD>
<META content=3D"text/html; charset=3DUTF-8" =
http-equiv=3D"Content-Type">
<META content=3D"IE=3DEdge;chrome=3D1" =
http-equiv=3D"X-UA-Compatible"><TITLE>     =20
jQuery Fundamentals    </TITLE><LINK rel=3D"stylesheet" =
type=3D"text/css" =
href=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/style.css"><LINK=20
rel=3D"stylesheet" type=3D"text/css" =
href=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/shCore.css"><LINK=20
rel=3D"stylesheet" type=3D"text/css" =
href=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/shThemeRDark.css">
<META name=3D"GENERATOR" content=3D"MSHTML 9.00.8112.16441"></HEAD>
<BODY>
<DIV class=3D"book" title=3D"jQuery Fundamentals">
<DIV id=3D"titlepage">
<DIV>
<DIV>
<H1 class=3D"title">              jQuery Fundamentals            =
</H1></DIV>
<DIV>
<DIV class=3D"author">
<H3 class=3D"author">                By <A class=3D"ulink" =
href=3D"http://www.rebeccamurphey.com/">Rebecca=20
Murphey</A></H3></DIV></DIV>
<DIV>
<DIV class=3D"othercredit">
<H3 class=3D"othercredit"><SPAN class=3D"orgname"><A class=3D"ulink" =
href=3D"http://github.com/rmurphey/jqfundamentals">http://github.com/rmur=
phey/jqfundamentals</A></SPAN></H3></DIV></DIV>
<DIV>
<DIV class=3D"othercredit">
<H3 class=3D"othercredit"><SPAN class=3D"orgname">With contributions by =
James=20
Padolsey, Paul Irish, and others. See the GitHub repository for a =
complete=20
history of contributions.</SPAN></H3></DIV></DIV>
<DIV>
<P class=3D"copyright">              Copyright =C2=A9 2011            =
</P></DIV>
<DIV>
<DIV class=3D"legalnotice" title=3D"Legal Notice">
<P>                Licensed by Rebecca Murphey under the <A =
class=3D"ulink" =
href=3D"http://creativecommons.org/licenses/by-sa/3.0/us/">Creative=20
Commons Attribution-Share Alike 3.0 United States license</A>. You are =
free to=20
copy, distribute, transmit, and remix this work, provided you attribute =
the work=20
to Rebecca Murphey as the original author and reference <A =
class=3D"ulink" href=3D"http://github.com/rmurphey/jqfundamentals">the=20
GitHub repository for the work</A>. If you alter, transform, or build =
upon this=20
work, you may distribute the resulting work only under the same, similar =
or a=20
compatible license. Any of the above conditions can be waived if you get =

permission from the copyright holder. For any reuse or distribution, you =
must=20
make clear to others the license terms of this work. The best way to do =
this is=20
with <A class=3D"ulink" =
href=3D"http://creativecommons.org/licenses/by-sa/3.0/us/">a=20
link to the license</A>.              </P></DIV></DIV></DIV>
<DIV class=3D"note">
<H2>Reporting Issues</H2>
<P>Your feedback is essential to improving jQuery Fundamentals; if you =
see an   =20
    error or an opportunity for improvement, please <A =
href=3D"https://github.com/jquery/web-learn-jquery-com/issues">open=20
an        issue</A>.</P>
<H2>Suggesting Changes to Content</H2>
<P>If you=E2=80=99d like to suggest a change to the book, the =
<EM>strong</EM> preference=20
is that        you submit a <A =
href=3D"http://help.github.com/pull-requests/">pull=20
request</A> rather than        describing your proposed change in an =
issue. Once=20
a pull request is submitted,        it will be reviewed for =
inclusion.</P>
<H2>Suggesting Additions to Content</H2>
<P>If you=E2=80=99ve come across a blog post or other resource that =
would be great for  =20
     inclusion in jQuery Fundamentals, please <A =
href=3D"https://github.com/jquery/web-learn-jquery-com/issues">open=20
an        issue</A> with a link to the        resource, and indicate in =
the=20
issue whether you=E2=80=99ve already discussed inclusion        of the =
resource with the=20
author.</P>
<H2>Contributing Content</H2>
<P>Contributions to jQuery Fundamentals are always welcome. The best     =
   way=20
to submit your content for consideration is to submit a pull       =20
request.</P></DIV></DIV> <!-- end titlepage -->
<DIV id=3D"toc">
<H2>Contents</H2>
<UL><!-- JS-generated TOC goes here -->
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-1">Chapter 1:=20
  Welcome</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-2">Chapter 2:=20
  JavaScript Basics</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-3">Chapter 3:=20
  jQuery Basics</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-4">Chapter 4:=20
  jQuery Core</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-5">Chapter 5:=20
  Events</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-6">Chapter 6:=20
  Effects</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-7">Chapter 7:=20
  Ajax</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-8">Chapter 8:=20
  Plugins</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-9">Chapter 9:=20
  Performance Best Practices</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-10">Chapter =
10:=20
  Code Organization</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#chapter-11">Chapter =
11:=20
  Custom Events</A></LI></UL></DIV>
<DIV id=3D"loe">
<H2>List of Examples</H2>
<UL><!-- JS-generated list of examples goes here -->
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-1.1">Example=20
  1.1:               An example of inline JavaScript            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-1.2">Example=20
  1.2:               An example of including external JavaScript         =
  =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-1.3">Example=20
  1.3:             Example of an example          </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.1">Example=20
  2.1:                 A simple variable declaration              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.2">Example=20
  2.2:                 Whitespace has no meaning outside of quotation =
marks     =20
          </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.3">Example=20
  2.3:                 Parentheses indicate precedence              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.4">Example=20
  2.4:                 Tabs enhance readability, but have no special =
meaning    =20
           </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.5">Example=20
  2.5:                   Concatenation                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.6">Example=20
  2.6:                   Multiplication and division                =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.7">Example=20
  2.7:                   Incrementing and decrementing                =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.8">Example=20
  2.8:                   Addition vs. concatenation                =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.9">Example=20
  2.9:                   Forcing a string to act as a number             =
  =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.10">Example=20
  2.10:                   Forcing a string to act as a number (using the =

  unary-plus operator)                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.11">Example=20
  2.11:                 Logical AND and OR operators              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.12">Example=20
  2.12:                   Comparison operators                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.13">Example=20
  2.13:               Flow control            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.14">Example=20
  2.14:                 Values that evaluate to true              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.15">Example=20
  2.15:                 Values that evaluate to false              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.16">Example=20
  2.16:                 The ternary operator              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.17">Example=20
  2.17:                 A switch statement              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.18">Example=20
  2.18:                 Loops              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.19">Example=20
  2.19:                   A typical for loop                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.20">Example=20
  2.20:                   A typical while loop                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.21">Example=20
  2.21:                   A while loop with a combined conditional and=20
  incrementer                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.22">Example=20
  2.22:                   A do-while loop                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.23">Example=20
  2.23:                   Stopping a loop                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.24">Example=20
  2.24:                   Skipping to the next iteration of a loop       =
       =20
   </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.25">Example=20
  2.25:                 A simple array              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.26">Example=20
  2.26:                 Accessing array items by index              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.27">Example=20
  2.27:                 Testing the size of an array              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.28">Example=20
  2.28:                 Changing the value of an array item              =

  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.29">Example=20
  2.29:                 Adding elements to an array              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.30">Example=20
  2.30:                 Working with arrays              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.31">Example=20
  2.31:               Creating an "object literal"            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.32">Example=20
  2.32:                 Function Declaration              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.33">Example=20
  2.33:                 Named Function Expression              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.34">Example=20
  2.34:                   A simple function                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.35">Example=20
  2.35:                   A function that returns a value                =

  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.36">Example=20
  2.36:                   A function that returns another function       =
       =20
   </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.37">Example=20
  2.37:                   A self-executing anonymous function            =
   =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.38">Example=20
  2.38:                   Passing an anonymous function as an argument   =
       =20
       </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.39">Example=20
  2.39:                   Passing a named function as an argument        =
       =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.40">Example=20
  2.40:                 Testing the type of various variables            =
 =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.41">Example=20
  2.41:               A function invoked using Function.call           =20
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.42">Example=20
  2.42:               A function created using Function.bind           =20
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.43">Example=20
  2.43:               A function being attached to an object at runtime  =
       =20
    </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.44">Example=20
  2.44:                 Functions have access to variables defined in =
the same=20
  scope              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.45">Example=20
  2.45:                 Code outside the scope in which a variable was =
defined=20
  does not have access to the variable              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.46">Example=20
  2.46:                 Variables with the same name can exist in =
different=20
  scopes with different values              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.47">Example=20
  2.47:                 Functions can "see" changes in variable values =
after the=20
  function is defined              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.48">Example=20
  2.48:                 Scope insanity              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.49">Example=20
  2.49:                 How to lock in the value of i?              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.50">Example=20
  2.50:                 Locking in the value of i with a closure         =
    =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-2.51">Example=20
  2.51:                 Using a closure to access inner and outer object =

  instances simultaneously              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.1">Example=20
  3.1:                 A $(document).ready() block              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.2">Example=20
  3.2:                 Shorthand for $(document).ready()              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.3">Example=20
  3.3:                 Passing a named function instead of an anonymous =
function=20
               </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.4">Example=20
  3.4:               Selecting elements by ID            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.5">Example=20
  3.5:               Selecting elements by class name            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.6">Example=20
  3.6:               Selecting elements by attribute            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.7">Example=20
  3.7:               Selecting elements by compound CSS selector         =
  =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.8">Example=20
  3.8:               Pseudo-selectors            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.9">Example=20
  3.9:                 Testing whether a selection contains elements     =
       =20
   </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.10">Example=20
  3.10:               Storing selections in a variable            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.11">Example=20
  3.11:                 Refining selections              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.12">Example=20
  3.12:                 Using form-related pseduo-selectors              =

  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.13">Example=20
  3.13:                 Chaining              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.14">Example=20
  3.14:                 Formatting chained code              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.15">Example=20
  3.15:                 Restoring your original selection using $.fn.end =
       =20
       </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.16">Example=20
  3.16:                   The $.fn.html method used as a setter          =
     =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.17">Example=20
  3.17:                   The html method used as a getter               =
=20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.18">Example=20
  3.18:               Getting CSS properties            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.19">Example=20
  3.19:               Setting CSS properties            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.20">Example=20
  3.20:                 Working with classes              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.21">Example=20
  3.21:                 Basic dimensions methods              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.22">Example=20
  3.22:                 Setting attributes              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.23">Example=20
  3.23:                 Getting attributes              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.24">Example=20
  3.24:               Moving around the DOM using traversal methods      =
     =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.25">Example=20
  3.25:               Iterating over a selection            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.26">Example=20
  3.26:                 Changing the HTML of an element              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.27">Example=20
  3.27:                   Moving elements using different approaches     =
       =20
     </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.28">Example=20
  3.28:                   Making a copy of an element                =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.29">Example=20
  3.29:                 Creating new elements              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.30">Example=20
  3.30:                 Creating a new element with an attribute object  =
       =20
      </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.31">Example=20
  3.31:                 Getting a new element on to the page             =
=20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.32">Example=20
  3.32:                 Creating and adding an element to the page at =
the same=20
  time              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.33">Example=20
  3.33:                   Manipulating a single attribute                =

  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.34">Example=20
  3.34:                   Manipulating multiple attributes               =
=20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-3.35">Example=20
  3.35:                   Using a function to determine an attribute's =
new value=20
                 </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-4.1">Example=20
  4.1:                 Checking the type of an arbitrary value           =
  =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-4.2">Example=20
  4.2:                 Storing and retrieving data related to an element =
       =20
       </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-4.3">Example=20
  4.3:                 Storing a relationship between elements using =
$.fn.data  =20
             </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-4.4">Example=20
  4.4:                 Putting jQuery into no-conflict mode              =

  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-4.5">Example=20
  4.5:                 Using the $ inside a self-executing anonymous =
function   =20
            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.1">Example=20
  5.1:                 Event binding using a convenience method          =
   =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.2">Example=20
  5.2:                 Event biding using the $.fn.bind method           =
  =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.3">Example=20
  5.3:                 Event binding using the $.fn.bind method with =
data       =20
        </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.4">Example=20
  5.4:                   Switching handlers using the $.fn.one method    =
       =20
      </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.5">Example=20
  5.5:                   Unbinding all click handlers on a selection     =
       =20
     </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.6">Example=20
  5.6:                   Unbinding a particular click handler            =
   =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.7">Example=20
  5.7:                   Namespacing events                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-5.8">Example=20
  5.8:                 Binding Multiple Events              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.1">Example=20
  6.1:                 A basic use of a built-in effect              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.2">Example=20
  6.2:                   Setting the duration of an effect               =
=20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.3">Example=20
  6.3:                     Augmenting jQuery.fx.speeds with custom speed =

  definitions                  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.4">Example=20
  6.4:                   Running code when an animation is complete      =
       =20
    </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.5">Example=20
  6.5:                   Run a callback even if there were no elements =
to=20
  animate                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.6">Example=20
  6.6:               Custom effects with $.fn.animate            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-6.7">Example=20
  6.7:                 Per-property easing              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.1">Example=20
  7.1:                 Using the core $.ajax method              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.2">Example=20
  7.2:                   Using jQuery's Ajax convenience methods         =
      =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.3">Example=20
  7.3:                   Using $.fn.load to populate an element          =
     =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.4">Example=20
  7.4:                   Using $.fn.load to populate an element based on =
a=20
  selector                </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.5">Example=20
  7.5:                 Turning form data into a query string             =
=20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.6">Example=20
  7.6:                 Creating an array of objects containing form data =
       =20
       </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.7">Example=20
  7.7:                 Using YQL and JSONP              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-7.8">Example=20
  7.8:                 Setting up a loading indicator using Ajax Events  =
       =20
      </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.1">Example=20
  8.1:                 Creating a plugin to add and remove a class on =
hover     =20
          </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.2">Example=20
  8.2:                 The Mike Alsup jQuery Plugin Development Pattern  =
       =20
      </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.3">Example=20
  8.3:               A simple, stateful plugin using the jQuery UI =
widget=20
  factory            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.4">Example=20
  8.4:               Passing options to a widget            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.5">Example=20
  8.5:               Setting default options for a widget            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.6">Example=20
  8.6:               Creating widget methods            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.7">Example=20
  8.7:               Calling methods on a plugin instance            =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.8">Example=20
  8.8:                 Responding when an option is set              =
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.9">Example=20
  8.9:                 Providing callbacks for user extension            =
 =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.10">Example=20
  8.10:                 Binding to widget events              </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-8.11">Example=20
  8.11:                 Adding a destroy method to a widget              =

  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.1">Example=20
  10.1:               An object literal            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.2">Example=20
  10.2:               Using an object literal for a jQuery feature       =
    =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.3">Example=20
  10.3:               The module pattern            </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.4">Example=20
  10.4:               Using the module pattern for a jQuery feature      =
     =20
  </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.5">Example=20
  10.5:             Using RequireJS: A simple example          </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.6">Example=20
  10.6:             A simple JavaScript file with dependencies         =20
</A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.7">Example=20
  10.7:             Defining a RequireJS module that has no dependencies =
       =20
   </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.8">Example=20
  10.8:                 Defining a RequireJS module with dependencies    =
       =20
    </A></LI>
  <LI><A =
href=3D"http://jqfundamentals.com/book/index.html#example-10.9">Example=20
  10.9:                 Defining a RequireJS module that returns a =
function     =20
          </A></LI></UL></DIV>
<DIV id=3D"chapter-1" class=3D"chapter" title=3D"Welcome">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                Welcome              =
</H2></DIV></DIV></DIV>
<P>          jQuery is fast becoming a must-have skill for front-end =
developers.=20
The purpose of this book is to provide an overview of the jQuery =
JavaScript=20
library; when you're done with the book, you should be able to complete =
basic=20
tasks using jQuery, and have a solid basis from which to continue your =
learning.=20
This book was designed as material to be used in a classroom setting, =
but you=20
may find it useful for individual study.        </P>
<P>          This is a hands-on class. We will spend a bit of time =
covering a=20
concept, and then you=E2=80=99ll have the chance to work on an exercise =
related to the=20
concept. Some of the exercises may seem trivial; others may be downright =

daunting. In either case, there is no grade; the goal is simply to get =
you=20
comfortable working your way through problems you=E2=80=99ll commonly be =
called upon to=20
solve using jQuery. Example solutions to all of the exercises are =
included in=20
the sample code.        </P>
<DIV class=3D"section" title=3D"Getting the Code">
<H2 class=3D"title">            Getting the Code          </H2>
<P>            The code we=E2=80=99ll be using in this book is hosted <A =
class=3D"ulink"=20
href=3D"http://github.com/rmurphey/jqfundamentals">in a repository on =
Github</A>.=20
You can download a .zip or .tar file of the code, then uncompress it to =
use it=20
on your server. If you=E2=80=99re git-inclined, you=E2=80=99re welcome =
to clone or fork the=20
repository.          </P></DIV>
<DIV class=3D"section" title=3D"Software">
<H2 class=3D"title">            Software          </H2>
<P>            You'll want to have the following tools to make the most =
of the=20
class:          </P>
<UL>
  <LI>
  <P>                The Firefox browser              </P></LI>
  <LI>
  <P>                The Firebug extension for Firefox              =
</P></LI>
  <LI>
  <P>                A plain text editor              </P></LI>
  <LI>
  <P>                For the Ajax portions: A local server (such as MAMP =
or=20
  WAMP), or an FTP or SSH client to access a remote server.              =

  </P></LI></UL></DIV>
<DIV class=3D"section" title=3D"Adding JavaScript to Your Page">
<H2 class=3D"title">            Adding JavaScript to Your Page          =
</H2>
<P>            JavaScript can be included inline or by including an =
external=20
file via a script tag. The order in which you include JavaScript is =
important:=20
dependencies must be included before the script that depends on them.    =
     =20
</P>
<P>            For the sake of page performance, JavaScript should be =
included=20
as close to the end of your HTML as is practical. Multiple JavaScript =
files=20
should be combined for production use.          </P>
<DIV id=3D"example-1.1" class=3D"example">
<P class=3D"title">Example 1.1:               An example of inline =
JavaScript     =20
      </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_595306" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;script&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV></D=
IV></DIV></DIV></DIV>
<DIV id=3D"example-1.2" class=3D"example">
<P class=3D"title">Example 1.2:               An example of including =
external=20
JavaScript            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_750319" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;script =
src=3D</CODE><CODE class=3D"string">'/js/jquery.js'</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"JavaScript Debugging">
<H2 class=3D"title">            JavaScript Debugging          </H2>
<P>            A debugging tool is essential for JavaScript development. =
Firefox=20
provides a debugger via the Firebug extension; Safari and Chrome provide =

built-in consoles.          </P>
<P>            Each console offers:          </P>
<UL>
  <LI>
  <P>                single- and multi-line editors for experimenting =
with=20
  JavaScript              </P></LI>
  <LI>
  <P>                an inspector for looking at the generated source of =
your=20
  page              </P></LI>
  <LI>
  <P>                a Network or Resources view, to examine network =
requests   =20
            </P></LI></UL>
<P>            When you are writing JavaScript code, you can use the =
following=20
methods to send messages to the console:          </P>
<UL>
  <LI><CODE class=3D"code">console.log()</CODE> for sending general log =
messages  =20
           </LI>
  <LI><CODE class=3D"code">console.dir()</CODE> for logging a browseable =
object   =20
          </LI>
  <LI><CODE class=3D"code">console.warn()</CODE> for logging warnings    =
       =20
  </LI>
  <LI><CODE class=3D"code">console.error()</CODE> for logging error =
messages      =20
       </LI></UL>
<P>            Other console methods are also available, though they may =
differ=20
from one browser to another. The consoles also provide the ability to =
set break=20
points and watch expressions in your code for debugging purposes.        =
 =20
</P></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">            Exercises          </H2>
<P>            Most chapters in the book conclude with one or more =
exercises.=20
For some exercises, you=E2=80=99ll be able to work directly in Firebug; =
for others, you=20
will need to include other scripts after the jQuery script tag as =
directed in=20
the individual exercises.          </P>
<P>            In some cases, you will need to consult the jQuery =
documentation=20
in order to complete an exercise, as we won=E2=80=99t have covered all =
of the relevant=20
information in the book. This is by design; the jQuery library is large, =
and=20
learning to find answers in the documentation is an important part of =
the=20
process.          </P>
<P>            Here are a few suggestions for tackling these problems:   =
      =20
</P>
<UL>
  <LI>
  <P>                First, make sure you thoroughly understand the =
problem=20
  you're being asked to solve.              </P></LI>
  <LI>
  <P>                Next, figure out which elements you'll need to =
access in=20
  order to solve the problem, and determine how you'll get those =
elements. Use=20
  Firebug to verify that you're getting the elements you're after.       =
      =20
  </P></LI>
  <LI>
  <P>                Finally, figure out what you need to do with the =
elements=20
  to solve the problem. It can be helpful to write comments explaining =
what=20
  you're going to do before you try to write the code to do it.          =
   =20
  </P></LI></UL>
<P>            Do not be afraid to make mistakes! Do not try to make =
your code=20
perfect on the first try! Making mistakes and experimenting with =
solutions is=20
part of learning the library, and you=E2=80=99ll be a better developer =
for it. Examples=20
of solutions for these exercises are located in the <CODE=20
class=3D"filename">/solutions</CODE> directory in the sample code.       =
  =20
</P></DIV>
<H2 class=3D"title">          Conventions used in this book        </H2>
<P>          Methods that can be called on jQuery objects will be =
referred to as=20
<CODE class=3D"code">$.fn.methodName</CODE>. Methods that exist in the =
jQuery=20
namespace but that cannot be called on jQuery objects will be referred =
to as=20
<CODE class=3D"code">$.methodName</CODE>. If this doesn't mean much to =
you, don't=20
worry =E2=80=94 it should become clearer as you progress through the =
book.        </P>
<DIV id=3D"example-1.3" class=3D"example">
<P class=3D"title">Example 1.3:             Example of an example        =
  </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_367848" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// code examples will =
appear=20
      like =
this</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">Remarks will appear like=20
this.</SPAN></I></P>
<DIV class=3D"note">
<H3 class=3D"title">          Note        </H3>
<P>          Notes about a topic will appear like this.        =
</P></DIV>
<DIV class=3D"section" title=3D"Reference Material">
<H2 class=3D"title">            Reference Material          </H2>
<P>            There are any number of articles and blog posts out there =
that=20
address some aspect of jQuery. Some are phenomenal; some are downright =
wrong.=20
When you read an article about jQuery, be sure it's talking about the =
same=20
version as you're using, and resist the urge to just copy and paste =
=E2=80=94 take the=20
time to understand the code in the article.          </P>
<P>            Here are some excellent resources to use during your =
jQuery=20
learning. The most important of all is the jQuery source itself: it =
contains, in=20
code form, complete documentation of the library. It is not a black box =
=E2=80=94 your=20
understanding of the library will grow exponentially if you spend some =
time=20
visiting it now and again =E2=80=94&nbsp;and I highly recommend =
bookmarking it in your=20
browser and referring to it often.          </P>
<UL>
  <LI>
  <P><A class=3D"ulink" =
href=3D"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js">The=20
  jQuery source</A></P></LI>
  <LI>
  <P><A class=3D"ulink" href=3D"http://api.jquery.com/">jQuery=20
  documentation</A></P></LI>
  <LI>
  <P><A class=3D"ulink" href=3D"http://forum.jquery.com/">jQuery =
forum</A></P></LI>
  <LI>
  <P><A class=3D"ulink" =
href=3D"http://delicious.com/rdmey/jquery-class">Delicious=20
  bookmarks</A></P></LI>
  <LI>
  <P><A class=3D"ulink" =
href=3D"http://docs.jquery.com/Discussion#Chat_.2F_IRC_Channel">#jquery=20
  IRC channel on Freenode</A></P></LI></UL></DIV></DIV>
<DIV class=3D"part" title=3D"Part&nbsp;I.&nbsp;JavaScript 101">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H1 class=3D"title">                Part&nbsp;I.&nbsp;JavaScript 101     =
        =20
</H1></DIV></DIV></DIV>
<DIV id=3D"chapter-2" class=3D"chapter" title=3D"JavaScript Basics">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  JavaScript Basics               =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Overview">
<H2 class=3D"title">              Overview            </H2>
<P>              jQuery is built on top of JavaScript, a rich and =
expressive=20
language in its own right. This section covers the basic concepts of =
JavaScript,=20
as well as some frequent pitfalls for people who have not used =
JavaScript=20
before. While it will be of particular value to people with no =
programming=20
experience, even people who have used other programming languages may =
benefit=20
from learning about some of the peculiarities of JavaScript.            =
</P>
<P>              If you=E2=80=99re interested in learning more about the =
JavaScript=20
language, I highly recommend <EM class=3D"citetitle">JavaScript: The =
Good=20
Parts</EM> by Douglas Crockford.            </P></DIV>
<DIV class=3D"section" title=3D"Syntax Basics">
<H2 class=3D"title">              Syntax Basics            </H2>
<P>              Understanding statements, variable naming, whitespace, =
and=20
other basic JavaScript syntax.            </P>
<DIV id=3D"example-2.1" class=3D"example">
<P class=3D"title">Example 2.1:                 A simple variable =
declaration     =20
        </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_234340" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE class=3D"string">'hello =
world'</CODE><CODE=20
      =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<DIV id=3D"example-2.2" class=3D"example">
<P class=3D"title">Example 2.2:                 Whitespace has no =
meaning outside=20
of quotation marks              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_124586" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =
=3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"string">'hello world'</CODE><CODE=20
      =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<DIV id=3D"example-2.3" class=3D"example">
<P class=3D"title">Example 2.3:                 Parentheses indicate =
precedence   =20
          </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_462330" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">2 * 3 + =
5;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns 11; multiplication =
happens=20
      first</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">2 * (3 + 5);&nbsp; =
</CODE><CODE=20
      class=3D"comments">// returns 16; addition happens=20
first</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.4" class=3D"example">
<P class=3D"title">Example 2.4:                 Tabs enhance =
readability, but have=20
no special meaning              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_802016" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV></DIV>
<DIV class=3D"section" title=3D"Operators">
<H2 class=3D"title">              Operators            </H2>
<DIV class=3D"section" title=3D"Basic Operators">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Basic Operators                =
</H3></DIV>
<P>                Basic operators allow you to manipulate values.       =
      =20
</P>
<DIV id=3D"example-2.5" class=3D"example">
<P class=3D"title">Example 2.5:                   Concatenation          =
     =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_471004" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"string">'hello'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D </CODE><CODE =
class=3D"string">'world'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(foo + =
</CODE><CODE=20
      class=3D"string">' '</CODE> <CODE class=3D"plain">+ bar); =
</CODE><CODE class=3D"comments">//=20
      'hello =
world'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.6" class=3D"example">
<P class=3D"title">Example 2.6:                   Multiplication and =
division     =20
          </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_594189" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">2 *=20
3;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">2 /=20
3;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.7" class=3D"example">
<P class=3D"title">Example 2.7:                   Incrementing and =
decrementing   =20
            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_404307" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">i=20
      =3D 1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">j=20
      =3D ++i;&nbsp; </CODE><CODE class=3D"comments">// =
pre-increment:&nbsp; j=20
      equals 2; i equals 2</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">k=20
      =3D i++;&nbsp; </CODE><CODE class=3D"comments">// post-increment: =
k equals 2;=20
      i equals =
3</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Operations on Numbers &amp; Strings">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Operations on Numbers &amp; =
Strings         =20
      </H3></DIV>
<P>                In JavaScript, numbers and strings will occasionally =
behave=20
in ways you might not expect.              </P>
<DIV id=3D"example-2.8" class=3D"example">
<P class=3D"title">Example 2.8:                   Addition vs. =
concatenation      =20
         </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_786358" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D 1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D </CODE><CODE =
class=3D"string">'2'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(foo + =
bar);&nbsp;=20
      </CODE><CODE class=3D"comments">// 12. uh=20
oh</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.9" class=3D"example">
<P class=3D"title">Example 2.9:                   Forcing a string to =
act as a=20
number                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_669440" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D 1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D </CODE><CODE =
class=3D"string">'2'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// coerce the string =
to a=20
      number</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(foo +=20
      =
Number(bar));</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></D=
IV>
<P>                The Number constructor, when called as a function =
(like=20
above) will have the effect of casting its argument into a number. You =
could=20
also use the unary plus operator, which does the same thing:             =
 </P>
<DIV id=3D"example-2.10" class=3D"example">
<P class=3D"title">Example 2.10:                   Forcing a string to =
act as a=20
number (using the unary-plus operator)                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_734113" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(foo +=20
  =
+bar);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DI=
V>
<DIV class=3D"titlepage">
<H3 class=3D"title">                Logical Operators              =
</H3></DIV>
<P>              Logical operators allow you to evaluate a series of =
operands=20
using AND and OR operations.            </P>
<DIV id=3D"example-2.11" class=3D"example">
<P class=3D"title">Example 2.11:                 Logical AND and OR =
operators     =20
        </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_333164" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D 1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D 0;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">baz =3D 2;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo || bar;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns 1, which is=20
  true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">bar || foo;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns 1, which is=20
  true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo &amp;&amp; =
bar;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns 0, which is=20
  false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo &amp;&amp; =
baz;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns 2, which is=20
  true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">baz &amp;&amp; =
foo;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns 1, which is=20
  true</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>              Though it may not be clear from the example, the <CODE =
class=3D"code">||</CODE>=20
operator returns the value of the first truthy operand, or, in cases =
where=20
neither operand is truthy, it'll return the last of both operands. The =
<CODE=20
class=3D"code">&amp;&amp;</CODE> operator returns the value of the first =
false=20
operand, or the value of the last operand if both operands are truthy.   =
       =20
 </P>
<P>             Be sure to consult <A title=3D"Truthy and Falsy Things" =
href=3D"http://jqfundamentals.com/book/index.html#Truthy and Falsy =
Things">the=20
section called =E2=80=9CTruthy and Falsy Things=E2=80=9D</A> for more =
details on which values=20
evaluate to <CODE class=3D"code">true</CODE> and which evaluate to <CODE =
class=3D"code">false</CODE>.=20
           </P>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              You'll sometimes see developers use these logical =
operators for=20
flow control instead of using <CODE class=3D"code">if</CODE> statements. =
For=20
example:            </P>
<DIV id=3D"highlighter_20959" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// do something with =
foo if foo=20
      is truthy</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo &amp;&amp;=20
      doSomething(foo);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// set bar to baz if =
baz is=20
      truthy;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// otherwise, set it =
to the=20
      return</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// value of=20
    createBar()</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D baz ||=20
createBar();</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              This style is quite elegant and pleasantly terse; that =
said, it=20
can be really hard to read, especially for beginners. I bring it up here =
so=20
you'll recognize it in code you read, but I don't recommend using it =
until=20
you're extremely comfortable with what it means and how you can expect =
it to=20
behave.            </P></DIV>
<DIV class=3D"section" title=3D"Comparison Operators">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Comparison Operators               =
=20
</H3></DIV>
<P>                Comparison operators allow you to test whether values =
are=20
equivalent or whether values are identical.              </P>
<DIV id=3D"example-2.12" class=3D"example">
<P class=3D"title">Example 2.12:                   Comparison operators  =
         =20
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_700232" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D 1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D 0;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">baz =3D </CODE><CODE =
class=3D"string">'1'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bim =3D 2;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo =3D=3D =
bar;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo !=3D =
bar;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo =3D=3D =
baz;&nbsp;&nbsp; &lt;span=20
      class=3D</CODE><CODE class=3D"string">"bold"</CODE><CODE=20
      class=3D"plain">&gt;&lt;strong&gt;</CODE><CODE =
class=3D"comments">// returns=20
      true;=20
careful!&lt;/strong&gt;&lt;/span&gt;</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo =3D=3D=3D=20
      =
baz;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;=20
      </CODE><CODE class=3D"comments">// returns=20
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo !=3D=3D=20
      =
baz;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;=20
      </CODE><CODE class=3D"comments">// returns=20
true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo =3D=3D=3D =
parseInt(baz);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo &gt; =
bim;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">bim &gt; =
baz;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
true</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo &lt;=3D =
baz;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
true</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV>=
</DIV>
<H2 class=3D"title">            Conditional Code          </H2>
<P>            Sometimes you only want to run a block of code under =
certain=20
conditions. Flow control =E2=80=94 via <CODE class=3D"code">if</CODE> =
and <CODE class=3D"code">else</CODE>=20
blocks =E2=80=94&nbsp;lets you run code only under certain conditions.   =
       </P>
<DIV id=3D"example-2.13" class=3D"example">
<P class=3D"title">Example 2.13:               Flow control            =
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_660535" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"keyword">true</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D </CODE><CODE =
class=3D"keyword">false</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(bar) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      this code will never run</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'hello!'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(bar) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      this code won't run</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">} </CODE><CODE=20
      class=3D"keyword">else</CODE> <CODE=20
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(foo)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// this code will =
run</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">}=20
      </CODE><CODE class=3D"keyword">else</CODE> <CODE=20
  class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// this code would run if foo and bar were both =

      false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            While curly braces aren't strictly required around =
single-line=20
<CODE class=3D"code">if</CODE> statements, using them consistently, even =
when they=20
aren't strictly required, makes for vastly more readable code.          =
</P>
<P>            Be mindful not to define functions with the same name =
multiple=20
times within separate <CODE class=3D"code">if</CODE>/<CODE=20
class=3D"code">else</CODE> blocks, as doing so may not have the expected =
result.  =20
       </P></DIV>
<DIV id=3D"Truthy and Falsy Things" class=3D"section" title=3D"Truthy =
and Falsy Things">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Truthy and Falsy Things              =

</H3></DIV>
<P>              In order to use flow control successfully, it's =
important to=20
understand which kinds of values are "truthy" and which kinds of values =
are=20
"falsy." Sometimes, values that seem like they should evaluate one way =
actually=20
evaluate another.            </P>
<DIV id=3D"example-2.14" class=3D"example">
<P class=3D"title">Example 2.14:                 Values that evaluate to =
true     =20
        </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_249851" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"string">'0'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"string">'any =
string'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">[];&nbsp; </CODE><CODE =
class=3D"comments">//=20
      an empty array</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">{};&nbsp; </CODE><CODE =
class=3D"comments">//=20
      an empty object</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">1;&nbsp;&nbsp; =
</CODE><CODE class=3D"comments">//=20
      any non-zero=20
number</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.15" class=3D"example">
<P class=3D"title">Example 2.15:                 Values that evaluate to =
false    =20
         </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_981586" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">0;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"string">''</CODE><CODE=20
      class=3D"plain">;&nbsp; </CODE><CODE class=3D"comments">// an =
empty=20
      string</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">NaN; </CODE><CODE=20
      class=3D"comments">// JavaScript's "not-a-number"=20
  variable</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">null</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">undefined;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// be careful -- undefined can be=20
  =
redefined!</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>=
</DIV>
<DIV class=3D"section" title=3D"Conditional Variable Assignment with The =
Ternary Operator">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Conditional Variable Assignment with =
The=20
Ternary Operator              </H3></DIV>
<P>              Sometimes you want to set a variable to a value =
depending on=20
some condition. You could use an <CODE class=3D"code">if</CODE>/<CODE=20
class=3D"code">else</CODE> statement, but in many cases the ternary =
operator is=20
more convenient. <SPAN class=3D"termdef">[Definition: The <EM=20
class=3D"firstterm">ternary operator</EM> tests a condition; if the =
condition is=20
true, it returns a certain value, otherwise it returns a different=20
value.]</SPAN></P>
<DIV id=3D"example-2.16" class=3D"example">
<P class=3D"title">Example 2.16:                 The ternary operator    =
         =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_269614" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// set foo to 1 if =
bar is=20
      true;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// otherwise, set foo =
to=20
      0</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D bar ? 1 :=20
0;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>              While the ternary operator can be used without =
assigning the=20
return value to a variable, this is generally discouraged.            =
</P></DIV>
<DIV class=3D"section" title=3D"Switch Statements">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Switch Statements              =
</H3></DIV>
<P>              Rather than using a series of if/else if/else blocks, =
sometimes=20
it can be useful to use a switch statement instead. <SPAN=20
class=3D"termdef">[Definition: <EM class=3D"firstterm">Switch =
statements</EM> look=20
at the value of a variable or expression, and run different blocks of =
code=20
depending on the value.]</SPAN></P>
<DIV id=3D"example-2.17" class=3D"example">
<P class=3D"title">Example 2.17:                 A switch statement      =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_675011" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">switch</CODE> <CODE =
class=3D"plain">(foo)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">case</CODE> <CODE =
class=3D"string">'bar'</CODE><CODE =
class=3D"plain">:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'the value was =
bar --=20
      yay!'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">break</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">case</CODE> <CODE =
class=3D"string">'baz'</CODE><CODE =
class=3D"plain">:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'boo baz =
:('</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">break</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">default</CODE><CODE=20
class=3D"plain">:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'everything =
else is just=20
      ok'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">break</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>              Switch statements have somewhat fallen out of favor in=20
JavaScript, because often the same behavior can be accomplished by =
creating an=20
object that has more potential for reuse, testing, etc. For example:     =
      =20
</P>
<DIV id=3D"highlighter_339905" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">stuffToDo =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'bar'</CODE> <CODE class=3D"plain">: </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'the value was =
bar --=20
      yay!'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'baz'</CODE> <CODE class=3D"plain">: </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'boo baz =
:('</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'default'</CODE> <CODE class=3D"plain">: =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'everything =
else is just=20
      ok'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(stuffToDo[foo]) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">stuffToDo[foo]();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">} </CODE><CODE=20
      class=3D"keyword">else</CODE> <CODE=20
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">stuffToDo[</CODE><CODE =
class=3D"string">'default'</CODE><CODE=20
      class=3D"plain">]();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              We'll look at objects in greater depth later in this =
chapter.  =20
         </P></DIV>
<DIV class=3D"section" title=3D"Loops">
<H2 class=3D"title">              Loops            </H2>
<P>              Loops let you run a block of code a certain number of =
times.   =20
        </P>
<DIV id=3D"example-2.18" class=3D"example">
<P class=3D"title">Example 2.18:                 Loops              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_320773" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// logs 'try 0', 'try =
1', ...,=20
      'try 4'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i=3D0; i&lt;5; i++) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'try =
'</CODE> <CODE=20
      class=3D"plain">+ i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P><EM><SPAN class=3D"remark">Note that in</SPAN></EM> <EM>Loops even =
though we=20
use the keyword <SPAN class=3D"token">var</SPAN> before the variable =
name <CODE=20
class=3D"varname">i</CODE>, this does not "scope" the variable <CODE =
class=3D"varname">i</CODE>=20
to the loop block. We'll discuss scope in depth later in this =
chapter.</EM></P>
<DIV class=3D"section" title=3D"The for loop">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  The for loop                =
</H3></DIV>
<P>                A <CODE class=3D"code">for</CODE> loop is made up of =
four=20
statements and has the following structure:              </P>
<DIV id=3D"highlighter_747627" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">([initialisation]; [conditional];=20
  [iteration])</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"spaces">&nbsp;</CODE><CODE=20
      =
class=3D"plain">[loopBody]</CODE></TD></TR></TBODY></TABLE></DIV></DIV></=
DIV>
<P>                The <SPAN =
class=3D"emphasis"><EM>initialisation</EM></SPAN>=20
statement is executed only once, before the loop starts. It gives you an =

opportunity to prepare or declare any variables.              </P>
<P>                The <SPAN =
class=3D"emphasis"><EM>conditional</EM></SPAN>=20
statement is executed before each iteration, and its return value =
decides=20
whether or not the loop is to continue. If the conditional statement =
evaluates=20
to a falsey value then the loop stops.              </P>
<P>                The <SPAN =
class=3D"emphasis"><EM>iteration</EM></SPAN>=20
statement is executed at the end of each iteration and gives you an =
opportunity=20
to change the state of important variables. Typically, this will involve =

incrementing or decrementing a counter and thus bringing the loop ever =
closer to=20
its end.              </P>
<P>                The <SPAN class=3D"emphasis"><EM>loopBody</EM></SPAN> =
statement=20
is what runs on every iteration. It can contain anything you want. =
You'll=20
typically have multiple statements that need to be executed and so will =
wrap=20
them in a block ( <CODE class=3D"code">{...}</CODE>).              </P>
<P>                Here's a typical <CODE class=3D"code">for</CODE> =
loop:         =20
    </P>
<DIV id=3D"example-2.19" class=3D"example">
<P class=3D"title">Example 2.19:                   A typical for loop    =
         =20
  </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_931006" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i =3D 0, limit =3D 100; i &lt; limit; i++)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      This block will be executed 100 =
times</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'Currently at=20
      '</CODE> <CODE class=3D"plain">+ =
i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      Note: the last log will be "Currently at=20
99"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV></DIV>
<DIV class=3D"section" title=3D"The while loop">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  The while loop                =
</H3></DIV>
<P>                A <CODE class=3D"code">while</CODE> loop is similar =
to an <CODE=20
class=3D"code">if</CODE> statement, except that its body will keep =
executing until=20
the condition evaluates to false.              </P>
<DIV id=3D"highlighter_551711" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">while</CODE> <CODE=20
      class=3D"plain">([conditional])=20
[loopBody]</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                Here's a typical <CODE class=3D"code">while</CODE> =
loop:       =20
      </P>
<DIV id=3D"example-2.20" class=3D"example">
<P class=3D"title">Example 2.20:                   A typical while loop  =
         =20
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_203344" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">i=20
      =3D 0;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">while</CODE> <CODE=20
      class=3D"plain">(i &lt; 100) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      This block will be executed 100 =
times</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'Currently at=20
      '</CODE> <CODE class=3D"plain">+ =
i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">i++;=20
      </CODE><CODE class=3D"comments">// increment=20
i</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>                You'll notice that we're having to increment the =
counter=20
within the loop's body. It is possible to combine the conditional and=20
incrementer, like so:              </P>
<DIV id=3D"example-2.21" class=3D"example">
<P class=3D"title">Example 2.21:                   A while loop with a =
combined=20
conditional and incrementer                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_536789" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">i=20
      =3D -1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">while</CODE> <CODE=20
      class=3D"plain">(++i &lt; 100) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      This block will be executed 100 =
times</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'Currently at=20
      '</CODE> <CODE class=3D"plain">+ =
i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>                Notice that we're starting at <CODE =
class=3D"code">-1</CODE>=20
and using the prefix incrementer (<CODE class=3D"code">++i</CODE>).      =
       =20
</P></DIV>
<DIV class=3D"section" title=3D"The do-while loop">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  The do-while loop                =
</H3></DIV>
<P>                This is almost exactly the same as the <CODE=20
class=3D"code">while</CODE> loop, except for the fact that the loop's =
body is=20
executed at least once before the condition is tested.              </P>
<DIV id=3D"highlighter_100940" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">do</CODE> <CODE=20
      class=3D"plain">[loopBody] </CODE><CODE =
class=3D"keyword">while</CODE> <CODE=20
      =
class=3D"plain">([conditional])</CODE></TD></TR></TBODY></TABLE></DIV></D=
IV></DIV>
<P>                Here's a <CODE class=3D"code">do-while</CODE> loop:   =
         =20
 </P>
<DIV id=3D"example-2.22" class=3D"example">
<P class=3D"title">Example 2.22:                   A do-while loop       =
        =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_838676" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">do</CODE> <CODE=20
      class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      Even though the condition evaluates to=20
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      this loop's body will still execute =
once.</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'Hi =
there!'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">} </CODE><CODE=20
      class=3D"keyword">while</CODE> <CODE class=3D"plain">(</CODE><CODE =
class=3D"keyword">false</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>                These types of loops are quite rare since only few =
situations=20
require a loop that blindly executes at least once. Regardless, it's =
good to be=20
aware of it.              </P></DIV>
<DIV class=3D"section" title=3D"Breaking and continuing">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Breaking and continuing            =
   =20
</H3></DIV>
<P>                Usually, a loop's termination will result from the=20
conditional statement not evaluating to true, but it is possible to stop =
a loop=20
in its tracks from within the loop's body with the <CODE=20
class=3D"code">break</CODE> statement.              </P>
<DIV id=3D"example-2.23" class=3D"example">
<P class=3D"title">Example 2.23:                   Stopping a loop       =
        =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_804662" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i =3D 0; i &lt; 10; i++) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(something)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">break</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>                You may also want to continue the loop without =
executing more=20
of the loop's body. This is done using the <CODE =
class=3D"code">continue</CODE>=20
statement.              </P>
<DIV id=3D"example-2.24" class=3D"example">
<P class=3D"title">Example 2.24:                   Skipping to the next =
iteration=20
of a loop                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_837078" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i =3D 0; i &lt; 10; i++) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(something)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">continue</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      The following statement will only be=20
executed</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">// if=20
      the conditional 'something' has not been=20
met</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'I have =
been=20
      reached'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Reserved Words">
<H2 class=3D"title">              Reserved Words            </H2>
<P>              JavaScript has a number of =E2=80=9Creserved =
words,=E2=80=9D or words that have=20
special meaning in the language. You should avoid using these words in =
your code=20
except when using them with their intended meaning.            </P>
<UL>
  <LI><CODE class=3D"code">abstract</CODE></LI>
  <LI><CODE class=3D"code">boolean</CODE></LI>
  <LI><CODE class=3D"code">break</CODE></LI>
  <LI><CODE class=3D"code">byte</CODE></LI>
  <LI><CODE class=3D"code">case</CODE></LI>
  <LI><CODE class=3D"code">catch</CODE></LI>
  <LI><CODE class=3D"code">char</CODE></LI>
  <LI><CODE class=3D"code">class</CODE></LI>
  <LI><CODE class=3D"code">const</CODE></LI>
  <LI><CODE class=3D"code">continue</CODE></LI>
  <LI><CODE class=3D"code">debugger</CODE></LI>
  <LI><CODE class=3D"code">default</CODE></LI>
  <LI><CODE class=3D"code">delete</CODE></LI>
  <LI><CODE class=3D"code">do</CODE></LI>
  <LI><CODE class=3D"code">double</CODE></LI>
  <LI><CODE class=3D"code">else</CODE></LI>
  <LI><CODE class=3D"code">enum</CODE></LI>
  <LI><CODE class=3D"code">export</CODE></LI>
  <LI><CODE class=3D"code">extends</CODE></LI>
  <LI><CODE class=3D"code">final</CODE></LI>
  <LI><CODE class=3D"code">finally</CODE></LI>
  <LI><CODE class=3D"code">float</CODE></LI>
  <LI><CODE class=3D"code">for</CODE></LI>
  <LI><CODE class=3D"code">function</CODE></LI>
  <LI><CODE class=3D"code">goto</CODE></LI>
  <LI><CODE class=3D"code">if</CODE></LI>
  <LI><CODE class=3D"code">implements</CODE></LI>
  <LI><CODE class=3D"code">import</CODE></LI>
  <LI><CODE class=3D"code">in</CODE></LI>
  <LI><CODE class=3D"code">instanceof</CODE></LI>
  <LI><CODE class=3D"code">int</CODE></LI>
  <LI><CODE class=3D"code">interface</CODE></LI>
  <LI><CODE class=3D"code">long</CODE></LI>
  <LI><CODE class=3D"code">native</CODE></LI>
  <LI><CODE class=3D"code">new</CODE></LI>
  <LI><CODE class=3D"code">package</CODE></LI>
  <LI><CODE class=3D"code">private</CODE></LI>
  <LI><CODE class=3D"code">protected</CODE></LI>
  <LI><CODE class=3D"code">public</CODE></LI>
  <LI><CODE class=3D"code">return</CODE></LI>
  <LI><CODE class=3D"code">short</CODE></LI>
  <LI><CODE class=3D"code">static</CODE></LI>
  <LI><CODE class=3D"code">super</CODE></LI>
  <LI><CODE class=3D"code">switch</CODE></LI>
  <LI><CODE class=3D"code">synchronized</CODE></LI>
  <LI><CODE class=3D"code">this</CODE></LI>
  <LI><CODE class=3D"code">throw</CODE></LI>
  <LI><CODE class=3D"code">throws</CODE></LI>
  <LI><CODE class=3D"code">transient</CODE></LI>
  <LI><CODE class=3D"code">try</CODE></LI>
  <LI><CODE class=3D"code">typeof</CODE></LI>
  <LI><CODE class=3D"code">var</CODE></LI>
  <LI><CODE class=3D"code">void</CODE></LI>
  <LI><CODE class=3D"code">volatile</CODE></LI>
  <LI><CODE class=3D"code">while</CODE></LI>
  <LI><CODE class=3D"code">with</CODE></LI></UL></DIV>
<DIV class=3D"section" title=3D"Arrays">
<H2 class=3D"title">              Arrays            </H2>
<P>              Arrays are zero-indexed lists of values. They are a =
handy way=20
to store a set of related items of the same type (such as strings), =
though in=20
reality, an array can include multiple types of items, including other =
arrays.  =20
         </P>
<DIV id=3D"example-2.25" class=3D"example">
<P class=3D"title">Example 2.25:                 A simple array          =
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_970912" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'world'</CODE> =
<CODE =
class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-2.26" class=3D"example">
<P class=3D"title">Example 2.26:                 Accessing array items =
by index   =20
          </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_729346" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"string">'world'</CODE><CODE class=3D"plain">,=20
      </CODE><CODE class=3D"string">'foo'</CODE><CODE class=3D"plain">, =
</CODE><CODE=20
      class=3D"string">'bar'</CODE> <CODE=20
class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">console.log(myArray[3]);&nbsp;&nbsp; </CODE><CODE =
class=3D"comments">//=20
      logs =
'bar'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.27" class=3D"example">
<P class=3D"title">Example 2.27:                 Testing the size of an =
array     =20
        </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_503354" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'world'</CODE> =
<CODE class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">console.log(myArray.length);&nbsp;&nbsp; =
</CODE><CODE class=3D"comments">//=20
      logs =
2</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.28" class=3D"example">
<P class=3D"title">Example 2.28:                 Changing the value of =
an array=20
item              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_449799" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'world'</CODE> =
<CODE class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myArray[1] =3D =
</CODE><CODE class=3D"string">'changed'</CODE><CODE=20
      =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">While it's possible to =
change the=20
value of an array item as shown in</SPAN> =E2=80=9CChanging the value of =
an array item=E2=80=9D,=20
it's generally not advised.</I></P>
<DIV id=3D"example-2.29" class=3D"example">
<P class=3D"title">Example 2.29:                 Adding elements to an =
array      =20
       </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_887797" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'world'</CODE> =
<CODE class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">myArray.push(</CODE><CODE =
class=3D"string">'new'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-2.30" class=3D"example">
<P class=3D"title">Example 2.30:                 Working with arrays     =
        =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_846344" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'h'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'e'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'l'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'l'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'o'</CODE> <CODE=20
      class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myString =3D myArray.join(</CODE><CODE=20
      class=3D"string">''</CODE><CODE class=3D"plain">);&nbsp;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// =
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">mySplit =3D myString.split(</CODE><CODE=20
      class=3D"string">''</CODE><CODE class=3D"plain">);&nbsp; =
</CODE><CODE class=3D"comments">//=20
      [ 'h', 'e', 'l', 'l', 'o'=20
]</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV>
<H2 class=3D"title">            Objects          </H2>
<P>            Objects contain one or more key-value pairs. The key =
portion can=20
be any string. The value portion can be any type of value: a number, a =
string,=20
an array, a function, or even another object.          </P>
<P><SPAN class=3D"termdef">[Definition: When one of these values is a =
function,=20
it=E2=80=99s called a <EM class=3D"firstterm">method</EM> of the =
object.]</SPAN>=20
Otherwise, they are called properties.          </P>
<P>            As it turns out, nearly everything in JavaScript is an =
object =E2=80=94=20
arrays, functions, numbers, even strings =E2=80=94 and they all have =
properties and=20
methods.          </P>
<DIV id=3D"example-2.31" class=3D"example">
<P class=3D"title">Example 2.31:               Creating an "object =
literal"       =20
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_991922" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">sayHello=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myName :=20
      </CODE><CODE =
class=3D"string">'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">myObject.sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// logs=20
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">console.log(myObject.myName);&nbsp;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// logs=20
'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            When creating object literals, you should note that the =
key=20
portion of each key-value pair can be written as any valid JavaScript=20
identifier, a string (wrapped in quotes) or a number:          </P>
<DIV id=3D"highlighter_503266" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">validIdentifier: =
123,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"string">'some=20
      string'</CODE><CODE class=3D"plain">: =
456,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">99999:=20
      789</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            Object literals can be extremely useful for code =
organization;=20
for more information, read <A class=3D"ulink" =
href=3D"http://blog.rebeccamurphey.com/2009/10/15/using-objects-to-organi=
ze-your-code/">Using=20
Objects to Organize Your Code</A> by Rebecca Murphey.          =
</P></DIV>
<DIV class=3D"section" title=3D"Functions">
<H2 class=3D"title">              Functions            </H2>
<P>              Functions contain blocks of code that need to be =
executed=20
repeatedly. Functions can take zero or more arguments, and can =
optionally return=20
a value.            </P>
<P>              Functions can be created in a variety of ways:          =
  </P>
<DIV id=3D"example-2.32" class=3D"example">
<P class=3D"title">Example 2.32:                 Function Declaration    =
         =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_777411" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">function</CODE> <CODE =
class=3D"plain">foo()=20
      { </CODE><CODE class=3D"comments">/* do something */</CODE> <CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<DIV id=3D"example-2.33" class=3D"example">
<P class=3D"title">Example 2.33:                 Named Function =
Expression        =20
     </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_161405" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { </CODE><CODE class=3D"comments">/* do =
something */</CODE>=20
      <CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">I prefer the named =
function expression=20
method of setting a function's name, for some rather</SPAN></I> <I><A =
class=3D"ulink"=20
href=3D"http://yura.thinkweb2.com/named-function-expressions/">in-depth =
and=20
technical reasons</A>. You are likely to see both methods used in =
others'=20
JavaScript code.</I></P>
<DIV class=3D"section" title=3D"Using Functions">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Using Functions                =
</H3></DIV>
<DIV id=3D"example-2.34" class=3D"example">
<P class=3D"title">Example 2.34:                   A simple function     =
         =20
 </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_947228" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">greet =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(person, greeting) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">text =3D =
greeting +=20
      </CODE><CODE class=3D"string">', '</CODE> <CODE class=3D"plain">+=20
      person;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(text);</CODE></TD></TR></TBODY></TABLE></DIV>=

<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">greet(</CODE><CODE=20
      class=3D"string">'Rebecca'</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"string">'Hello'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-2.35" class=3D"example">
<P class=3D"title">Example 2.35:                   A function that =
returns a value=20
               </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_861621" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">greet =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(person, greeting) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">text =3D =
greeting +=20
      </CODE><CODE class=3D"string">', '</CODE> <CODE class=3D"plain">+=20
      person;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE=20
  class=3D"plain">text;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">console.log(greet(</CODE><CODE=20
      class=3D"string">'Rebecca'</CODE><CODE =
class=3D"plain">,</CODE><CODE class=3D"string">'hello'</CODE><CODE=20
      =
class=3D"plain">));</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV id=3D"example-2.36" class=3D"example">
<P class=3D"title">Example 2.36:                   A function that =
returns another=20
function                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_691726" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">greet =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(person, greeting) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">text =3D =
greeting +=20
      </CODE><CODE class=3D"string">', '</CODE> <CODE class=3D"plain">+=20
      person;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { console.log(text); =
};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">greeting =3D greet(</CODE><CODE=20
      class=3D"string">'Rebecca'</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"string">'Hello'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">greeting();</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Self-Executing Anonymous Functions">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Self-Executing Anonymous Functions =
         =20
     </H3></DIV>
<P>                A common pattern in JavaScript is the self-executing=20
anonymous                function. This pattern creates a function =
expression=20
and then                immediately executes the function. This pattern =
is=20
extremely                useful for cases where you want to avoid =
polluting the=20
global                namespace with your code =E2=80=94 no variables =
declared inside of=20
the function are visible outside of it.              </P>
<DIV id=3D"example-2.37" class=3D"example">
<P class=3D"title">Example 2.37:                   A self-executing =
anonymous=20
function                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_365743" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">foo =3D =
</CODE><CODE class=3D"string">'Hello=20
      world'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">console.log(foo);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">//=20
undefined!</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>=
</DIV>
<DIV class=3D"section" title=3D"Functions as Arguments">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Functions as Arguments             =
  =20
</H3></DIV>
<P>                In JavaScript, functions are "first-class citizens"=20
&amp;mdash they can be assigned to variables or passed to other =
functions as=20
arguments. Passing functions as arguments is an extremely common idiom =
in=20
jQuery.              </P>
<DIV id=3D"example-2.38" class=3D"example">
<P class=3D"title">Example 2.38:                   Passing an anonymous =
function=20
as an argument                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_355181" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myFn =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(fn) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">result =3D=20
  fn();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(result);</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myFn(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">() { =
</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"string">'hello=20
      world'</CODE><CODE class=3D"plain">; });&nbsp;&nbsp; </CODE><CODE =
class=3D"comments">//=20
      logs 'hello=20
world'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.39" class=3D"example">
<P class=3D"title">Example 2.39:                   Passing a named =
function as an=20
argument                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_812603" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myFn =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(fn) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">result =3D=20
  fn();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(result);</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myOtherFn =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"string">'hello=20
      world'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">myFn(myOtherFn);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// logs 'hello=20
world'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"section" title=3D"Testing Type">
<H2 class=3D"title">              Testing Type            </H2>
<P>              JavaScript offers a way to test the "type" of a =
variable.      =20
       However, the result can be confusing =E2=80=94 for example, the =
type of an Array=20
is "object".            </P>
<P>              It's common practice to use the <CODE=20
class=3D"code">typeof</CODE> operator when trying to determining the =
type of a=20
specific value.            </P>
<DIV id=3D"example-2.40" class=3D"example">
<P class=3D"title">Example 2.40:                 Testing the type of =
various=20
variables              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_897470" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myFunction =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">foo :=20
      </CODE><CODE =
class=3D"string">'bar'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myArray =3D [ </CODE><CODE =
class=3D"string">'a'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'b'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'c'</CODE> <CODE=20
      class=3D"plain">];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myString =3D </CODE><CODE =
class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myNumber =3D =
3;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myFunction;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
'function'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myObject;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
'object'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myArray;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// &lt;span=20
      class=3D"bold"&gt;&lt;strong&gt;returns 'object' --=20
      =
careful!&lt;/strong&gt;&lt;/span&gt;</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myString;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
'string';</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myNumber;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// returns=20
'number'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"keyword">null</CODE><CODE=20
      class=3D"plain">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// &lt;span=20
      class=3D"bold"&gt;&lt;strong&gt;returns 'object' --=20
      =
careful!&lt;/strong&gt;&lt;/span&gt;</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(myArray.push &amp;&amp; myArray.slice &amp;&amp;=20
      myArray.join) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      probably an array</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      (this is called "duck =
typing")</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(Object.prototype.toString.call(myArray) =3D=3D=3D =
</CODE><CODE=20
      class=3D"string">'[object Array]'</CODE><CODE class=3D"plain">)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      Definitely an array!</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      This is widely considered as the most robust=20
way</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">// to=20
      determine if a specific value is an=20
Array.</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>33</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>              jQuery offers utility methods to help you determine the =
type of=20
an arbitrary value. These will be covered later.            </P></DIV>
<H2 class=3D"title">            The <CODE class=3D"code">this</CODE> =
keyword        =20
 </H2>
<P>            In JavaScript, as in most object-oriented programming =
languages,=20
<CODE class=3D"code">this</CODE> is a special keyword that is used =
within methods=20
to refer to the object on which a method is being invoked. The value of =
<CODE=20
class=3D"code">this</CODE> is determined using a simple series of steps: =
        =20
</P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>If the function is invoked using <A class=3D"ulink" =
href=3D"https://developer.mozilla.org/en/JavaScript/Reference/Global_Obje=
cts/Function/call">Function.call</A>=20
  or <A class=3D"ulink" =
href=3D"https://developer.mozilla.org/en/JavaScript/Reference/Global_Obje=
cts/Function/apply">Function.apply</A>,=20
  <CODE class=3D"code">this</CODE> will be set to the first argument =
passed to=20
  call/apply. If the first argument passed to call/apply is <CODE=20
  class=3D"code">null</CODE> or <CODE class=3D"code">undefined</CODE>, =
<CODE class=3D"code">this</CODE>=20
  will refer to the global object (which is the <CODE =
class=3D"code">window</CODE>=20
  object in Web browsers).              </LI>
  <LI>If the function being invoked was created using <A class=3D"ulink" =
href=3D"https://developer.mozilla.org/en/JavaScript/Reference/Global_Obje=
cts/Function/bind">Function.bind</A>,=20
  <CODE class=3D"code">this</CODE> will be the first argument that was =
passed to=20
  bind at the time the function was created.              </LI>
  <LI>If the function is being invoked as a method of an object, <CODE =
class=3D"code">this</CODE>=20
  will refer to that object.              </LI>
  <LI>Otherwise, the function is being invoked as a standalone function =
not=20
  attached to any object, and <CODE class=3D"code">this</CODE> will =
refer to the=20
  global object.              </LI></OL></DIV>
<DIV id=3D"example-2.41" class=3D"example">
<P class=3D"title">Example 2.41:               A function invoked using=20
Function.call            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_691779" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">sayHello=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'Hi! My =
name is=20
      '</CODE> <CODE class=3D"plain">+ </CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.myName);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myName :=20
      </CODE><CODE =
class=3D"string">'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">secondObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myName :=20
      </CODE><CODE =
class=3D"string">'Colin'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">myObject.sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// logs 'Hi! My name is=20
  Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">myObject.sayHello.call(secondObject); </CODE><CODE =
class=3D"comments">//=20
      logs 'Hi! My name is=20
Colin'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.42" class=3D"example">
<P class=3D"title">Example 2.42:               A function created using=20
Function.bind            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_642378" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myName =3D </CODE><CODE class=3D"string">'the =
global=20
      object'</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">sayHello=20
      =3D </CODE><CODE class=3D"keyword">function</CODE> <CODE =
class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'Hi! My =
name is=20
      '</CODE> <CODE class=3D"plain">+ </CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.myName);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myObject=20
      =3D {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">myName : </CODE><CODE=20
  class=3D"string">'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myObjectHello =3D=20
sayHello.bind(myObject);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// logs 'Hi! My name is the global=20
  object'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myObjectHello();&nbsp;=20
      </CODE><CODE class=3D"comments">// logs 'Hi! My name is=20
  =
Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.43" class=3D"example">
<P class=3D"title">Example 2.43:               A function being attached =
to an=20
object at runtime            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_963510" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myName =3D </CODE><CODE class=3D"string">'the =
global=20
      object'</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">sayHello=20
      =3D </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'Hi! My =
name is=20
      '</CODE> <CODE class=3D"plain">+ </CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.myName);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myObject=20
      =3D {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">myName : </CODE><CODE=20
  class=3D"string">'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">secondObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">myName : </CODE><CODE=20
  class=3D"string">'Colin'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myObject.sayHello =3D=20
      sayHello;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">secondObject.sayHello =
=3D=20
      sayHello;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// logs 'Hi! My name is the global =

      object'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">myObject.sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =

      </CODE><CODE class=3D"comments">// logs 'Hi! My name is=20
  Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">secondObject.sayHello();&nbsp;=20
      </CODE><CODE class=3D"comments">// logs 'Hi! My name is=20
  Colin'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            When invoking a function deep within a long namespace, it =
is=20
often tempting to reduce the amount of code you need to type by storing =
a=20
reference to the actual function as a single, shorter variable. It is =
important=20
not to do this with instance methods as this will cause the value of =
<CODE=20
class=3D"code">this</CODE> within the function to change, leading to =
incorrect=20
code operation. For instance:          </P>
<DIV id=3D"highlighter_29962" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myNamespace =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myObject=20
      : {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">sayHello : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'Hi! My =
name is=20
      '</CODE> <CODE class=3D"plain">+ </CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.myName);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">myName : </CODE><CODE=20
  class=3D"string">'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">hello =3D=20
myNamespace.myObject.sayHello;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">hello();&nbsp; =
</CODE><CODE class=3D"comments">//=20
      logs 'Hi! My name is=20
undefined'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            You can, however, safely reduce everything up to the =
object on=20
which the method is invoked:          </P>
<DIV id=3D"highlighter_876087" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myNamespace =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myObject=20
      : {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">sayHello : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'Hi! My =
name is=20
      '</CODE> <CODE class=3D"plain">+ </CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.myName);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">myName : </CODE><CODE=20
  class=3D"string">'Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">obj =3D =
myNamespace.myObject;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">obj.sayHello();&nbsp; =
</CODE><CODE=20
      class=3D"comments">// logs 'Hi! My name is=20
Rebecca'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Scope">
<H2 class=3D"title">              Scope            </H2>
<P>              "Scope" refers to the variables that are available to a =
piece=20
of code at a given time. A lack of understanding of scope can lead to=20
frustrating debugging experiences.            </P>
<P>              When a variable is declared inside of a function using =
the=20
<CODE class=3D"code">var</CODE> keyword, it is only available to code    =
         =20
inside of that function =E2=80=94 code outside of that function cannot =
access the=20
variable. On the other hand, functions defined <SPAN=20
class=3D"emphasis"><EM>inside</EM></SPAN> that function <SPAN=20
class=3D"emphasis"><EM>will</EM></SPAN> have access to to the declared =
variable.  =20
         </P>
<P>              Furthermore, variables that are declared inside a =
function     =20
        without the <CODE class=3D"code">var</CODE> keyword are not =
local         =20
    to the function =E2=80=94 JavaScript will traverse the scope chain =
all the way up to=20
the window scope to find where the variable was previously defined. If =
the=20
variable wasn't previously defined, it will be defined in the global =
scope,=20
which can have extremely unexpected consequences;            </P>
<DIV id=3D"example-2.44" class=3D"example">
<P class=3D"title">Example 2.44:                 Functions have access =
to=20
variables defined in the same scope              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_943155" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"string">'hello'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">sayHello =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(foo);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;=20
      </CODE><CODE class=3D"comments">// logs=20
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">console.log(foo);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// also logs=20
'hello'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.45" class=3D"example">
<P class=3D"title">Example 2.45:                 Code outside the scope =
in which a=20
variable was defined does not have access to the variable              =
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_649492" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">sayHello =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">foo =3D =
</CODE><CODE class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(foo);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;=20
      </CODE><CODE class=3D"comments">// logs=20
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">console.log(foo);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// doesn't log=20
anything</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.46" class=3D"example">
<P class=3D"title">Example 2.46:                 Variables with the same =
name can=20
exist in different scopes with different values              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_541022" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"string">'world'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">sayHello =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">foo =3D =
</CODE><CODE class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(foo);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">sayHello();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;=20
      </CODE><CODE class=3D"comments">// logs=20
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">console.log(foo);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// logs=20
'world'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.47" class=3D"example">
<P class=3D"title">Example 2.47:                 Functions can "see" =
changes in=20
variable values after the function is defined              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_173025" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myFunction =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">foo =3D =
</CODE><CODE class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">myFn =3D =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">console.log(foo);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">foo =3D=20
      </CODE><CODE class=3D"string">'world'</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE=20
  class=3D"plain">myFn;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">f=20
      =3D myFunction();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">f();&nbsp; </CODE><CODE =
class=3D"comments">//=20
      logs 'world' -- uh=20
oh</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-2.48" class=3D"example">
<P class=3D"title">Example 2.48:                 Scope insanity          =
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_659741" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// a self-executing =
anonymous=20
      function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">baz =3D=20
  1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">bim =3D =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { alert(baz); =
};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">bar =3D=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">() {=20
      alert(baz); };</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(baz);&nbsp;=20
      </CODE><CODE class=3D"comments">// baz is not defined outside of =
the=20
      function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">bar();&nbsp; =
</CODE><CODE class=3D"comments">//=20
      bar is defined outside of the anonymous=20
function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// because it wasn't declared with var;=20
      furthermore,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// because it was defined in the same scope as=20
    baz,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// it has access to baz even though other=20
  code</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// outside of the function does=20
not</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">bim();&nbsp; =
</CODE><CODE class=3D"comments">//=20
      bim is not defined outside of the anonymous=20
function,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// so this will result in an=20
error</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV=
>
<DIV class=3D"section" title=3D"Closures">
<H2 class=3D"title">              Closures            </H2>
<P>              Closures are an extension of the concept of scope =
=E2=80=94 functions=20
have access to variables that were available in the scope where the =
function was=20
created. If that=E2=80=99s confusing, don=E2=80=99t worry: closures are =
generally best=20
understood by example.            </P>
<P>              In =E2=80=9CFunctions can "see" changes in variable =
values after the   =20
          function is defined=E2=80=9D, we saw how functions have access =
to             =20
changing variable values. The same sort of behavior exists with          =
   =20
functions defined within loops =E2=80=94 the function "sees" the change =
in the=20
variable's value even after the function is defined, resulting in all =
clicks=20
alerting 5.            </P>
<DIV id=3D"example-2.49" class=3D"example">
<P class=3D"title">Example 2.49:                 How to lock in the =
value of i?   =20
          </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_619156" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">/* this won't behave =
as we want=20
      it to; */</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">/* every click will =
alert 5=20
      */</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i=3D0; i&lt;5; i++) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"string">'&lt;p&gt;click=20
      me&lt;/p&gt;'</CODE><CODE class=3D"plain">).appendTo(</CODE><CODE =
class=3D"string">'body'</CODE><CODE=20
      class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<DIV id=3D"example-2.50" class=3D"example">
<P class=3D"title">Example 2.50:                 Locking in the value of =
i with a=20
closure              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_381927" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">/* fix: =
=E2=80=9Cclose=E2=80=9D the value of i=20
      inside createFunction, so it won't change=20
*/</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">createFunction =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { alert(i); =
};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i=3D0; i&lt;5; i++) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"string">'&lt;p&gt;click=20
      me&lt;/p&gt;'</CODE><CODE class=3D"plain">).appendTo(</CODE><CODE =
class=3D"string">'body'</CODE><CODE=20
      =
class=3D"plain">).click(createFunction(i));</CODE></TD></TR></TBODY></TAB=
LE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>              Closures can also be used to resolve issues with the =
<CODE=20
class=3D"code">this</CODE> keyword, which is unique to each scope:       =
     </P>
<DIV id=3D"example-2.51" class=3D"example">
<P class=3D"title">Example 2.51:                 Using a closure to =
access inner=20
and outer object instances simultaneously              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_262544" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">outerObj =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myName :=20
      </CODE><CODE class=3D"string">'outer'</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">outerFunction : </CODE><CODE =
class=3D"keyword">function</CODE>=20
      <CODE class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// provide a reference to outerObj through=20
      innerFunction's closure</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">self =3D =
</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">innerObj =3D=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">myName : </CODE><CODE =
class=3D"string">'inner'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">innerFunction : </CODE><CODE =
class=3D"keyword">function</CODE>=20
      <CODE class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(self.myName, </CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.myName); =
</CODE><CODE=20
      class=3D"comments">// logs 'outer =
inner'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">innerObj.innerFunction();</CODE></TD></TR></TBODY></TABLE=
></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.myName); </CODE><CODE class=3D"comments">// logs=20
      'outer'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">outerObj.outerFunction();</CODE></TD></TR></TBODY></TABLE=
></DIV></DIV></DIV></DIV></DIV>
<P>              This mechanism can be particularly useful when dealing =
with=20
callbacks, though in those cases, it is often better to use <A =
class=3D"ulink"=20
href=3D"https://developer.mozilla.org/en/JavaScript/Reference/Global_Obje=
cts/Function/bind">Function.bind</A>,=20
which will avoid any overhead associated with scope traversal.           =
=20
</P></DIV></DIV></DIV>
<DIV class=3D"part" title=3D"Part&nbsp;II.&nbsp;jQuery: Basic Concepts">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H1 class=3D"title">                Part&nbsp;II.&nbsp;jQuery: Basic =
Concepts     =20
        </H1></DIV></DIV></DIV>
<DIV id=3D"chapter-3" class=3D"chapter" title=3D"jQuery Basics">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  jQuery Basics               =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"$(document).ready()">
<H2 class=3D"title">              $(document).ready()            </H2>
<P>              You cannot safely manipulate a page until the document =
is=20
=E2=80=9Cready.=E2=80=9D jQuery detects this state of readiness for you; =
code included inside=20
<CODE class=3D"code">$(document).ready()</CODE> will only run once the =
page is=20
ready for JavaScript code to execute.            </P>
<DIV id=3D"example-3.1" class=3D"example">
<P class=3D"title">Example 3.1:                 A $(document).ready() =
block       =20
      </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_157425" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$(document).ready(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'ready!'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>              There is a shorthand for <CODE=20
class=3D"code">$(document).ready()</CODE> that you will sometimes see; =
however, I=20
recommend against using it if you are writing code that people who =
aren't=20
experienced with jQuery may see.            </P>
<DIV id=3D"example-3.2" class=3D"example">
<P class=3D"title">Example 3.2:                 Shorthand for =
$(document).ready() =20
            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_990222" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'ready!'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>              You can also pass a named function to <CODE=20
class=3D"code">$(document).ready()</CODE> instead of passing an =
anonymous=20
function.            </P>
<DIV id=3D"example-3.3" class=3D"example">
<P class=3D"title">Example 3.3:                 Passing a named function =
instead=20
of an anonymous function              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_499299" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">function</CODE> <CODE =
class=3D"plain">readyFn()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      code to run when the document is =
ready</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
    =
class=3D"plain">$(document).ready(readyFn);</CODE></TD></TR></TBODY></TAB=
LE></DIV></DIV></DIV></DIV></DIV></DIV>
<H2 class=3D"title">            Selecting Elements          </H2>
<P>            The most basic concept of jQuery is to =E2=80=9Cselect =
some elements and=20
do something with them.=E2=80=9D jQuery supports most CSS3 selectors, as =
well as some=20
non-standard selectors. For a complete selector reference, visit <A =
class=3D"ulink"=20
href=3D"http://api.jquery.com/category/selectors/">http://api.jquery.com/=
category/selectors/</A>.=20
         </P>
<P>            Following are a few examples of common selection =
techniques.     =20
    </P>
<DIV id=3D"example-3.4" class=3D"example">
<P class=3D"title">Example 3.4:               Selecting elements by ID   =
        =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_109891" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myId'</CODE><CODE class=3D"plain">); =
</CODE><CODE class=3D"comments">//=20
      note IDs must be unique per=20
page</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-3.5" class=3D"example">
<P class=3D"title">Example 3.5:               Selecting elements by =
class name    =20
       </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_381410" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div.myClass'</CODE><CODE class=3D"plain">); =
</CODE><CODE=20
      class=3D"comments">// performance improves if you specify element=20
    type</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-3.6" class=3D"example">
<P class=3D"title">Example 3.6:               Selecting elements by =
attribute     =20
      </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_359901" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'input[name=3Dfirst_name]'</CODE><CODE =
class=3D"plain">);=20
      </CODE><CODE class=3D"comments">// beware, this can be very=20
  slow</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-3.7" class=3D"example">
<P class=3D"title">Example 3.7:               Selecting elements by =
compound CSS=20
selector            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_128999" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#contents ul.people li'</CODE><CODE=20
    =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-3.8" class=3D"example">
<P class=3D"title">Example 3.8:               Pseudo-selectors           =
 </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_122795" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a.external:first'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'tr:odd'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myForm :input'</CODE><CODE =
class=3D"plain">);&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// select all input-like elements =
in a=20
      form</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div:visible'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div:gt(2)'</CODE><CODE=20
      class=3D"plain">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// all except the first three=20
divs</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div:animated'</CODE><CODE=20
      class=3D"plain">);&nbsp;&nbsp;&nbsp;&nbsp; </CODE><CODE =
class=3D"comments">//=20
      all currently animated=20
divs</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV>
<H3 class=3D"title">            Note          </H3>
<P>            When you use the <CODE class=3D"code">:visible</CODE> and =
<CODE=20
class=3D"code">:hidden</CODE> pseudo-selectors, jQuery tests the actual =
visibility=20
of the element, not its CSS visibility or display =E2=80=94 that is, it =
looks to see if=20
the element's <SPAN class=3D"emphasis"><EM>physical height and width on =
the=20
page</EM></SPAN> are both greater than zero. However, this test doesn't =
work=20
with <CODE class=3D"code">&lt;tr&gt;</CODE> elements; in this case, =
jQuery does=20
check the CSS <CODE class=3D"code">display</CODE> property, and =
considers an=20
element hidden if its <CODE class=3D"code">display</CODE> property is =
set to <CODE=20
class=3D"code">none</CODE>. Elements that have not been added to the DOM =
will=20
always be considered hidden, even if the CSS that would affect them =
would render=20
them visible. (See the Manipulation section later in this chapter to =
learn how=20
to create and add elements to the DOM.)          </P>
<P>            For reference, here is the code jQuery uses to determine =
whether=20
an element is visible or hidden, with comments added for clarity:        =
  </P>
<DIV id=3D"highlighter_402956" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">jQuery.expr.filters.hidden =3D=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">( elem )=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">width =3D =
elem.offsetWidth,=20
      height =3D =
elem.offsetHeight,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">skip =3D elem.nodeName.toLowerCase() =3D=3D=3D =
</CODE><CODE class=3D"string">"tr"</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      does the element have 0 height, 0 =
width,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      and it's not a &lt;tr&gt;?</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"plain">width =
=3D=3D=3D 0 &amp;&amp;=20
      height =3D=3D=3D 0 &amp;&amp; !skip =
?</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// then it must be=20
hidden</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">true</CODE> <CODE=20
class=3D"plain">:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// but if it has width and=20
height</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// and it's not a=20
&lt;tr&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">width &gt; 0 &amp;&amp; height &gt; 0 &amp;&amp; =
!skip=20
      ?</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// then it must be=20
visible</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">false</CODE> <CODE=20
class=3D"plain">:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// if we get here, the element has=20
  width</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// and height, but it's also a=20
  &lt;tr&gt;,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// so check its display property=20
to</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// decide whether it's=20
hidden</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">jQuery.curCSS(elem, </CODE><CODE=20
      class=3D"string">"display"</CODE><CODE class=3D"plain">) =3D=3D=3D =
</CODE><CODE=20
      class=3D"string">"none"</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">jQuery.expr.filters.visible =3D=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">( elem )=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE=20
      class=3D"plain">!jQuery.expr.filters.hidden( elem=20
);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V>
<DIV class=3D"sidebar" title=3D"Choosing Selectors">
<P class=3D"title"><B>Choosing Selectors</B></P>
<P>              Choosing good selectors is one way to improve the =
performance=20
of your JavaScript. A little specificity =E2=80=94 for example, =
including an element=20
type such as <CODE class=3D"code">div</CODE> when selecting elements by =
class name=20
=E2=80=94 can go a long way. Generally, any time you can give jQuery a =
hint about where=20
it might expect to find what you're looking for, you should. On the =
other hand,=20
too much specificity can be a bad thing. A selector such as <CODE=20
class=3D"code">#myTable thead tr th.special</CODE> is overkill if a =
selector such=20
as <CODE class=3D"code">#myTable th.special</CODE> will get you what you =
want.    =20
       </P>
<P>              jQuery offers many attribute-based selectors, allowing =
you to=20
make selections based on the content of arbitrary attributes using =
simplified=20
regular expressions.            </P>
<DIV id=3D"highlighter_879447" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// find all =
&lt;a&gt;s whose=20
      rel attribute</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// ends with=20
  "thinger"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">"a[rel$=3D'thinger']"</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              While these can be useful in a pinch, they can also be=20
extremely slow =E2=80=94 I once wrote an attribute-based selector that =
locked up my page=20
for multiple seconds. Wherever possible, make your selections using IDs, =
class=20
names, and tag names.            </P>
<P>              Want to know more? <A class=3D"ulink" =
href=3D"http://paulirish.com/perf">Paul=20
Irish has a great presentation about improving performance in =
JavaScript</A>,=20
with several slides focused specifically on selector performance.        =
   =20
</P></DIV>
<DIV class=3D"section" title=3D"Does My Selection Contain Any =
Elements?">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Does My Selection Contain Any =
Elements?       =20
      </H3></DIV>
<P>              Once you've made a selection, you'll often want to know =
whether=20
you have anything to work with. You may be inclined to try something =
like:      =20
     </P>
<DIV id=3D"highlighter_256034" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($(</CODE><CODE =
class=3D"string">'div.foo'</CODE><CODE class=3D"plain">))=20
      { ... }</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              This won't work. When you make a selection using <CODE =
class=3D"code">$()</CODE>,=20
an object is always returned, and objects always evaluate to <CODE=20
class=3D"code">true</CODE>. Even if your selection doesn't contain any =
elements,=20
the code inside the <CODE class=3D"code">if</CODE> statement will still =
run.      =20
     </P>
<P>              Instead, you need to test the selection's length =
property,=20
which tells you how many elements were selected. If the answer is 0, the =
length=20
property will evaluate to false when used as a boolean value.            =
</P>
<DIV id=3D"example-3.9" class=3D"example">
<P class=3D"title">Example 3.9:                 Testing whether a =
selection=20
contains elements              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_566454" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($(</CODE><CODE =
class=3D"string">'div.foo'</CODE><CODE class=3D"plain">).length)=20
      { ... =
}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"titlepage">
<H3 class=3D"title">              Saving Selections            =
</H3></DIV>
<P>            Every time you make a selection, a lot of code runs, and =
jQuery=20
doesn't do caching of selections for you. If you've made a selection =
that you=20
might need to make again, you should save the selection in a variable =
rather=20
than making the selection repeatedly.          </P>
<DIV id=3D"example-3.10" class=3D"example">
<P class=3D"title">Example 3.10:               Storing selections in a =
variable   =20
        </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_309400" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$divs =3D $(</CODE><CODE =
class=3D"string">'div'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            In =E2=80=9CStoring selections in a variable=E2=80=9D, =
the variable name begins  =20
         with a dollar sign. Unlike in other languages, there's nothing  =
       =20
  special about the dollar sign in JavaScript =E2=80=94 it's just        =
    another=20
character. We use it here to indicate that the variable            =
contains a=20
jQuery object. This practice =E2=80=94 a sort of <A class=3D"ulink" =
href=3D"http://en.wikipedia.org/wiki/Hungarian_notation">Hungarian=20
notation</A> =E2=80=94 is merely convention, and is not mandatory.       =
   </P></DIV>
<P>            Once you've stored your selection, you can call jQuery =
methods on=20
the variable you stored it in just like you would have called them on =
the=20
original selection.          </P>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            A selection only fetches the elements that are on the =
page when=20
you make the selection. If you add elements to the page later, you'll =
have to=20
repeat the selection or otherwise add them to the selection stored in =
the=20
variable. Stored selections don't magically update when the DOM changes. =
       =20
 </P></DIV>
<DIV class=3D"section" title=3D"Refining &amp; Filtering Selections">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Refining &amp; Filtering Selections  =
         =20
  </H3></DIV>
<P>              Sometimes you have a selection that contains more than =
what=20
you're after; in this case, you may want to refine your selection. =
jQuery offers=20
several methods for zeroing in on exactly what you're after.            =
</P>
<DIV id=3D"example-3.11" class=3D"example">
<P class=3D"title">Example 3.11:                 Refining selections     =
        =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_55196" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div.foo'</CODE><CODE =
class=3D"plain">).has(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE=20
      =
class=3D"plain">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =

      </CODE><CODE class=3D"comments">// div.foo elements that contain=20
      &lt;p&gt;'s</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).not(</CODE><CODE class=3D"string">'.bar'</CODE><CODE=20
      =
class=3D"plain">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// h1 elements that don't have a =
class of=20
      bar</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE =
class=3D"string">'ul=20
      li'</CODE><CODE class=3D"plain">).filter(</CODE><CODE=20
      class=3D"string">'.current'</CODE><CODE class=3D"plain">);&nbsp; =
</CODE><CODE=20
      class=3D"comments">// unordered list items with class of=20
  current</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE =
class=3D"string">'ul=20
      li'</CODE><CODE=20
      =
class=3D"plain">).first();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// just the first unordered list=20
    item</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE =
class=3D"string">'ul=20
      li'</CODE><CODE=20
      =
class=3D"plain">).eq(5);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// the=20
sixth</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV=
>
<DIV class=3D"section" title=3D"Selecting Form Elements">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Selecting Form Elements              =

</H3></DIV>
<P>              jQuery offers several pseudo-selectors that help you =
find=20
elements in your forms; these are especially helpful because it can be =
difficult=20
to distinguish between form elements based on their state or type using =
standard=20
CSS selectors.            </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">:button</SPAN></DT>
  <DD>
  <P>                    Selects <CODE =
class=3D"code">&lt;button&gt;</CODE>=20
  elements and elements with <CODE =
class=3D"code">type=3D"button"</CODE></P></DD>
  <DT><SPAN class=3D"term">:checkbox</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"checkbox"</CODE></P></DD>
  <DT><SPAN class=3D"term">:checked</SPAN></DT>
  <DD>
  <P>                    Selects checked inputs                  =
</P></DD>
  <DT><SPAN class=3D"term">:disabled</SPAN></DT>
  <DD>
  <P>                    Selects disabled form elements                  =

  </P></DD>
  <DT><SPAN class=3D"term">:enabled</SPAN></DT>
  <DD>
  <P>                    Selects enabled form elements                 =20
</P></DD>
  <DT><SPAN class=3D"term">:file</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"file"</CODE></P></DD>
  <DT><SPAN class=3D"term">:image</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"image"</CODE></P></DD>
  <DT><SPAN class=3D"term">:input</SPAN></DT>
  <DD>
  <P>                    Selects <CODE =
class=3D"code">&lt;input&gt;</CODE>, <CODE=20
  class=3D"code">&lt;textarea&gt;</CODE>, and <CODE=20
  class=3D"code">&lt;select&gt;</CODE> elements                  =
</P></DD>
  <DT><SPAN class=3D"term">:password</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"password"</CODE></P></DD>
  <DT><SPAN class=3D"term">:radio</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"radio"</CODE></P></DD>
  <DT><SPAN class=3D"term">:reset</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"reset"</CODE></P></DD>
  <DT><SPAN class=3D"term">:selected</SPAN></DT>
  <DD>
  <P>                    Selects options that are selected               =
  =20
  </P></DD>
  <DT><SPAN class=3D"term">:submit</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"submit"</CODE></P></DD>
  <DT><SPAN class=3D"term">:text</SPAN></DT>
  <DD>
  <P>                    Selects inputs with <CODE=20
  class=3D"code">type=3D"text"</CODE></P></DD></DL></DIV>
<DIV id=3D"example-3.12" class=3D"example">
<P class=3D"title">Example 3.12:                 Using form-related=20
pseduo-selectors              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_532099" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myForm :input'</CODE><CODE class=3D"plain">); =
</CODE><CODE=20
      class=3D"comments">// get all elements that accept=20
input</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV=
>
<DIV class=3D"section" title=3D"Working with Selections">
<H2 class=3D"title">              Working with Selections            =
</H2>
<P>              Once you have a selection, you can call methods on the=20
selection. Methods generally come in two different flavors: getters and =
setters.=20
Getters return a property of the first selected element; setters set a =
property=20
on all selected elements.            </P>
<DIV class=3D"titlepage">
<H3 class=3D"title">                Chaining              </H3></DIV>
<P>              If you call a method on a selection and that method =
returns a=20
jQuery object, you can continue to call jQuery methods on the object =
without=20
pausing for a semicolon.            </P>
<DIV id=3D"example-3.13" class=3D"example">
<P class=3D"title">Example 3.13:                 Chaining              =
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_838008" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#content'</CODE><CODE =
class=3D"plain">).find(</CODE><CODE=20
      class=3D"string">'h3'</CODE><CODE =
class=3D"plain">).eq(2).html(</CODE><CODE=20
      class=3D"string">'new text for the third h3!'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              If you are writing a chain that includes several steps, =
you=20
(and the person who comes after you) may find your code more readable if =
you=20
break the chain over several lines.            </P>
<DIV id=3D"example-3.14" class=3D"example">
<P class=3D"title">Example 3.14:                 Formatting chained code =
         =20
   </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_227383" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#content'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'h3'</CODE><CODE =
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.eq(2)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.html(</CODE><CODE class=3D"string">'new text for =
the third=20
      h3!'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              If you change your selection in the midst of a chain, =
jQuery=20
provides the <CODE class=3D"code">$.fn.end</CODE> method to get you back =
to your=20
original selection.            </P>
<DIV id=3D"example-3.15" class=3D"example">
<P class=3D"title">Example 3.15:                 Restoring your original =
selection=20
using $.fn.end              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_159200" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#content'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'h3'</CODE><CODE =
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.eq(2)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">.html(</CODE><CODE class=3D"string">'new text for =
the third=20
      h3!'</CODE><CODE =
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">.end()=20
      </CODE><CODE class=3D"comments">// restores the selection to all =
h3's in=20
      #content</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.eq(0)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">.html(</CODE><CODE class=3D"string">'new text for =
the first=20
      h3!'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              Chaining is extraordinarily powerful, and it's a =
feature that  =20
           many libraries have adapted since it was made popular by =
jQuery.     =20
        However, it must be used with care. Extensive chaining can make  =
       =20
    code extremely difficult to modify or debug. There is no             =
=20
hard-and-fast rule to how long a chain should be =E2=80=94 just know =
that it is easy to=20
get carried away.            </P></DIV>
<DIV class=3D"section" title=3D"Getters &amp; Setters">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Getters &amp; Setters              =
 =20
</H3></DIV>
<P>                jQuery =E2=80=9Coverloads=E2=80=9D its methods, so =
the method used to set a=20
value generally has the same name as the method used to get a value. =
When a=20
method is used to set a value, it is called a setter. When a method is =
used to=20
get (or read) a value, it is called a getter. Setters affect all =
elements in a=20
selection; getters get the requested value only for the first element in =
the=20
selection.              </P>
<DIV id=3D"example-3.16" class=3D"example">
<P class=3D"title">Example 3.16:                   The $.fn.html method =
used as a=20
setter                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_406247" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).html(</CODE><CODE class=3D"string">'hello=20
      world'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-3.17" class=3D"example">
<P class=3D"title">Example 3.17:                   The html method used =
as a=20
getter                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_181947" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
  =
class=3D"plain">).html();</CODE></TD></TR></TBODY></TABLE></DIV></DIV></D=
IV></DIV></DIV>
<P>                Setters return a jQuery object, allowing you to =
continue to=20
call jQuery methods on your selection; getters return whatever they were =
asked=20
to get, meaning you cannot continue to call jQuery methods on the value =
returned=20
by the getter.              </P></DIV></DIV>
<H2 class=3D"title">            CSS, Styling, &amp; Dimensions          =
</H2>
<P>            jQuery includes a handy way to get and set CSS properties =
of=20
elements.          </P>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            CSS properties that normally include a hyphen need to be =
<EM=20
class=3D"firstterm">camel cased</EM> in JavaScript. For example, the CSS =
property=20
<CODE class=3D"code">font-size</CODE> is expressed as <CODE=20
class=3D"code">fontSize</CODE> when used as a property name in =
JavaScript. This=20
does not apply, however, when passing the name of a CSS property to the =
<CODE=20
class=3D"code">$.fn.css</CODE> method as a string =E2=80=94 in that =
case, either the camel=20
cased or hyphenated form will work.</P>
<P></P></DIV>
<DIV id=3D"example-3.18" class=3D"example">
<P class=3D"title">Example 3.18:               Getting CSS properties    =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_583474" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).css(</CODE><CODE =
class=3D"string">'fontSize'</CODE><CODE=20
      class=3D"plain">); </CODE><CODE class=3D"comments">// returns a =
string such as=20
      "19px"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).css(</CODE><CODE =
class=3D"string">'font-size'</CODE><CODE=20
      class=3D"plain">); </CODE><CODE class=3D"comments">// also=20
  works</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"example-3.19" class=3D"example">
<P class=3D"title">Example 3.19:               Setting CSS properties    =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_241525" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).css(</CODE><CODE =
class=3D"string">'fontSize'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"string">'100px'</CODE><CODE class=3D"plain">);=20
      </CODE><CODE class=3D"comments">// setting an individual=20
  property</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE class=3D"plain">).css({ =
</CODE><CODE class=3D"string">'fontSize'</CODE>=20
      <CODE class=3D"plain">: </CODE><CODE =
class=3D"string">'100px'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">'color'</CODE> =
<CODE class=3D"plain">:=20
      </CODE><CODE class=3D"string">'red'</CODE> <CODE =
class=3D"plain">});=20
      </CODE><CODE class=3D"comments">// setting multiple=20
  =
properties</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>=

<P class=3D"remark"><I><SPAN class=3D"remark">Note the style of the =
argument we use=20
on            the second line =E2=80=94 it is an object that contains =
multiple=20
properties. This is a common way to pass multiple arguments to a =
function, and=20
many jQuery setter methods accept objects to set mulitple values at=20
once.</SPAN></I></P>
<DIV class=3D"section" title=3D"Using CSS Classes for Styling">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Using CSS Classes for Styling        =
     =20
</H3></DIV>
<P>              As a getter, the <CODE class=3D"code">$.fn.css</CODE> =
method is=20
valuable; however, it should generally be avoided as a setter in=20
production-ready code, because you don't want presentational information =
in your=20
JavaScript. Instead, write CSS rules for classes that describe the =
various=20
visual states, and then simply change the class on the element you want =
to=20
affect.            </P>
<DIV id=3D"example-3.20" class=3D"example">
<P class=3D"title">Example 3.20:                 Working with classes    =
         =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_938329" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$h1 =3D $(</CODE><CODE =
class=3D"string">'h1'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$h1.addClass(</CODE><CODE =
class=3D"string">'big'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$h1.removeClass(</CODE><CODE=20
      class=3D"string">'big'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$h1.toggleClass(</CODE><CODE=20
      class=3D"string">'big'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($h1.hasClass(</CODE><CODE =
class=3D"string">'big'</CODE><CODE=20
      class=3D"plain">)) { ...=20
}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>              Classes can also be useful for storing state =
information about=20
an element, such as indicating that an element is selected.           =20
</P></DIV>
<DIV class=3D"section" title=3D"Dimensions">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Dimensions              </H3></DIV>
<P>              jQuery offers a variety of methods for obtaining and =
modifying=20
dimension and position information about an element.            </P>
<P>              The code in =E2=80=9CBasic dimensions methods=E2=80=9D, =
is just a very brief=20
overview of the dimensions functionality in jQuery; for complete details =
about=20
jQuery dimension methods, visit <A class=3D"ulink" =
href=3D"http://api.jquery.com/category/dimensions/">http://api.jquery.com=
/category/dimensions/</A>.=20
           </P>
<DIV id=3D"example-3.21" class=3D"example">
<P class=3D"title">Example 3.21:                 Basic dimensions =
methods         =20
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_35256" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).width(</CODE><CODE class=3D"string">'50px'</CODE><CODE =

      class=3D"plain">);&nbsp;&nbsp; </CODE><CODE class=3D"comments">// =
sets the=20
      width of all H1 elements</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
      =
class=3D"plain">).width();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;=20
      </CODE><CODE class=3D"comments">// gets the width of the first=20
  H1</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).height(</CODE><CODE =
class=3D"string">'50px'</CODE><CODE=20
      class=3D"plain">);&nbsp; </CODE><CODE class=3D"comments">// sets =
the height of=20
      all H1 elements</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
      =
class=3D"plain">).height();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      </CODE><CODE class=3D"comments">// gets the height of the first=20
  H1</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
      class=3D"plain">).position();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// returns an object containing=20
  position</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// information for the first H1 relative=20
  to</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// its "offset (positioned)=20
parent"</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></D=
IV>
<DIV class=3D"section" title=3D"Attributes">
<H2 class=3D"title">              Attributes            </H2>
<P>              An element's attributes can contain useful information =
for your=20
application, so it's important to be able to get and set them.           =
 </P>
<P>              The <CODE class=3D"code">$.fn.attr</CODE> method acts =
as both a=20
getter and a setter. As with the <CODE class=3D"code">$.fn.css</CODE> =
method,=20
<CODE class=3D"code">$.fn.attr</CODE> as a setter can accept either a =
key and a=20
value, or an object containing one or more key/value pairs.            =
</P>
<DIV id=3D"example-3.22" class=3D"example">
<P class=3D"title">Example 3.22:                 Setting attributes      =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_605341" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a'</CODE><CODE =
class=3D"plain">).attr(</CODE><CODE class=3D"string">'href'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE=20
      class=3D"string">'allMyHrefsAreTheSameNow.html'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a'</CODE><CODE=20
class=3D"plain">).attr({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'title'</CODE> <CODE class=3D"plain">: =
</CODE><CODE class=3D"string">'all=20
      titles are the same too!'</CODE><CODE=20
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'href'</CODE> <CODE class=3D"plain">: =
</CODE><CODE =
class=3D"string">'somethingNew.html'</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">This time, we broke the =
object up into=20
multiple lines. Remember, whitespace doesn't matter in JavaScript, so =
you should=20
feel free to use it liberally to make your code more legible! You can =
use a=20
minification tool later to strip out unnecessary whitespace for=20
production.</SPAN></I></P>
<DIV id=3D"example-3.23" class=3D"example">
<P class=3D"title">Example 3.23:                 Getting attributes      =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_517192" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a'</CODE><CODE =
class=3D"plain">).attr(</CODE><CODE class=3D"string">'href'</CODE><CODE=20
      class=3D"plain">);&nbsp; </CODE><CODE class=3D"comments">// =
returns the href=20
      for the first a element in the=20
document</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></=
DIV>
<H2 class=3D"title">            Traversing          </H2>
<P>            Once you have a jQuery selection, you can find other =
elements=20
using your selection as a starting point.          </P>
<P>            For complete documentation of jQuery traversal methods, =
visit <A=20
class=3D"ulink"=20
href=3D"http://api.jquery.com/category/traversing/">http://api.jquery.com=
/category/traversing/</A>.=20
         </P>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            Be cautious with traversing long distances in your =
documents     =20
      =E2=80=94 complex traversal makes it imperative that your =
document's structure=20
remain the same, something that's difficult to guarantee even if you're =
the one=20
creating the whole application from server to client. One- or two-step =
traversal=20
is fine, but you generally want to avoid traversals that take you from =
one=20
container to another.          </P></DIV>
<DIV id=3D"example-3.24" class=3D"example">
<P class=3D"title">Example 3.24:               Moving around the DOM =
using=20
traversal methods            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_20510" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).next(</CODE><CODE class=3D"string">'p'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div:visible'</CODE><CODE=20
    class=3D"plain">).parent();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'input[name=3Dfirst_name]'</CODE><CODE=20
      class=3D"plain">).closest(</CODE><CODE =
class=3D"string">'form'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myList'</CODE><CODE=20
  class=3D"plain">).children();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'li.selected'</CODE><CODE=20
    =
class=3D"plain">).siblings();</CODE></TD></TR></TBODY></TABLE></DIV></DIV=
></DIV></DIV></DIV>
<P>            You can also iterate over a selection using <CODE=20
class=3D"code">$.fn.each</CODE>. This method iterates over all of the =
elements in=20
a selection, and runs a function for each one. The function receives the =
index=20
of the current element and the DOM element itself as arguments. Inside =
the=20
function, the DOM element is also available as <CODE =
class=3D"code">this</CODE> by=20
default.          </P>
<DIV id=3D"example-3.25" class=3D"example">
<P class=3D"title">Example 3.25:               Iterating over a =
selection         =20
  </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_445071" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myList li'</CODE><CODE =
class=3D"plain">).each(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(idx, el)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"string">'Element '</CODE> <CODE class=3D"plain">+ idx=20
  +</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"string">'has the following html: '</CODE> <CODE=20
      class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">$(el).html()</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"section" title=3D"Manipulating Elements">
<H2 class=3D"title">              Manipulating Elements            </H2>
<P>              Once you've made a selection, the fun begins. You can =
change,=20
move, remove, and clone elements. You can also create new elements via a =
simple=20
syntax.            </P>
<P>              For complete documentation of jQuery manipulation =
methods,=20
visit <A class=3D"ulink"=20
href=3D"http://api.jquery.com/category/manipulation/">http://api.jquery.c=
om/category/manipulation/</A>.=20
           </P>
<DIV class=3D"titlepage">
<H3 class=3D"title">                Getting and Setting Information =
about Elements=20
             </H3></DIV>
<P>              There are any number of ways you can change an existing =

element. Among the most common tasks you'll perform is changing the =
inner HTML=20
or attribute of an element. jQuery offers simple, cross-browser methods =
for=20
these sorts of manipulations. You can also get information about =
elements using=20
many of the same methods in their getter incarnations. We'll see =
examples of=20
these throughout this section, but specifically, here are a few methods =
you can=20
use to get and set information about elements.            </P>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              Changing things about elements is trivial, but remember =
that=20
the change will affect <SPAN class=3D"emphasis"><EM>all</EM></SPAN> =
elements in=20
the selection, so if you just want to change one element, be sure to =
specify=20
that in your selection before calling a setter method.            =
</P></DIV>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              When methods act as getters, they generally only work =
on the=20
first element in the selection, and they do not return a jQuery object, =
so you=20
can't chain additional methods to them. One notable exception is <CODE =
class=3D"code">$.fn.text</CODE>;=20
as mentioned below, it gets the text for all elements in the selection.  =
       =20
  </P></DIV>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">$.fn.html</SPAN></DT>
  <DD>
  <P>                    Get or set the html contents.                 =20
</P></DD>
  <DT><SPAN class=3D"term">$.fn.text</SPAN></DT>
  <DD>
  <P>                    Get or set the text contents; HTML will be =
stripped.   =20
                </P></DD>
  <DT><SPAN class=3D"term">$.fn.attr</SPAN></DT>
  <DD>
  <P>                    Get or set the value of the provided attribute. =
       =20
           </P></DD>
  <DT><SPAN class=3D"term">$.fn.width</SPAN></DT>
  <DD>
  <P>                    Get or set the width in pixels of the first =
element in=20
  the selection as an integer.                  </P></DD>
  <DT><SPAN class=3D"term">$.fn.height</SPAN></DT>
  <DD>
  <P>                    Get or set the height in pixels of the first =
element in=20
  the selection as an integer.                  </P></DD>
  <DT><SPAN class=3D"term">$.fn.position</SPAN></DT>
  <DD>
  <P>                    Get an object with position information for the =
first=20
  element in the selection, relative to its first positioned ancestor. =
<SPAN=20
  class=3D"emphasis"><EM>This is a getter only.</EM></SPAN></P></DD>
  <DT><SPAN class=3D"term">$.fn.val</SPAN></DT>
  <DD>
  <P>                    Get or set the value of form elements.          =
       =20
  </P></DD></DL></DIV>
<DIV id=3D"example-3.26" class=3D"example">
<P class=3D"title">Example 3.26:                 Changing the HTML of an =
element  =20
           </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_743746" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv p:first'</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.html(</CODE><CODE class=3D"string">'New=20
      &lt;strong&gt;first&lt;/strong&gt; paragraph!'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"section" title=3D"Moving, Copying, and Removing Elements">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Moving, Copying, and Removing =
Elements      =20
         </H3></DIV>
<P>                There are a variety of ways to move elements around =
the DOM;=20
generally, there are two approaches:              </P>
<UL>
  <LI>
  <P>                    Place the selected element(s) relative to =
another=20
  element                  </P></LI>
  <LI>
  <P>                    Place an element relative to the selected =
element(s)   =20
                </P></LI></UL>
<P>                For example, jQuery provides <CODE=20
class=3D"code">$.fn.insertAfter</CODE> and <CODE =
class=3D"code">$.fn.after</CODE>.=20
The <CODE class=3D"code">$.fn.insertAfter</CODE> method places the =
selected=20
element(s) after the element that you provide as an argument; the <CODE =
class=3D"code">$.fn.after</CODE>=20
method places the element provided as an argument after the selected =
element.=20
Several other methods follow this pattern: <CODE=20
class=3D"code">$.fn.insertBefore</CODE> and <CODE =
class=3D"code">$.fn.before</CODE>;=20
<CODE class=3D"code">$.fn.appendTo</CODE> and <CODE=20
class=3D"code">$.fn.append</CODE>; and <CODE =
class=3D"code">$.fn.prependTo</CODE>=20
and <CODE class=3D"code">$.fn.prepend</CODE>.              </P>
<P>                The method that makes the most sense for you will =
depend on  =20
             what elements you already have selected, and whether you =
will      =20
         need to store a reference to the elements you're adding to the  =
       =20
      page. If you need to store a reference, you will always want to    =
       =20
    take the first approach =E2=80=94 placing the selected elements      =
         =20
relative to another element =E2=80=94 as it returns the element(s) =
you're placing. In=20
this case, <CODE class=3D"code">$.fn.insertAfter</CODE>, <CODE=20
class=3D"code">$.fn.insertBefore</CODE>, <CODE =
class=3D"code">$.fn.appendTo</CODE>,=20
and <CODE class=3D"code">$.fn.prependTo</CODE> will be your tools of =
choice.      =20
       </P>
<DIV id=3D"example-3.27" class=3D"example">
<P class=3D"title">Example 3.27:                   Moving elements using =
different=20
approaches                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_719165" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// make the first =
list item the=20
      last list item</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$li =3D $(</CODE><CODE class=3D"string">'#myList=20
      li:first'</CODE><CODE class=3D"plain">).appendTo(</CODE><CODE=20
      class=3D"string">'#myList'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// another approach =
to the same=20
      problem</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myList'</CODE><CODE =
class=3D"plain">).append($(</CODE><CODE=20
      class=3D"string">'#myList li:first'</CODE><CODE=20
  class=3D"plain">));</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// note that there's =
no way to=20
      access the</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// list item that we =
moved, as=20
      this returns</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// the list=20
  itself</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"titlepage">
<H4 class=3D"title">                  Cloning Elements                =
</H4></DIV>
<P>                When you use methods such as $.fn.appendTo, you are =
moving=20
the element; sometimes you want to make a copy of the element instead. =
In this=20
case, you'll need to use $.fn.clone first.              </P>
<DIV id=3D"example-3.28" class=3D"example">
<P class=3D"title">Example 3.28:                   Making a copy of an =
element    =20
           </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_119052" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// copy the first =
list item to=20
      the end of the list</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myList li:first'</CODE><CODE=20
      class=3D"plain">).clone().appendTo(</CODE><CODE=20
      class=3D"string">'#myList'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"note">
<H3 class=3D"title">                Note              </H3>
<P>                If you need to copy related data and events, be sure =
to pass=20
<CODE class=3D"code">true</CODE> as an argument to <CODE=20
class=3D"code">$.fn.clone</CODE>.              </P></DIV>
<DIV class=3D"titlepage">
<H4 class=3D"title">                  Removing Elements                =
</H4></DIV>
<P>                There are two ways to remove elements from the page: =
<CODE=20
class=3D"code">$.fn.remove</CODE> and <CODE =
class=3D"code">$.fn.detach</CODE>.=20
You'll use <CODE class=3D"code">$.fn.remove</CODE> when you want to =
permanently=20
remove the selection from the page; while the method does return the =
removed=20
element(s), those elements will not have their associated data and =
events=20
attached to them if you return them to the page.              </P>
<P>                If you need the data and events to persist, you'll =
want to=20
use <CODE class=3D"code">$.fn.detach</CODE> instead. Like <CODE=20
class=3D"code">$.fn.remove</CODE>, it returns the selection, but it also =
maintains=20
the data and events associated with the selection, so you can restore =
the=20
selection to the page at a later time.              </P>
<DIV class=3D"note">
<H3 class=3D"title">                Note              </H3>
<P>                The <CODE class=3D"code">$.fn.detach</CODE> method is =
extremely=20
valuable if you are doing heavy manipulation to an element. In that =
case, it's=20
beneficial to <CODE class=3D"code">$.fn.detach</CODE> the element from =
the page,=20
work on it in your code, and then restore it to the page when you're =
done. This=20
saves you from expensive "DOM touches" while maintaining the element's =
data and=20
events.              </P></DIV>
<P>                If you want to leave the element on the page but =
simply want=20
to remove its contents, you can use <CODE =
class=3D"code">$.fn.empty</CODE> to=20
dispose of the element's inner HTML.              </P></DIV>
<DIV class=3D"titlepage">
<H3 class=3D"title">                Creating New Elements              =
</H3></DIV>
<P>              jQuery offers a trivial and elegant way to create new =
elements=20
using the same <CODE class=3D"code">$()</CODE> method you use to make =
selections. =20
          </P>
<DIV id=3D"example-3.29" class=3D"example">
<P class=3D"title">Example 3.29:                 Creating new elements   =
         =20
 </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_530850" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'&lt;p&gt;This is a new =
paragraph&lt;/p&gt;'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'&lt;li class=3D"new"&gt;new list=20
      item&lt;/li&gt;'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-3.30" class=3D"example">
<P class=3D"title">Example 3.30:                 Creating a new element =
with an=20
attribute object              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_617653" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'&lt;a/&gt;'</CODE><CODE class=3D"plain">,=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">html :=20
      </CODE><CODE class=3D"string">'This is a =
&lt;strong&gt;new&lt;/strong&gt;=20
      link'</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'class'</CODE> <CODE class=3D"plain">: =
</CODE><CODE class=3D"string">'new'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">href :=20
      </CODE><CODE =
class=3D"string">'foo.html'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">Note that in the =
attributes object we=20
included as the second argument, the property name class is quoted, =
while the=20
property names text and href are not. Property names generally do not =
need to be=20
quoted unless they are reserved words (as class is in this =
case).</SPAN></I></P>
<P>              When you create a new element, it is not immediately =
added to=20
the page. There are several ways to add an element to the page once it's =
been=20
created.            </P>
<DIV id=3D"example-3.31" class=3D"example">
<P class=3D"title">Example 3.31:                 Getting a new element =
on to the=20
page              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_27198" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$myNewElement =3D $(</CODE><CODE =
class=3D"string">'&lt;p&gt;New=20
      element&lt;/p&gt;'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">$myNewElement.appendTo(</CODE><CODE=20
      class=3D"string">'#content'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">$myNewElement.insertAfter(</CODE><CODE=20
      class=3D"string">'ul:last'</CODE><CODE class=3D"plain">); =
</CODE><CODE class=3D"comments">//=20
      this will remove the p from =
#content!</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'ul'</CODE><CODE=20
      class=3D"plain">).last().after($myNewElement.clone());&nbsp; =
</CODE><CODE=20
      class=3D"comments">// clone the p so now we have=20
2</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">Strictly speaking, you =
don't have to  =20
           store the created element in a variable =E2=80=94 you could =
just call the=20
method to add the element to the page directly after the $(). However, =
most of=20
the time you will want a reference to the element you added, so you =
don't need=20
to select it later.</SPAN></I></P>
<P>              You can even create an element as you're adding it to =
the page,=20
but note that in this case you don't get a reference to the newly =
created=20
element.            </P>
<DIV id=3D"example-3.32" class=3D"example">
<P class=3D"title">Example 3.32:                 Creating and adding an =
element to=20
the page at the same time              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_578502" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'ul'</CODE><CODE =
class=3D"plain">).append(</CODE><CODE class=3D"string">'&lt;li&gt;list=20
      item&lt;/li&gt;'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              The syntax for adding new elements to the page is so =
easy, it's=20
tempting to forget that there's a huge performance cost for adding to =
the DOM=20
repeatedly. If you are adding many elements to the same container, =
you'll want=20
to concatenate all the html into a single string, and then append that =
string to=20
the container instead of appending the elements one at a time. You can =
use an=20
array to gather all the pieces together, then <CODE =
class=3D"code">join</CODE>=20
them into a single string for appending.            </P>
<DIV id=3D"highlighter_256914" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myItems =3D [], $myList =3D $(</CODE><CODE=20
      class=3D"string">'#myList'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i=3D0; i&lt;100; i++) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">myItems.push(</CODE><CODE =
class=3D"string">'&lt;li&gt;item=20
      '</CODE> <CODE class=3D"plain">+ i + </CODE><CODE=20
      class=3D"string">'&lt;/li&gt;'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">$myList.append(myItems.join(</CODE><CODE=20
      class=3D"string">''</CODE><CODE=20
class=3D"plain">));</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV>
<DIV class=3D"section" title=3D"Manipulating Attributes">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Manipulating Attributes            =
   =20
</H3></DIV>
<P>                jQuery's attribute manipulation capabilities are =
extensive.=20
Basic changes are simple, but the $.fn.attr method also allows for more =
complex=20
manipulations. It can either set an explicit value, or set a value using =
the=20
return value of a function. When the function syntax is used, the =
function=20
receives two arguments: the zero-based index of the element whose =
attribute is=20
being changed, and the current value of the attribute being changed.     =
       =20
 </P>
<DIV id=3D"example-3.33" class=3D"example">
<P class=3D"title">Example 3.33:                   Manipulating a single =
attribute=20
               </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_114616" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv a:first'</CODE><CODE=20
      class=3D"plain">).attr(</CODE><CODE =
class=3D"string">'href'</CODE><CODE class=3D"plain">,=20
      </CODE><CODE class=3D"string">'newDestination.html'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-3.34" class=3D"example">
<P class=3D"title">Example 3.34:                   Manipulating multiple =

attributes                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_116362" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv a:first'</CODE><CODE=20
    class=3D"plain">).attr({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">href :=20
      </CODE><CODE class=3D"string">'newDestination.html'</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">rel :=20
      </CODE><CODE=20
class=3D"string">'super-special'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV id=3D"example-3.35" class=3D"example">
<P class=3D"title">Example 3.35:                   Using a function to =
determine=20
an attribute's new value                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_343733" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv a:first'</CODE><CODE=20
    class=3D"plain">).attr({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">rel :=20
      </CODE><CODE class=3D"string">'super-special'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">href :=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(idx,=20
      href) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"string">'/new/'</CODE> <CODE=20
      class=3D"plain">+ href;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv a:first'</CODE><CODE=20
      class=3D"plain">).attr(</CODE><CODE =
class=3D"string">'href'</CODE><CODE class=3D"plain">,=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(idx,=20
      href) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"string">'/new/'</CODE> <CODE=20
      class=3D"plain">+ href;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">              Exercises            </H2>
<DIV class=3D"section" title=3D"Selecting">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Selecting                =
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/sandbox.js</CODE> or work in =
Firebug to=20
accomplish the following:              </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Select all of the div elements that have a =
class of=20
  "module".                    </P></LI>
  <LI>
  <P>                      Come up with three selectors that you could =
use to=20
  get the third item in the #myList unordered list. Which is the best to =
use?=20
  Why?                    </P></LI>
  <LI>
  <P>                      Select the label for the search input using =
an=20
  attribute selector.                    </P></LI>
  <LI>
  <P>                      Figure out how many elements on the page are =
hidden=20
  (hint: .length).                    </P></LI>
  <LI>
  <P>                      Figure out how many image elements on the =
page have=20
  an alt attribute.                    </P></LI>
  <LI>
  <P>                      Select all of the odd table rows in the table =
body.  =20
                   </P></LI></OL></DIV></DIV>
<DIV class=3D"section" title=3D"Traversing">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Traversing                =
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/sandbox.js</CODE> or work in =
Firebug to=20
accomplish the following:              </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Select all of the image elements on the page; =
log=20
  each image's alt attribute.                    </P></LI>
  <LI>
  <P>                      Select the search input text box, then =
traverse up to=20
  the form and add a class to the form.                    </P></LI>
  <LI>
  <P>                      Select the list item inside #myList that has =
a class=20
  of "current" and remove that class from it; add a class of "current" =
to the=20
  next list item.                    </P></LI>
  <LI>
  <P>                      Select the select element inside #specials; =
traverse=20
  your way to the submit button.                    </P></LI>
  <LI>
  <P>                      Select the first list item in the #slideshow =
element;=20
  add the class "current" to it, and then add a class of "disabled" to =
its=20
  sibling elements.                    </P></LI></OL></DIV></DIV>
<DIV class=3D"section" title=3D"Manipulating">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Manipulating                =
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/sandbox.js</CODE> or work in =
Firebug to=20
accomplish the following:              </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Add five new list items to the end of the =
unordered=20
  list #myList. Hint:                    </P>
  <DIV id=3D"highlighter_31184" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
        class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE =
class=3D"plain">i=20
        =3D 0; i&lt;5; i++) { ...=20
  }</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></LI>
  <LI>
  <P>                      Remove the odd list items                   =20
</P></LI>
  <LI>
  <P>                      Add another h2 and another paragraph to the =
last=20
  div.module                    </P></LI>
  <LI>
  <P>                      Add another option to the select element; =
give the=20
  option the value "Wednesday"                    </P></LI>
  <LI>
  <P>                      Add a new div.module to the page after the =
last one;=20
  put a copy of one of the existing images inside of it.                 =
  =20
  </P></LI></OL></DIV></DIV></DIV></DIV>
<DIV id=3D"chapter-4" class=3D"chapter" title=3D"jQuery Core">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  jQuery Core               =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"$ vs $()">
<H2 class=3D"title"><CODE class=3D"code">$</CODE> vs <CODE=20
class=3D"code">$()</CODE></H2>
<P>              Until now, we=E2=80=99ve been dealing entirely with =
methods that are=20
called on a jQuery object. For example:            </P>
<DIV id=3D"highlighter_654634" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
  =
class=3D"plain">).remove();</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV>
<P>              Most jQuery methods are called on jQuery objects as =
shown=20
above; these methods are said to be part of the <CODE =
class=3D"code">$.fn</CODE>=20
namespace, or the =E2=80=9CjQuery prototype,=E2=80=9D and are best =
thought of as jQuery object=20
methods.            </P>
<P>              However, there are several methods that do not act on a =

selection; these methods are said to be part of the jQuery namespace, =
and are=20
best thought of as core jQuery methods.            </P>
<P>              This distinction can be incredibly confusing to new =
jQuery=20
users. Here=E2=80=99s what you need to remember:            </P>
<UL>
  <LI>Methods called on jQuery selections are in the <CODE=20
  class=3D"code">$.fn</CODE> namespace, and automatically receive and =
return the=20
  selection as this.              </LI>
  <LI>Methods in the <CODE class=3D"code">$</CODE> namespace are =
generally=20
  utility-type methods, and do not work with selections; they are not=20
  automatically passed any arguments, and their return value will vary.  =
       =20
      </LI></UL>
<P>              There are a few cases where object methods and core =
methods=20
have the same names, such as <CODE class=3D"code">$.each</CODE> and =
<CODE class=3D"code">$.fn.each</CODE>.=20
In these cases, be extremely careful when reading the documentation that =
you are=20
exploring the correct method.            </P></DIV>
<DIV class=3D"section" title=3D"Utility Methods">
<H2 class=3D"title">              Utility Methods            </H2>
<P>              jQuery offers several utility methods in the <CODE=20
class=3D"code">$</CODE> namespace. These methods are helpful for =
accomplishing=20
routine programming tasks. Below are examples of a few of the utility =
methods;=20
for a complete reference on jQuery utility methods, visit <A =
class=3D"ulink" =
href=3D"http://api.jquery.com/category/utilities/">http://api.jquery.com/=
category/utilities/</A>.=20
           </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">$.trim</SPAN></DT>
  <DD>
  <P>                    Removes leading and trailing whitespace.        =
       =20
    </P>
  <DIV id=3D"highlighter_128998" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">$.trim(</CODE><CODE =
class=3D"string">'&nbsp;&nbsp;&nbsp;=20
        lots of extra whitespace&nbsp;&nbsp;&nbsp; '</CODE><CODE=20
        class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content"><CODE class=3D"comments">// returns 'lots of =
extra=20
        =
whitespace'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DD>
  <DT><SPAN class=3D"term">$.each</SPAN></DT>
  <DD>
  <P>                    Iterates over arrays and objects.               =
   </P>
  <DIV id=3D"highlighter_289053" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">$.each([ </CODE><CODE =
class=3D"string">'foo'</CODE><CODE=20
        class=3D"plain">, </CODE><CODE =
class=3D"string">'bar'</CODE><CODE class=3D"plain">,=20
        </CODE><CODE class=3D"string">'baz'</CODE> <CODE =
class=3D"plain">],=20
        </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(idx,=20
        val) {</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
        class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'element '</CODE>=20
        <CODE class=3D"plain">+ idx + </CODE><CODE class=3D"string">'is =
'</CODE>=20
        <CODE class=3D"plain">+ =
val);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>3</CODE></TD>
      <TD class=3D"content"><CODE=20
  class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>4</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>5</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">$.each({ foo : =
</CODE><CODE=20
        class=3D"string">'bar'</CODE><CODE class=3D"plain">, baz : =
</CODE><CODE=20
        class=3D"string">'bim'</CODE> <CODE class=3D"plain">}, =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
        class=3D"plain">(k, v) {</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>6</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
        class=3D"plain">console.log(k + </CODE><CODE class=3D"string">' =
: '</CODE>=20
        <CODE class=3D"plain">+ =
v);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>7</CODE></TD>
      <TD class=3D"content"><CODE=20
  class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
  <DIV class=3D"note">
  <H3 class=3D"title">                    Note                  </H3>
  <P>                    There is also a method <CODE=20
  class=3D"code">$.fn.each</CODE>, which is used for iterating over a =
selection of=20
  elements.                  </P></DIV></DD>
  <DT><SPAN class=3D"term">$.inArray</SPAN></DT>
  <DD>
  <P>                    Returns a value's index in an array, or -1 if =
the value=20
  is not in the array.                  </P>
  <DIV id=3D"highlighter_860238" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">myArray =3D [ 1, 2, 3, 5 =
];</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>3</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
        class=3D"plain">($.inArray(4, myArray) !=3D=3D -1)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>4</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
        class=3D"plain">console.log(</CODE><CODE class=3D"string">'found =

        it!'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>5</CODE></TD>
      <TD class=3D"content"><CODE=20
  =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DD>=

  <DT><SPAN class=3D"term">$.extend</SPAN></DT>
  <DD>
  <P>                    Changes the properties of the first object =
using the=20
  properties of subsequent objects.                  </P>
  <DIV id=3D"highlighter_987146" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">firstObject =3D { foo : </CODE><CODE=20
        class=3D"string">'bar'</CODE><CODE class=3D"plain">, a : =
</CODE><CODE class=3D"string">'b'</CODE>=20
        <CODE class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">secondObject =3D { foo : </CODE><CODE=20
        class=3D"string">'baz'</CODE> <CODE=20
  class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>3</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>4</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">newObject =3D $.extend(firstObject,=20
    secondObject);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>5</CODE></TD>
      <TD class=3D"content"><CODE =
class=3D"plain">console.log(firstObject.foo);=20
        </CODE><CODE class=3D"comments">// =
'baz'</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>6</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"plain">console.log(newObject.foo);&nbsp;&nbsp; =
</CODE><CODE=20
        class=3D"comments">// =
'baz'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
  <P>                    If you don't want to change any of the objects =
you pass=20
  to <CODE class=3D"code">$.extend</CODE>, pass an empty object as the =
first=20
  argument.                  </P>
  <DIV id=3D"highlighter_947126" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">firstObject =3D { foo : </CODE><CODE=20
        class=3D"string">'bar'</CODE><CODE class=3D"plain">, a : =
</CODE><CODE class=3D"string">'b'</CODE>=20
        <CODE class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">secondObject =3D { foo : </CODE><CODE=20
        class=3D"string">'baz'</CODE> <CODE=20
  class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>3</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>4</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">newObject =3D $.extend({}, firstObject,=20
      secondObject);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>5</CODE></TD>
      <TD class=3D"content"><CODE =
class=3D"plain">console.log(firstObject.foo);=20
        </CODE><CODE class=3D"comments">// =
'bar'</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>6</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"plain">console.log(newObject.foo);&nbsp;&nbsp; =
</CODE><CODE=20
        class=3D"comments">//=20
  'baz'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DD>
  <DT><SPAN class=3D"term">$.proxy</SPAN></DT>
  <DD>
  <P>                    Returns a function that will always run in the =
provided=20
  scope =E2=80=94 that is, sets the meaning of <CODE =
class=3D"code">this</CODE> inside the=20
  passed function to the second argument.                  </P>
  <DIV id=3D"highlighter_378721" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">myFunction =3D </CODE><CODE=20
        class=3D"keyword">function</CODE><CODE class=3D"plain">() {=20
        console.log(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
        class=3D"plain">); };</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">myObject =3D { foo : </CODE><CODE=20
        class=3D"string">'bar'</CODE> <CODE=20
  class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>3</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>4</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">myFunction(); =
</CODE><CODE=20
        class=3D"comments">// logs window =
object</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>5</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>6</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">myProxyFunction =3D $.proxy(myFunction,=20
    myObject);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>7</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">myProxyFunction(); =
</CODE><CODE=20
        class=3D"comments">// logs myObject=20
  object</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
  <P>                    If you have an object with methods, you can =
pass the=20
  object and the name of a method to return a function that will always =
run in=20
  the scope of the object.                  </P>
  <DIV id=3D"highlighter_986100" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
        class=3D"plain">myObject =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>2</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">myFn :=20
        </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
        {</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>3</CODE></TD>
      <TD class=3D"content"><CODE=20
        =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
        class=3D"plain">console.log(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
        class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>4</CODE></TD>
      <TD class=3D"content"><CODE=20
        class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
        class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>5</CODE></TD>
      <TD class=3D"content"><CODE=20
  class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>6</CODE></TD>
      <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>7</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
        class=3D"string">'#foo'</CODE><CODE =
class=3D"plain">).click(myObject.myFn);=20
        </CODE><CODE class=3D"comments">// logs DOM element=20
    #foo</CODE></TD></TR></TBODY></TABLE></DIV>
  <DIV class=3D"line alt2">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>8</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
        class=3D"string">'#foo'</CODE><CODE=20
        class=3D"plain">).click($.proxy(myObject, </CODE><CODE=20
        class=3D"string">'myFn'</CODE><CODE class=3D"plain">)); =
</CODE><CODE class=3D"comments">//=20
        logs=20
myObject</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DD></DL></DI=
V></DIV>
<DIV class=3D"section" title=3D"Checking types">
<H2 class=3D"title">              Checking types            </H2>
<P>              As mentioned in the "JavaScript basics" section, jQuery =
offers=20
a few basic utility methods for determining the type of a specific =
value.       =20
    </P>
<DIV id=3D"example-4.1" class=3D"example">
<P class=3D"title">Example 4.1:                 Checking the type of an =
arbitrary=20
value              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_316557" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myValue =3D [1, 2, =
3];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// Using JavaScript's =
typeof=20
      operator to test for primative =
types</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myValue=20
      =3D=3D </CODE><CODE class=3D"string">'string'</CODE><CODE =
class=3D"plain">;=20
      </CODE><CODE class=3D"comments">// =
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myValue=20
      =3D=3D </CODE><CODE class=3D"string">'number'</CODE><CODE =
class=3D"plain">;=20
      </CODE><CODE class=3D"comments">// =
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myValue=20
      =3D=3D </CODE><CODE class=3D"string">'undefined'</CODE><CODE =
class=3D"plain">;=20
      </CODE><CODE class=3D"comments">// =
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">typeof</CODE> <CODE =
class=3D"plain">myValue=20
      =3D=3D </CODE><CODE class=3D"string">'boolean'</CODE><CODE =
class=3D"plain">;=20
      </CODE><CODE class=3D"comments">// =
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// Using strict =
equality=20
      operator to check for null</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myValue =3D=3D=3D =
</CODE><CODE class=3D"keyword">null</CODE><CODE=20
      class=3D"plain">; </CODE><CODE class=3D"comments">//=20
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// Using jQuery's =
methods to=20
      check for non-primative =
types</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">jQuery.isFunction(myValue);=20
      </CODE><CODE class=3D"comments">// =
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">jQuery.isPlainObject(myValue);=20
      </CODE><CODE class=3D"comments">// =
false</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">jQuery.isArray(myValue); =

      </CODE><CODE class=3D"comments">//=20
true</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV>=

<DIV class=3D"section" title=3D"Data Methods">
<H2 class=3D"title">              Data Methods            </H2>
<P>              As your work with jQuery progresses, you'll find that =
there's=20
often data about an element that you want to store with the element. In =
plain=20
JavaScript, you might do this by adding a property to the DOM element, =
but you'd=20
have to deal with memory leaks in some browsers. jQuery offers a =
straightforward=20
way to store data related to an element, and it manages the memory =
issues for=20
you.            </P>
<DIV id=3D"example-4.2" class=3D"example">
<P class=3D"title">Example 4.2:                 Storing and retrieving =
data=20
related to an element              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_855849" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv'</CODE><CODE =
class=3D"plain">).data(</CODE><CODE=20
      class=3D"string">'keyName'</CODE><CODE class=3D"plain">, { foo : =
</CODE><CODE=20
      class=3D"string">'bar'</CODE> <CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myDiv'</CODE><CODE =
class=3D"plain">).data(</CODE><CODE=20
      class=3D"string">'keyName'</CODE><CODE class=3D"plain">); =
</CODE><CODE class=3D"comments">//=20
      { foo : 'bar' =
}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>              You can store any kind of data on an element, and it's =
hard to=20
overstate the importance of this when you get into complex application=20
development. For the purposes of this class, we'll mostly use <CODE=20
class=3D"code">$.fn.data</CODE> to store references to other elements.   =
        =20
</P>
<P>              For example, we may want to establish a relationship =
between a=20
list item and a div that's inside of it. We could establish this =
relationship=20
every single time we interact with the list item, but a better solution =
would be=20
to establish the relationship once, and then store a pointer to the div =
on the=20
list item using <CODE class=3D"code">$.fn.data</CODE>:            </P>
<DIV id=3D"example-4.3" class=3D"example">
<P class=3D"title">Example 4.3:                 Storing a relationship =
between=20
elements using $.fn.data              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_541233" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myList li'</CODE><CODE =
class=3D"plain">).each(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$li =3D =
$(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">), $div =3D $li.find(</CODE><CODE=20
      class=3D"string">'div.content'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$li.data(</CODE><CODE=20
      class=3D"string">'contentDiv'</CODE><CODE class=3D"plain">,=20
  $div);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// later, we don't =
have to find=20
      the div again;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// we can just read =
it from the=20
      list item's data</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$firstLi =3D $(</CODE><CODE =
class=3D"string">'#myList=20
      li:first'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$firstLi.data(</CODE><CODE =
class=3D"string">'contentDiv'</CODE><CODE=20
      class=3D"plain">).html(</CODE><CODE class=3D"string">'new =
content'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              In addition to passing <CODE =
class=3D"code">$.fn.data</CODE> a=20
single key-value pair to store data, you can also pass an object =
containing one=20
or more pairs.            </P></DIV>
<DIV class=3D"section" title=3D"Feature &amp; Browser Detection">
<H2 class=3D"title">              Feature &amp; Browser Detection        =
    </H2>
<P>              Although jQuery eliminates most JavaScript browser =
quirks,=20
there are still occasions when your code needs to know about the browser =

environment.            </P>
<P>              jQuery offers the <CODE class=3D"code">$.support</CODE> =
object,=20
as well as the deprecated <CODE class=3D"code">$.browser</CODE> object, =
for this=20
purpose. For complete documentation on these objects, visit <A =
class=3D"ulink"=20
href=3D"http://api.jquery.com/jQuery.support/">http://api.jquery.com/jQue=
ry.support/</A>=20
and <A class=3D"ulink"=20
href=3D"http://api.jquery.com/jQuery.browser/">http://api.jquery.com/jQue=
ry.browser/</A>.=20
           </P>
<P>              The <CODE class=3D"code">$.support</CODE> object is =
dedicated to=20
determining what features a browser supports; it is recommended as a =
more=20
=E2=80=9Cfuture-proof=E2=80=9D method of customizing your JavaScript for =
different browser=20
environments.            </P>
<P>              The <CODE class=3D"code">$.browser</CODE> object was =
deprecated=20
in favor of the <CODE class=3D"code">$.support</CODE> object, but it =
will not be=20
removed from jQuery anytime soon. It provides direct detection of the =
browser=20
brand and version.            </P></DIV>
<DIV class=3D"section" title=3D"Avoiding Conflicts with Other =
Libraries">
<H2 class=3D"title">              Avoiding Conflicts with Other =
Libraries         =20
  </H2>
<P>              If you are using another JavaScript library that uses =
the <CODE=20
class=3D"code">$</CODE> variable, you can run into conflicts with =
jQuery. In order=20
to avoid these conflicts, you need to put jQuery in no-conflict mode =
immediately=20
after it is loaded onto the page and before you attempt to use jQuery in =
your=20
page.            </P>
<P>              When you put jQuery into no-conflict mode, you have the =
option=20
of assigning a variable name to replace <CODE class=3D"code">$</CODE>.   =
        =20
</P>
<DIV id=3D"example-4.4" class=3D"example">
<P class=3D"title">Example 4.4:                 Putting jQuery into =
no-conflict=20
mode              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_186852" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;script =
src=3D</CODE><CODE class=3D"string">"prototype.js"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;script =
src=3D</CODE><CODE class=3D"string">"jquery.js"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">&lt;script&gt;</CODE><CODE class=3D"keyword">var</CODE>=20
      <CODE class=3D"plain">$j =3D=20
  =
jQuery.noConflict();&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
></DIV></DIV></DIV></DIV>
<P>              You can continue to use the standard <CODE=20
class=3D"code">$</CODE> by wrapping your code in a self-executing =
anonymous=20
function; this is a standard pattern for plugin authoring, where the =
author=20
cannot know whether another library will have taken over the <CODE=20
class=3D"code">$</CODE>.            </P>
<DIV id=3D"example-4.5" class=3D"example">
<P class=3D"title">Example 4.5:                 Using the $ inside a=20
self-executing anonymous function              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_736428" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;script =
src=3D</CODE><CODE class=3D"string">"prototype.js"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;script =
src=3D</CODE><CODE class=3D"string">"jquery.js"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;script&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">jQuery.noConflict();</CODE></TD></TR></TBODY></TABLE></DI=
V>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">($)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// your code here, using the=20
$</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})(jQuery);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV></D=
IV></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"chapter-5" class=3D"chapter" title=3D"Events">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  Events               =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Overview">
<H2 class=3D"title">              Overview            </H2>
<P>              jQuery provides simple methods for attaching event =
handlers to=20
selections. When an event occurs, the provided function is executed. =
Inside the=20
function, this refers to the element that was clicked.            </P>
<P>              For details on jQuery events, visit <A class=3D"ulink" =
href=3D"http://api.jquery.com/category/events/">http://api.jquery.com/cat=
egory/events/</A>.=20
           </P>
<P>              The event handling function can receive an event =
object. This=20
object can be used to determine the nature of the event, and to prevent =
the=20
event=E2=80=99s default behavior.            </P>
<P>              For details on the event object, visit <A =
class=3D"ulink" =
href=3D"http://api.jquery.com/category/events/event-object/">http://api.j=
query.com/category/events/event-object/</A>.=20
           </P></DIV>
<DIV class=3D"section" title=3D"Connecting Events to Elements">
<H2 class=3D"title">              Connecting Events to Elements          =
  </H2>
<P>              jQuery offers convenience methods for most common =
events, and  =20
           these are the methods you will see used most often. These =
methods    =20
         =E2=80=94 including <CODE class=3D"code">$.fn.click</CODE>, =
<CODE=20
class=3D"code">$.fn.focus</CODE>, <CODE class=3D"code">$.fn.blur</CODE>, =
<CODE=20
class=3D"code">$.fn.change</CODE>, etc. =E2=80=94 are shorthand for =
jQuery's <CODE class=3D"code">$.fn.bind</CODE>=20
method. The bind method is useful for binding the same handler function =
to=20
multiple events, when you want to provide data to the event hander, when =
you are=20
working with custom events, or when you want to pass an object of =
multiple=20
events and handlers.            </P>
<DIV id=3D"example-5.1" class=3D"example">
<P class=3D"title">Example 5.1:                 Event binding using a =
convenience=20
method              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_804465" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'click'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV id=3D"example-5.2" class=3D"example">
<P class=3D"title">Example 5.2:                 Event biding using the =
$.fn.bind=20
method              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_446068" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).bind(</CODE><CODE class=3D"string">'click'</CODE><CODE =

      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'click'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV id=3D"example-5.3" class=3D"example">
<P class=3D"title">Example 5.3:                 Event binding using the =
$.fn.bind=20
method with data              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_852616" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'input'</CODE><CODE=20
  class=3D"plain">).bind(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"string">'click=20
      change'</CODE><CODE class=3D"plain">,&nbsp; </CODE><CODE =
class=3D"comments">//=20
      bind to multiple events</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">{ foo :=20
      </CODE><CODE class=3D"string">'bar'</CODE> <CODE =
class=3D"plain">},=20
      </CODE><CODE class=3D"comments">// pass in=20
data</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE =
class=3D"plain">(eventObject)=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(eventObject.type,=20
  eventObject.data);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// logs event type, then { foo : 'bar'=20
  }</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"section" title=3D"Connecting Events to Run Only Once">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Connecting Events to Run Only Once =
         =20
     </H3></DIV>
<P>                Sometimes you need a particular handler to run only =
once     =20
          =E2=80=94 after that, you may want no handler to run, or you =
may want a=20
different handler to run. jQuery provides the <CODE =
class=3D"code">$.fn.one</CODE>=20
method for this purpose.              </P>
<DIV id=3D"example-5.4" class=3D"example">
<P class=3D"title">Example 5.4:                   Switching handlers =
using the=20
$.fn.one method                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_588743" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).one(</CODE><CODE class=3D"string">'click'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'You =
just clicked=20
      this for the first time!'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).click(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">() {=20
      console.log(</CODE><CODE class=3D"string">'You have clicked this=20
      before!'</CODE><CODE class=3D"plain">); =
});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>                The <CODE class=3D"code">$.fn.one</CODE> method is =
especially=20
useful if you need to do some complicated setup the first time an =
element is=20
clicked, but not subsequent times.              </P></DIV>
<DIV class=3D"section" title=3D"Disconnecting Events">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Disconnecting Events               =
=20
</H3></DIV>
<P>                To disconnect an event handler, you use the <CODE =
class=3D"code">$.fn.unbind</CODE>=20
method and pass in the event type to unbind. If you attached a named =
function to=20
the event, then you can isolate the unbinding to that named function by =
passing=20
it as the second argument.              </P>
<DIV id=3D"example-5.5" class=3D"example">
<P class=3D"title">Example 5.5:                   Unbinding all click =
handlers on=20
a selection                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_235097" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).unbind(</CODE><CODE =
class=3D"string">'click'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-5.6" class=3D"example">
<P class=3D"title">Example 5.6:                   Unbinding a particular =
click=20
handler                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_454298" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { console.log(</CODE><CODE=20
      class=3D"string">'foo'</CODE><CODE class=3D"plain">);=20
};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { console.log(</CODE><CODE=20
      class=3D"string">'bar'</CODE><CODE class=3D"plain">);=20
};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).bind(</CODE><CODE class=3D"string">'click'</CODE><CODE =

      class=3D"plain">, foo).bind(</CODE><CODE =
class=3D"string">'click'</CODE><CODE=20
      class=3D"plain">, bar);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).unbind(</CODE><CODE =
class=3D"string">'click'</CODE><CODE=20
      class=3D"plain">, bar); </CODE><CODE class=3D"comments">// foo is =
still bound=20
      to the click=20
event</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV=
>
<DIV class=3D"section" title=3D"Namespacing Events">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Namespacing Events               =20
</H3></DIV>
<P>                For complex applications and for plugins you share =
with=20
others, it can be useful to namespace your events so you don't =
unintentionally=20
disconnect events that you didn't or couldn't know about.              =
</P>
<DIV id=3D"example-5.7" class=3D"example">
<P class=3D"title">Example 5.7:                   Namespacing events     =
         =20
 </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_582516" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).bind(</CODE><CODE =
class=3D"string">'click.myNamespace'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
      { </CODE><CODE class=3D"comments">/* ... */</CODE> <CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).unbind(</CODE><CODE =
class=3D"string">'click.myNamespace'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE =
class=3D"plain">).unbind(</CODE><CODE =
class=3D"string">'.myNamespace'</CODE><CODE=20
      class=3D"plain">); </CODE><CODE class=3D"comments">// unbind all =
events in the=20
      =
namespace</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV><=
/DIV></DIV>
<DIV class=3D"section" title=3D"Binding Multiple Events">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Binding Multiple Events              =

</H3></DIV>
<P>              Quite often elements in your application will be bound =
to=20
multiple events, each having a different function for handing the event. =
In=20
these cases you can pass an object into <CODE =
class=3D"code">$.fn.bind</CODE> with=20
one or more key/value pairs, with the key being the event name and the =
value=20
being the function to handle the event.            </P>
<DIV id=3D"example-5.8" class=3D"example">
<P class=3D"title">Example 5.8:                 Binding Multiple Events  =
         =20
  </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_856705" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE=20
class=3D"plain">).bind({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'click'</CODE><CODE class=3D"plain">: =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { console.log(</CODE><CODE=20
      class=3D"string">'clicked!'</CODE><CODE class=3D"plain">);=20
  },</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'mouseover'</CODE><CODE class=3D"plain">: =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { console.log(</CODE><CODE=20
      class=3D"string">'hovered!'</CODE><CODE class=3D"plain">);=20
  }</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            The option to pass an object of multiple events and =
handlers to=20
<CODE class=3D"code">$.fn.bind</CODE> was introduced in jQuery 1.4.4.    =
     =20
</P></DIV></DIV>
<DIV class=3D"section" title=3D"Inside the Event Handling Function">
<H2 class=3D"title">              Inside the Event Handling Function     =
      =20
</H2>
<P>              As mentioned in the overview, the event handling =
function=20
receives an event object, which contains many properties and methods. =
The event=20
object is most commonly used to prevent the default action of the event =
via the=20
preventDefault method. However, the event object contains a number of =
other=20
useful properties and methods, including:            </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">pageX, pageY</SPAN></DT>
  <DD>
  <P>                    The mouse position at the time the event =
occurred,=20
  relative to the top left of the page.                  </P></DD>
  <DT><SPAN class=3D"term">type</SPAN></DT>
  <DD>
  <P>                    The type of the event (e.g. "click").           =
      =20
  </P></DD>
  <DT><SPAN class=3D"term">which</SPAN></DT>
  <DD>
  <P>                    The button or key that was pressed.             =
    =20
  </P></DD>
  <DT><SPAN class=3D"term">data</SPAN></DT>
  <DD>
  <P>                    Any data that was passed in when the event was =
bound.  =20
                 </P></DD>
  <DT><SPAN class=3D"term">target</SPAN></DT>
  <DD>
  <P>                    The DOM element that initiated the event.       =
       =20
     </P></DD>
  <DT><SPAN class=3D"term">preventDefault()</SPAN></DT>
  <DD>
  <P>                    Prevent the default action of the event (e.g. =
following=20
  a link).                  </P></DD>
  <DT><SPAN class=3D"term">stopPropagation()</SPAN></DT>
  <DD>
  <P>                    Stop the event from bubbling up to other =
elements.     =20
              </P></DD></DL></DIV>
<P>              In addition to the event object, the event handling =
function=20
also has access to the DOM element that the handler was bound to via the =
keyword=20
<CODE class=3D"code">this</CODE>. To turn the DOM element into a jQuery =
object=20
that we can use jQuery methods on, we simply do <CODE=20
class=3D"code">$(this)</CODE>, often following this idiom:            =
</P>
<DIV id=3D"highlighter_845080" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE> <CODE =
class=3D"plain">=3D=20
      $(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV class=3D"example">
<P class=3D"title"><B>Preventing a link from being followed</B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_153907" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a'</CODE><CODE =
class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(e) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$</CODE><CODE =
class=3D"keyword">this</CODE>=20
      <CODE class=3D"plain">=3D $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">($</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.attr(</CODE><CODE =
class=3D"string">'href'</CODE><CODE class=3D"plain">).match(</CODE><CODE =

      class=3D"string">'evil'</CODE><CODE class=3D"plain">))=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">e.preventDefault();</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.addClass(</CODE><CODE =
class=3D"string">'evil'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"section" title=3D"Triggering Event Handlers">
<H2 class=3D"title">              Triggering Event Handlers            =
</H2>
<P>              jQuery provides a way to trigger the event handlers =
bound to an=20
element without any user interaction via the <CODE=20
class=3D"code">$.fn.trigger</CODE> method. While this method has its =
uses, it=20
should not be used simply to call a function that was bound as a click =
handler.=20
Instead, you should store the function you want to call in a variable, =
and pass=20
the variable name when you do your binding. Then, you can call the =
function=20
itself whenever you want, without the need for <CODE=20
class=3D"code">$.fn.trigger</CODE>.            </P>
<DIV class=3D"example">
<P class=3D"title"><B>Triggering an event handler the right way</B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_11243" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">foo =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(e) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(e)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">console.log(e);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">}=20
      </CODE><CODE class=3D"keyword">else</CODE> <CODE=20
  class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(</CODE><CODE class=3D"string">'this =
didn\'t come=20
      from an event!'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p'</CODE><CODE=20
  class=3D"plain">).click(foo);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">foo(); </CODE><CODE =
class=3D"comments">//=20
      instead of=20
$('p').trigger('click')</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV=
></DIV></DIV></DIV>
<H2 class=3D"title">            Increasing Performance with Event =
Delegation      =20
   </H2>
<P>            You'll frequently use jQuery to add new elements to the =
page, and=20
           when you do, you may need to bind events to those new =
elements       =20
    =E2=80=94 events you already bound to similar elements that were on =
the page=20
originally. Instead of repeating your event binding every time you add =
elements=20
to the page, you can use event delegation. With event delegation, you =
bind your=20
event to a container element, and then when the event occurs, you look =
to see=20
which contained element it occurred on. If this sounds complicated, =
luckily=20
jQuery makes it easy with its <CODE class=3D"code">$.fn.live</CODE> and =
<CODE=20
class=3D"code">$.fn.delegate</CODE> methods.          </P>
<P>            While most people discover event delegation while dealing =
with=20
elements added to the page later, it has some performance benefits even =
if you=20
never add more elements to the page. The time required to bind event =
handlers to=20
hundreds of individual elements is non-trivial; if you have a large set =
of=20
elements, you should consider delegating related events to a container =
element. =20
        </P>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            The <CODE class=3D"code">$.fn.live</CODE> method was =
introduced in=20
jQuery 1.3, and at that time only certain event types were supported. As =
of=20
jQuery 1.4.2, the <CODE class=3D"code">$.fn.delegate</CODE> method is =
available,=20
and is the preferred method.          </P></DIV>
<DIV class=3D"example">
<P class=3D"title"><B>Event delegation using <CODE=20
class=3D"code">$.fn.delegate</CODE></B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_266032" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myUnorderedList'</CODE><CODE=20
      class=3D"plain">).delegate(</CODE><CODE =
class=3D"string">'li'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"string">'click'</CODE><CODE class=3D"plain">,=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$myListItem =3D =

      $(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      ...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"example">
<P class=3D"title"><B>Event delegation using <CODE=20
class=3D"code">$.fn.live</CODE></B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_563614" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myUnorderedList li'</CODE><CODE=20
      class=3D"plain">).live(</CODE><CODE =
class=3D"string">'click'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$myListItem =3D =

      $(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      ...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"section" title=3D"Unbinding Delegated Events">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Unbinding Delegated Events           =
  =20
</H3></DIV>
<P>              If you need to remove delegated events, you can't =
simply unbind=20
them. Instead, use <CODE class=3D"code">$.fn.undelegate</CODE> for =
events=20
connected with <CODE class=3D"code">$.fn.delegate</CODE>, and <CODE=20
class=3D"code">$.fn.die</CODE> for events connected with <CODE=20
class=3D"code">$.fn.live</CODE>. As with bind, you can optionally pass =
in the name=20
of the bound function.            </P>
<DIV class=3D"example">
<P class=3D"title"><B>Unbinding delegated events</B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_392024" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myUnorderedList'</CODE><CODE=20
      class=3D"plain">).undelegate(</CODE><CODE =
class=3D"string">'li'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"string">'click'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myUnorderedList li'</CODE><CODE=20
      class=3D"plain">).die(</CODE><CODE =
class=3D"string">'click'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV></DIV>
<DIV class=3D"section" title=3D"Event Helpers">
<H2 class=3D"title">              Event Helpers            </H2>
<P>              jQuery offers two event-related helper functions that =
save you=20
a few keystrokes.            </P>
<DIV class=3D"titlepage">
<H3 class=3D"title"><CODE class=3D"code">$.fn.hover</CODE></H3></DIV>
<P>              The <CODE class=3D"code">$.fn.hover</CODE> method lets =
you pass=20
one or two functions to be run when the <CODE =
class=3D"code">mouseenter</CODE> and=20
<CODE class=3D"code">mouseleave</CODE> events occur on an element. If =
you pass one=20
function, it will be run for both events; if you pass two functions, the =
first=20
will run for <CODE class=3D"code">mouseenter</CODE>, and the second will =
run for=20
<CODE class=3D"code">mouseleave</CODE>.            </P>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              Prior to jQuery 1.4, the <CODE =
class=3D"code">$.fn.hover</CODE>=20
method required two functions.            </P></DIV>
<DIV class=3D"example">
<P class=3D"title"><B>The hover helper function</B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_666857" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#menu li'</CODE><CODE =
class=3D"plain">).hover(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).toggleClass(</CODE><CODE=20
      class=3D"string">'hover'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"section" title=3D"$.fn.toggle">
<DIV class=3D"titlepage">
<H3 class=3D"title"><CODE class=3D"code">$.fn.toggle</CODE></H3></DIV>
<P>                The <CODE class=3D"code">$.fn.toggle</CODE> method is =
triggered=20
by the "click" event and accepts two or more                functions. =
Each time=20
the click event occurs, the next function in the list is called.         =
      =20
Generally, <CODE class=3D"code">$.fn.toggle</CODE> is used with just two =

functions; however, it will accept an                unlimited number of =

functions. Be careful, though: providing a long list of functions can be =
       =20
       difficult to debug).              </P>
<DIV class=3D"example">
<P class=3D"title"><B>The toggle helper function</B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_178401" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'p.expander'</CODE><CODE=20
  class=3D"plain">).toggle(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).prev().addClass(</CODE><CODE=20
      class=3D"string">'open'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).prev().removeClass(</CODE><CODE=20
      class=3D"string">'open'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">              Exercises            </H2>
<DIV class=3D"section" title=3D"Create an Input Hint">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Create an Input Hint               =
=20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/inputHint.js</CODE> or work in =
Firebug.=20
Your task is to use the text of the label for the search input to create =
"hint"=20
text for the search input. The steps are as follows:              </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Set the value of the search input to the text =
of the=20
  label element                    </P></LI>
  <LI>
  <P>                      Add a class of "hint" to the search input     =
       =20
         </P></LI>
  <LI>
  <P>                      Remove the label element                    =
</P></LI>
  <LI>
  <P>                      Bind a focus event to the search input that =
removes=20
  the hint text and the "hint" class                    </P></LI>
  <LI>
  <P>                      Bind a blur event to the search input that =
restores=20
  the hint text and "hint" class if no search text was entered           =
       =20
   </P></LI></OL></DIV>
<P>                What other considerations might there be if you were =
creating=20
this functionality for a real site?              </P></DIV>
<DIV class=3D"section" title=3D"Add Tabbed Navigation">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Add Tabbed Navigation              =
 =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/tabs.js</CODE>. Your task is to =
create=20
tabbed navigation for the two div.module elements. To accomplish this:   =
       =20
   </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Hide all of the modules.                    =
</P></LI>
  <LI>
  <P>                      Create an unordered list element before the =
first=20
  module.                    </P></LI>
  <LI>Iterate over the modules using <CODE =
class=3D"code">$.fn.each</CODE>. For=20
  each module, use the text of the h2 element as the text for a list =
item that=20
  you add to the unordered list element.                  </LI>
  <LI>
  <P>                      Bind a click event to the list item that:     =
       =20
         </P>
  <UL>
    <LI>
    <P>                          Shows the related module, and hides any =
other=20
    modules                        </P></LI>
    <LI>
    <P>                          Adds a class of "current" to the =
clicked list=20
    item                        </P></LI>
    <LI>
    <P>                          Removes the class "current" from the =
other list=20
    item                        </P></LI></UL></LI>
  <LI>
  <P>                      Finally, show the first tab.                  =
 =20
  </P></LI></OL></DIV></DIV></DIV></DIV>
<DIV id=3D"chapter-6" class=3D"chapter" title=3D"Effects">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  Effects               =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Overview">
<H2 class=3D"title">              Overview            </H2>
<P>              jQuery makes it trivial to add simple effects to your =
page.=20
Effects can use the built-in settings, or provide a customized duration. =
You can=20
also create custom animations of arbitrary CSS properties.            =
</P>
<P>              For complete details on jQuery effects, visit <A =
class=3D"ulink"=20
href=3D"http://api.jquery.com/category/effects/">http://api.jquery.com/ca=
tegory/effects/</A>.=20
           </P></DIV>
<DIV class=3D"section" title=3D"Built-in Effects">
<H2 class=3D"title">              Built-in Effects            </H2>
<P>              Frequently used effects are built into jQuery as =
methods:      =20
     </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">$.fn.show</SPAN></DT>
  <DD>
  <P>                    Show the selected element.                  =
</P></DD>
  <DT><SPAN class=3D"term">$.fn.hide</SPAN></DT>
  <DD>
  <P>                    Hide the selected elements.                  =
</P></DD>
  <DT><SPAN class=3D"term">$.fn.fadeIn</SPAN></DT>
  <DD>
  <P>                    Animate the opacity of the selected elements to =
100%.  =20
                 </P></DD>
  <DT><SPAN class=3D"term">$.fn.fadeOut</SPAN></DT>
  <DD>
  <P>                    Animate the opacity of the selected elements to =
0%.    =20
               </P></DD>
  <DT><SPAN class=3D"term">$.fn.slideDown</SPAN></DT>
  <DD>
  <P>                    Display the selected elements with a vertical =
sliding=20
  motion.                  </P></DD>
  <DT><SPAN class=3D"term">$.fn.slideUp</SPAN></DT>
  <DD>
  <P>                    Hide the selected elements with a vertical =
sliding=20
  motion.                  </P></DD>
  <DT><SPAN class=3D"term">$.fn.slideToggle</SPAN></DT>
  <DD>
  <P>                    Show or hide the selected elements with a =
vertical=20
  sliding motion, depending on whether the elements are currently =
visible.      =20
             </P></DD></DL></DIV>
<DIV id=3D"example-6.1" class=3D"example">
<P class=3D"title">Example 6.1:                 A basic use of a =
built-in effect  =20
           </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_294679" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
  =
class=3D"plain">).show();</CODE></TD></TR></TBODY></TABLE></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"section" title=3D"Changing the Duration of Built-in =
Effects">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Changing the Duration of Built-in =
Effects   =20
            </H3></DIV>
<P>                With the exception of <CODE =
class=3D"code">$.fn.show</CODE> and=20
<CODE class=3D"code">$.fn.hide</CODE>, all of the built-in methods are =
animated=20
over the course of 400ms by default. Changing the duration of an effect =
is=20
simple.              </P>
<DIV id=3D"example-6.2" class=3D"example">
<P class=3D"title">Example 6.2:                   Setting the duration =
of an=20
effect                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_41797" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE=20
      class=3D"plain">).fadeIn(300);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</CODE><CODE=20
      class=3D"comments">// fade in over =
300ms</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'h1'</CODE><CODE =
class=3D"plain">).fadeOut(</CODE><CODE=20
      class=3D"string">'slow'</CODE><CODE class=3D"plain">);&nbsp; =
</CODE><CODE=20
      class=3D"comments">// using a built-in speed=20
definition</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>=

<DIV class=3D"section" title=3D"jQuery.fx.speeds">
<DIV class=3D"titlepage">
<H4 class=3D"title">                    jQuery.fx.speeds                 =
=20
</H4></DIV>
<P>                  jQuery has an object at <CODE=20
class=3D"code">jQuery.fx.speeds</CODE> that contains the default speed, =
as well as=20
settings for <CODE class=3D"code">"slow"</CODE> and <CODE=20
class=3D"code">"fast"</CODE>.                </P>
<DIV id=3D"highlighter_242090" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">speeds:=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">slow:=20
      600,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">fast:=20
      200,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      Default speed</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">_default: =
400</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                  It is possible to override or add to this object. =
For=20
example, you may want to change the default duration of effects, or you =
may want=20
to create your own effects speed.                </P>
<DIV id=3D"example-6.3" class=3D"example">
<P class=3D"title">Example 6.3:                     Augmenting =
jQuery.fx.speeds=20
with custom speed definitions                  </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_504562" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">jQuery.fx.speeds.blazing =
=3D=20
      100;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">jQuery.fx.speeds.turtle =
=3D=20
      =
2000;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV=
></DIV>
<DIV class=3D"section" title=3D"Doing Something when an Effect is Done">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Doing Something when an Effect is =
Done      =20
         </H3></DIV>
<P>                Often, you'll want to run some code once an animation =
is done=20
               =E2=80=94 if you run it before the animation is done, it =
may affect the=20
quality of the animation, or it may remove elements that are part of the =

animation. <SPAN class=3D"termdef">[Definition: <EM =
class=3D"firstterm">Callback=20
functions</EM> provide a way to register your interest in an event that =
will=20
happen in the future.]</SPAN> In this case, the event we'll be =
responding to is=20
the conclusion of the animation. Inside of the callback function, the =
keyword=20
<CODE class=3D"code">this</CODE> refers to the element that the effect =
was called=20
on; as we did inside of event handler functions, we can turn it into a =
jQuery=20
object via <CODE class=3D"code">$(this)</CODE>.              </P>
<DIV id=3D"example-6.4" class=3D"example">
<P class=3D"title">Example 6.4:                   Running code when an =
animation=20
is complete                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_739002" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div.old'</CODE><CODE =
class=3D"plain">).fadeOut(300,=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">() {=20
      $(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).remove();=20
      });</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>                Note that if your selection doesn't return any =
elements, your=20
callback will never run! You can solve this problem by testing whether =
your=20
selection returned any elements; if not, you can just run the callback=20
immediately.              </P>
<DIV id=3D"example-6.5" class=3D"example">
<P class=3D"title">Example 6.5:                   Run a callback even if =
there=20
were no elements to animate                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_316951" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$thing =3D $(</CODE><CODE=20
      class=3D"string">'#nonexistent'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">cb =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(</CODE><CODE =
class=3D"string">'done!'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($thing.length) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$thing.fadeIn(300, =
cb);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">} </CODE><CODE=20
      class=3D"keyword">else</CODE> <CODE=20
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">cb();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV></DIV></DIV>
<H2 class=3D"title">            Custom Effects with <CODE=20
class=3D"code">$.fn.animate</CODE></H2>
<P>            jQuery makes it possible to animate arbitrary CSS =
properties via=20
the <CODE class=3D"code">$.fn.animate</CODE> method. The <CODE=20
class=3D"code">$.fn.animate</CODE> method lets you animate to a set =
value, or to a=20
value relative to the current value.          </P>
<DIV id=3D"example-6.6" class=3D"example">
<P class=3D"title">Example 6.6:               Custom effects with =
$.fn.animate    =20
       </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_383105" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div.funtimes'</CODE><CODE=20
    class=3D"plain">).animate(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">left : </CODE><CODE =
class=3D"string">"+=3D50"</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">opacity : =
0.25</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">300,=20
      </CODE><CODE class=3D"comments">// =
duration</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">() {=20
      console.log(</CODE><CODE class=3D"string">'done!'</CODE><CODE=20
      class=3D"plain">); </CODE><CODE class=3D"comments">//=20
  calback</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            Color-related properties cannot be animated with <CODE =
class=3D"code">$.fn.animate</CODE>=20
using jQuery out of the box. Color animations can easily be accomplished =
by=20
including the <A class=3D"ulink" =
href=3D"http://plugins.jquery.com/files/jquery.color.js.txt">color=20
plugin</A>. We'll discuss using plugins later in the book.          =
</P></DIV>
<DIV class=3D"section" title=3D"Easing">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Easing              </H3></DIV>
<P><SPAN class=3D"termdef">[Definition: <EM =
class=3D"firstterm">Easing</EM>=20
describes the manner in which an              effect occurs =E2=80=94 =
whether the rate=20
of change is steady, or varies over the duration of the =
animation.]</SPAN>=20
jQuery includes only two methods of easing: swing and linear. If you =
want more=20
natural transitions in your animations, various easing plugins are =
available.   =20
        </P>
<P>              As of jQuery 1.4, it is possible to do per-property =
easing when=20
using the $.fn.animate method.            </P>
<DIV id=3D"example-6.7" class=3D"example">
<P class=3D"title">Example 6.7:                 Per-property easing      =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_92042" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div.funtimes'</CODE><CODE=20
    class=3D"plain">).animate(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">left : [ </CODE><CODE =
class=3D"string">"+=3D50"</CODE><CODE=20
      class=3D"plain">, </CODE><CODE class=3D"string">"swing"</CODE> =
<CODE class=3D"plain">],</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">opacity : [ 0.25, </CODE><CODE=20
      class=3D"string">"linear"</CODE> <CODE=20
class=3D"plain">]</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">300</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              For more details on easing options, see <A =
class=3D"ulink" =
href=3D"http://api.jquery.com/animate/">http://api.jquery.com/animate/</A=
>.=20
           </P></DIV>
<DIV class=3D"section" title=3D"Managing Effects">
<H2 class=3D"title">              Managing Effects            </H2>
<P>              jQuery provides several tools for managing animations.  =
       =20
  </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">$.fn.stop</SPAN></DT>
  <DD>
  <P>                    Stop currently running animations on the =
selected=20
  elements.                  </P></DD>
  <DT><SPAN class=3D"term">$.fn.delay</SPAN></DT>
  <DD>
  <P>                    Wait the specified number of milliseconds =
before=20
  running the next animation.                  </P>
  <DIV id=3D"highlighter_880430" class=3D"syntaxhighlighter  ">
  <DIV class=3D"bar">
  <DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
  title=3D"view source" =
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view=20
  source</A><A style=3D"width: 16px; height: 16px;" class=3D"item =
printSource"=20
  title=3D"print"=20
  =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
  style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
  <DIV class=3D"lines">
  <DIV class=3D"line alt1">
  <TABLE>
    <TBODY>
    <TR>
      <TD class=3D"number"><CODE>1</CODE></TD>
      <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
        class=3D"string">'h1'</CODE><CODE=20
        =
class=3D"plain">).show(300).delay(1000).hide(300);</CODE></TD></TR></TBOD=
Y></TABLE></DIV></DIV></DIV></DD>
  <DT><SPAN class=3D"term">jQuery.fx.off</SPAN></DT>
  <DD>
  <P>                    If this value is true, there will be no =
transition for=20
  animations; elements will immediately be set to the target final state =

  instead. This can be especially useful when dealing with older =
browsers; you=20
  also may want to provide the option to your users.                 =20
</P></DD></DL></DIV></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">              Exercises            </H2>
<DIV class=3D"section" title=3D"Reveal Hidden Text">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Reveal Hidden Text               =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/blog.js</CODE>. Your task is to =
add some=20
interactivity to the blog section of the page. The spec for the feature =
is as=20
follows:              </P>
<UL>
  <LI>
  <P>                    Clicking on a headline in the #blog div should =
slide=20
  down the excerpt paragraph                  </P></LI>
  <LI>
  <P>                    Clicking on another headline should slide down =
its=20
  excerpt paragraph, and slide up any other currently showing excerpt=20
  paragraphs.                  </P></LI></UL>
<P>                Hint: don't forget about the <CODE=20
class=3D"code">:visible</CODE> selector!              </P></DIV>
<DIV class=3D"section" title=3D"Create Dropdown Menus">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Create Dropdown Menus              =
 =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/navigation.js</CODE>. Your task =
is to add=20
dropdowns to the main navigation at the top of the page.              =
</P>
<UL>
  <LI>
  <P>                    Hovering over an item in the main menu should =
show that=20
  item's submenu items, if any.                  </P></LI>
  <LI>
  <P>                    Exiting an item should hide any submenu items.  =
       =20
          </P></LI></UL>
<P>                To accomplish this, use the <CODE=20
class=3D"code">$.fn.hover</CODE> method to add and remove a class from =
the submenu=20
items to control whether they're visible or hidden. (The file at <CODE =
class=3D"filename">/exercises/css/styles.css</CODE>=20
includes the "hover" class for this purpose.)              </P></DIV>
<DIV class=3D"section" title=3D"Create a Slideshow">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Create a Slideshow               =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/slideshow.js</CODE>. Your task is =
to take a=20
plain semantic HTML page and enhance it with JavaScript by adding a =
slideshow.  =20
           </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Move the #slideshow element to the top of the =
body.  =20
                   </P></LI>
  <LI>
  <P>                      Write code to cycle through the list items =
inside the=20
  element; fade one in, display it for a few seconds, then fade it out =
and fade=20
  in the next one.                    </P></LI>
  <LI>
  <P>                      When you get to the end of the list, start =
again at=20
  the beginning.                    </P></LI></OL></DIV>
<P>                For an extra challenge, create a navigation area =
under the=20
slideshow that shows how many images there are and which image you're =
currently=20
viewing. (Hint: $.fn.prevAll will come in handy for this.)             =20
</P></DIV></DIV></DIV>
<DIV id=3D"chapter-7" class=3D"chapter" title=3D"Ajax">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  Ajax                =
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Overview">
<H2 class=3D"title">              Overview            </H2>
<P>              The XMLHttpRequest method (XHR) allows browsers to =
communicate=20
with the server without requiring a page reload. This method, also known =
as Ajax=20
(Asynchronous JavaScript and XML), allows for web pages that provide =
rich,=20
interactive experiences.            </P>
<P>              Ajax requests are triggered by JavaScript code; your =
code sends=20
a request to a URL, and when it receives a response, a callback function =
can be=20
triggered to handle the response. Because the request is asynchronous, =
the rest=20
of your code continues to execute while the request is being processed, =
so it=E2=80=99s=20
imperative that a callback be used to handle the response.            =
</P>
<P>              jQuery provides Ajax support that abstracts away =
painful=20
browser differences. It offers both a full-featured <CODE=20
class=3D"code">$.ajax()</CODE> method, and simple convenience methods =
such as=20
<CODE class=3D"code">$.get()</CODE>, <CODE =
class=3D"code">$.getScript()</CODE>,=20
<CODE class=3D"code">$.getJSON()</CODE>, <CODE =
class=3D"code">$.post()</CODE>, and=20
<CODE class=3D"code">$().load()</CODE>.            </P>
<P>              Most jQuery applications don=E2=80=99t in fact use XML, =
despite the=20
name =E2=80=9CAjax=E2=80=9D; instead, they transport data as plain HTML =
or JSON (JavaScript=20
Object Notation).            </P>
<P>              In general, Ajax does not work across domains. =
Exceptions are=20
services that provide JSONP (JSON with Padding) support, which allow =
limited=20
cross-domain functionality.            </P></DIV>
<DIV class=3D"section" title=3D"Key Concepts">
<H2 class=3D"title">              Key Concepts            </H2>
<P>              Proper use of Ajax-related jQuery methods requires=20
understanding some key concepts first.            </P>
<DIV class=3D"section" title=3D"GET vs. Post">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  GET vs. Post                =
</H3></DIV>
<P>                The two most common =E2=80=9Cmethods=E2=80=9D for =
sending a request to a=20
server are GET and POST. It=E2=80=99s important to understand the proper =
application of=20
each.              </P>
<P>                The GET method should be used for non-destructive =
operations=20
=E2=80=94 that is, operations where you are only =
=E2=80=9Cgetting=E2=80=9D data from the server, not=20
changing data on the server. For example, a query to a search service =
might be a=20
GET request. GET requests may be cached by the browser, which can lead =
to=20
unpredictable behavior if you are not expecting it. GET requests =
generally send=20
all of their data in a query string.              </P>
<P>                The POST method should be used for destructive =
operations =E2=80=94=20
that is, operations where you are changing data on the server. For =
example, a=20
user saving a blog post should be a POST request. POST requests are =
generally=20
not cached by the browser; a query string can be part of the URL, but =
the data=20
tends to be sent separately as post data.              </P></DIV>
<DIV class=3D"section" title=3D"Data Types">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Data Types                =
</H3></DIV>
<P>                jQuery generally requires some instruction as to the =
type of=20
data you expect to get back from an Ajax request; in some cases the data =
type is=20
specified by the method name, and in other cases it is provided as part =
of a=20
configuration object. There are several options:              </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">text</SPAN></DT>
  <DD>
  <P>                      For transporting simple strings               =
    =20
  </P></DD>
  <DT><SPAN class=3D"term">html</SPAN></DT>
  <DD>
  <P>                      For transporting blocks of HTML to be placed =
on the=20
  page                    </P></DD>
  <DT><SPAN class=3D"term">script</SPAN></DT>
  <DD>
  <P>                      For adding a new script to the page           =
       =20
   </P></DD>
  <DT><SPAN class=3D"term">json</SPAN></DT>
  <DD>
  <P>                      For transporting JSON-formatted data, which =
can=20
  include strings, arrays, and objects                    </P>
  <DIV class=3D"note">
  <H3 class=3D"title">                      Note                    =
</H3>
  <P>                      As of jQuery 1.4, if the JSON data sent by =
your=20
  server isn't properly formatted, the request may fail silently. See <A =
class=3D"ulink"=20
  href=3D"http://json.org/">http://json.org/</A> for details on properly =

  formatting JSON, but as a general rule, use built-in language methods =
for=20
  generating JSON on the server to avoid syntax issues.                  =
 =20
  </P></DIV></DD>
  <DT><SPAN class=3D"term">jsonp</SPAN></DT>
  <DD>
  <P>                      For transporting JSON data from another =
domain       =20
              </P></DD>
  <DT><SPAN class=3D"term">xml</SPAN></DT>
  <DD>
  <P>                      For transporting data in a custom XML schema  =
       =20
            </P></DD></DL></DIV>
<P class=3D"remark"><I><SPAN class=3D"remark">I am a strong proponent of =
using the=20
JSON format in most cases, as it provides the most flexibility. It is =
especially=20
useful for sending both HTML and data at the same =
time.</SPAN></I></P></DIV>
<DIV class=3D"section" title=3D"A is for Asynchronous">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  A is for Asynchronous              =
 =20
</H3></DIV>
<P>                The asynchronicity of Ajax catches many new jQuery =
users off=20
guard. Because Ajax calls are asynchronous by default, the response is =
not=20
immediately available. Responses can only be handled using a callback. =
So, for=20
example, the following code will not work:              </P>
<DIV id=3D"highlighter_183182" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">response;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.get(</CODE><CODE=20
      class=3D"string">'foo.php'</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(r) { response =3D r; =
});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">console.log(response);=20
      </CODE><CODE class=3D"comments">//=20
undefined!</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                Instead, we need to pass a callback function to our =
request;=20
this callback will run when the request succeeds, at which point we can =
access=20
the data that it returned, if any.              </P>
<DIV id=3D"highlighter_543238" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.get(</CODE><CODE=20
      class=3D"string">'foo.php'</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(response) { console.log(response);=20
});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Same-Origin Policy and JSONP">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Same-Origin Policy and JSONP       =
        =20
</H3></DIV>
<P>                In general, Ajax requests are limited to the same =
protocol=20
(http or https), the same port, and the same domain as the page making =
the=20
request. This limitation does not apply to scripts that are loaded via =
jQuery's=20
Ajax methods.              </P>
<P>                The other exception is requests targeted at a JSONP =
service=20
on another domain. In the case of JSONP, the provider of the service has =
agreed=20
to respond to your request with a script that can be loaded into the =
page using=20
a <CODE class=3D"code">&lt;script&gt;</CODE> tag, thus avoiding the =
same-origin=20
limitation; that script will include the data you requested, wrapped in =
a=20
callback function you provide.              </P></DIV>
<DIV class=3D"section" title=3D"Ajax and Firebug">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Ajax and Firebug                =
</H3></DIV>
<P>                Firebug (or the Webkit Inspector in Chrome or Safari) =
is an=20
invaluable tool for working with Ajax requests. You can see Ajax =
requests as=20
they happen in the Console tab of Firebug (and in the Resources &gt; XHR =
panel=20
of Webkit Inspector), and you can click on a request to expand it and =
see=20
details such as the request headers, response headers, response content, =
and=20
more. If something isn't going as expected with an Ajax request, this is =
the=20
first place to look to track down what's wrong.              =
</P></DIV></DIV>
<DIV class=3D"section" title=3D"jQuery's Ajax-Related Methods">
<H2 class=3D"title">              jQuery's Ajax-Related Methods          =
  </H2>
<P>              While jQuery does offer many Ajax-related convenience =
methods,=20
the core <CODE class=3D"code">$.ajax</CODE> method is at the heart of =
all of them,=20
and understanding it is imperative. We'll review it first, and then =
touch=20
briefly on the convenience methods.            </P>
<P class=3D"remark"><I><SPAN class=3D"remark">I generally use the $.ajax =
method and=20
do not use convenience methods. As you'll see, it offers features that =
the=20
convenience methods do not, and its syntax is more easily =
understandable, in my=20
opinion.</SPAN></I></P>
<DIV class=3D"titlepage">
<H3 class=3D"title">                $.ajax              </H3></DIV>
<P>              jQuery=E2=80=99s core <CODE =
class=3D"code">$.ajax</CODE> method is a=20
powerful and straightforward way of creating Ajax requests. It takes a=20
configuration object that contains all the instructions jQuery requires =
to=20
complete the request. The <CODE class=3D"code">$.ajax</CODE> method is=20
particularly valuable because it offers the ability to specify both =
success and=20
failure callbacks. Also, its ability to take a configuration object that =
can be=20
defined separately makes it easier to write reusable code. For complete=20
documentation of the configuration options, visit <A class=3D"ulink" =
href=3D"http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.=
ajax/</A>.=20
           </P>
<DIV id=3D"example-7.1" class=3D"example">
<P class=3D"title">Example 7.1:                 Using the core $.ajax =
method      =20
       </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_704793" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">$.ajax({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      the URL for the request</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">url :=20
      </CODE><CODE class=3D"string">'post.php'</CODE><CODE=20
    class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      the data to send</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      (will be converted to a query =
string)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">data : {=20
      id : 123 },</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      whether this is a POST or GET =
request</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">type :=20
      </CODE><CODE class=3D"string">'GET'</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      the type of data we expect =
back</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">dataType=20
      : </CODE><CODE class=3D"string">'json'</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      code to run if the request =
succeeds;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      the response is passed to the =
function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">success=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(json)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'&lt;h1/&gt;'</CODE><CODE=20
      class=3D"plain">).text(json.title).appendTo(</CODE><CODE=20
      class=3D"string">'body'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"string">'&lt;div=20
      class=3D"content"/&gt;'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.html(json.html).appendTo(</CODE><CODE=20
      class=3D"string">'body'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      code to run if the request =
fails;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      the raw request and status codes =
are</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      passed to the function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">error :=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(xhr,=20
      status) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'Sorry, there =
was a=20
      problem!'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      code to run regardless of success or=20
failure</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">complete=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(xhr,=20
      status) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">'The request =
is=20
      complete!'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>33</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>34</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"note">
<H3 class=3D"title">              Note            </H3>
<P>              A note about the <CODE class=3D"code">dataType</CODE> =
setting: if=20
the server sends back data that is in a different format than you =
specify, your=20
code may fail, and the reason will not always be clear, because the HTTP =

response code will not show an error. When working with Ajax requests, =
make sure=20
your server is sending back the data type you're asking for, and verify =
that the=20
Content-type header is accurate for the data type. For example, for JSON =
data,=20
the Content-type header should be <CODE =
class=3D"code">application/json</CODE>.   =20
        </P></DIV>
<DIV class=3D"section" title=3D"$.ajax Options">
<DIV class=3D"titlepage">
<H4 class=3D"title"><CODE class=3D"code">$.ajax</CODE> Options           =
    =20
</H4></DIV>
<P>                There are many, many options for the $.ajax method, =
which is=20
part of its power. For a complete list of options, visit <A =
class=3D"ulink" =
href=3D"http://api.jquery.com/jQuery.ajax/">http://api.jquery.com/jQuery.=
ajax/</A>;=20
here are several that you will use frequently:              </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">async</SPAN></DT>
  <DD>
  <P>                      Set to <CODE class=3D"code">false</CODE> if =
the request=20
  should be sent synchronously. Defaults to <CODE =
class=3D"code">true</CODE>. Note=20
  that if you set this option to false, your request will block =
execution of=20
  other code until the response is received.                    =
</P></DD>
  <DT><SPAN class=3D"term">cache</SPAN></DT>
  <DD>
  <P>                      Whether to use a cached response if =
available.=20
  Defaults to <CODE class=3D"code">true</CODE> for all dataTypes except =
"script"=20
  and "jsonp". When set to false, the URL will simply have a =
cachebusting=20
  parameter appended to it.                    </P></DD>
  <DT><SPAN class=3D"term">complete</SPAN></DT>
  <DD>
  <P>                      A callback function to run when the request =
is=20
  complete, regardless of success or failure. The function receives the =
raw=20
  request object and the text status of the request.                   =20
</P></DD>
  <DT><SPAN class=3D"term">context</SPAN></DT>
  <DD>
  <P>                      The scope in which the callback function(s) =
should=20
  run (i.e. what <CODE class=3D"code">this</CODE> will mean inside the =
callback=20
  function(s)). By default, <CODE class=3D"code">this</CODE> inside the =
callback=20
  function(s) refers to the object originally passed to <CODE=20
  class=3D"code">$.ajax</CODE>.                    </P></DD>
  <DT><SPAN class=3D"term">data</SPAN></DT>
  <DD>
  <P>                      The data to be sent to the server. This can =
either be=20
  an object or a query string, such as <CODE=20
  class=3D"code">foo=3Dbar&amp;baz=3Dbim</CODE>.                    =
</P></DD>
  <DT><SPAN class=3D"term">dataType</SPAN></DT>
  <DD>
  <P>                      The type of data you expect back from the =
server. By=20
  default, jQuery will look at the MIME type of the response if no =
dataType is=20
  specified.                    </P></DD>
  <DT><SPAN class=3D"term">error</SPAN></DT>
  <DD>
  <P>                      A callback function to run if the request =
results in=20
  an error. The function receives the raw request object and the text =
status of=20
  the request.                    </P></DD>
  <DT><SPAN class=3D"term">jsonp</SPAN></DT>
  <DD>
  <P>                      The callback name to send in a query string =
when=20
  making a JSONP request. Defaults to "callback".                    =
</P></DD>
  <DT><SPAN class=3D"term">success</SPAN></DT>
  <DD>
  <P>                      A callback function to run if the request =
succeeds.=20
  The function receives the response data (converted to a JavaScript =
object if=20
  the dataType was JSON), as well as the text status of the request and =
the raw=20
  request object.                    </P></DD>
  <DT><SPAN class=3D"term">timeout</SPAN></DT>
  <DD>
  <P>                      The time in milliseconds to wait before =
considering=20
  the request a failure.                    </P></DD>
  <DT><SPAN class=3D"term">traditional</SPAN></DT>
  <DD>
  <P>                      Set to true to use the param serialization =
style in=20
  use prior to jQuery 1.4. For details, see <A class=3D"ulink" =
href=3D"http://api.jquery.com/jQuery.param/">http://api.jquery.com/jQuery=
.param/</A>.=20
                     </P></DD>
  <DT><SPAN class=3D"term">type</SPAN></DT>
  <DD>
  <P>                      The type of the request, "POST" or "GET". =
Defaults to=20
  "GET". Other request types, such as "PUT" and "DELETE" can be used, =
but they=20
  may not be supported by all browsers.                    </P></DD>
  <DT><SPAN class=3D"term">url</SPAN></DT>
  <DD>
  <P>                      The URL for the request.                   =20
</P></DD></DL></DIV>
<P>                The <CODE class=3D"code">url</CODE> option is the =
only required=20
property of the <CODE class=3D"code">$.ajax</CODE> configuration object; =
all other=20
properties are optional.              </P></DIV>
<DIV class=3D"section" title=3D"Convenience Methods">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Convenience Methods                =

</H3></DIV>
<P>                If you don't need the extensive configurability of =
<CODE=20
class=3D"code">$.ajax</CODE>, and you don't care about handling errors, =
the Ajax=20
convenience functions provided by jQuery can be useful, terse ways to =
accomplish=20
Ajax requests. These methods are just "wrappers" around the core <CODE =
class=3D"code">$.ajax</CODE>=20
method, and simply pre-set some of the options on the <CODE=20
class=3D"code">$.ajax</CODE> method.              </P>
<P>                The convenience methods provided by jQuery are:       =
      =20
</P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">$.get</SPAN></DT>
  <DD>
  <P>                      Perform a GET request to the provided URL.    =
       =20
          </P></DD>
  <DT><SPAN class=3D"term">$.post</SPAN></DT>
  <DD>
  <P>                      Perform a POST request to the provided URL.   =
       =20
           </P></DD>
  <DT><SPAN class=3D"term">$.getScript</SPAN></DT>
  <DD>
  <P>                      Add a script to the page.                   =20
</P></DD>
  <DT><SPAN class=3D"term">$.getJSON</SPAN></DT>
  <DD>
  <P>                      Perform a GET request, and expect JSON to be=20
  returned.                    </P></DD></DL></DIV>
<P>                In each case, the methods take the following =
arguments, in=20
order:              </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">url</SPAN></DT>
  <DD>
  <P>                      The URL for the request. Required.            =
       =20
  </P></DD>
  <DT><SPAN class=3D"term">data</SPAN></DT>
  <DD>
  <P>                      The data to be sent to the server. Optional. =
This can=20
  either be an object or a query string, such as <CODE=20
  class=3D"code">foo=3Dbar&amp;baz=3Dbim</CODE>.                    </P>
  <DIV class=3D"note">
  <H3 class=3D"title">                      Note                    =
</H3>
  <P>                      This option is not valid for <CODE=20
  class=3D"code">$.getScript</CODE>.                    </P></DIV></DD>
  <DT><SPAN class=3D"term">success callback</SPAN></DT>
  <DD>
  <P>                      A callback function to run if the request =
succeeds.=20
  Optional. The function receives the response data (converted to a =
JavaScript=20
  object if the data type was JSON), as well as the text status of the =
request=20
  and the raw request object.                    </P></DD>
  <DT><SPAN class=3D"term">data type</SPAN></DT>
  <DD>
  <P>                      The type of data you expect back from the =
server.=20
  Optional.                    </P>
  <DIV class=3D"note">
  <H3 class=3D"title">                      Note                    =
</H3>
  <P>                      This option is only applicable for methods =
that don't=20
  already specify the data type in their name.                   =20
</P></DIV></DD></DL></DIV>
<DIV id=3D"example-7.2" class=3D"example">
<P class=3D"title">Example 7.2:                   Using jQuery's Ajax =
convenience=20
methods                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_621699" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// get plain text or=20
    html</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.get(</CODE><CODE=20
      class=3D"string">'/users.php'</CODE><CODE class=3D"plain">, { =
userId : 1234 },=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(resp)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(resp);</CODE></TD></TR></TBODY></TABLE></DIV>=

<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// add a script to =
the page,=20
      then run a function defined in =
it</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.getScript(</CODE><CODE =
class=3D"string">'/static/js/myScript.js'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">functionFromMyScript();</CODE></TD></TR></TBODY></TABLE><=
/DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// get JSON-formatted =
data from=20
      the server</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.getJSON(</CODE><CODE =
class=3D"string">'/details.php'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(resp)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.each(resp, </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(k, v)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">console.log(k + </CODE><CODE class=3D"string">' : =
'</CODE>=20
      <CODE class=3D"plain">+ v);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"section" title=3D"$.fn.load">
<DIV class=3D"titlepage">
<H3 class=3D"title"><CODE class=3D"code">$.fn.load</CODE></H3></DIV>
<P>                The <CODE class=3D"code">$.fn.load</CODE> method is =
unique=20
among jQuery=E2=80=99s Ajax methods in that it is called on a selection. =
The <CODE=20
class=3D"code">$.fn.load</CODE> method fetches HTML from a URL, and uses =
the=20
returned HTML to populate the selected element(s). In addition to =
providing a=20
URL to the method, you can optionally provide a selector; jQuery will =
fetch only=20
the matching content from the returned HTML.              </P>
<DIV id=3D"example-7.3" class=3D"example">
<P class=3D"title">Example 7.3:                   Using $.fn.load to =
populate an=20
element                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_612410" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#newContent'</CODE><CODE =
class=3D"plain">).load(</CODE><CODE=20
      class=3D"string">'/foo.html'</CODE><CODE=20
  =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV id=3D"example-7.4" class=3D"example">
<P class=3D"title">Example 7.4:                   Using $.fn.load to =
populate an=20
element based on a selector                </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_27300" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#newContent'</CODE><CODE =
class=3D"plain">).load(</CODE><CODE=20
      class=3D"string">'/foo.html #myDiv h1:first'</CODE><CODE =
class=3D"plain">,=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(html)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">alert(</CODE><CODE=20
      class=3D"string">'Content updated!'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Ajax and Forms">
<H2 class=3D"title">              Ajax and Forms            </H2>
<P>              jQuery=E2=80=99s ajax capabilities can be especially =
useful when=20
dealing with forms. The <A class=3D"ulink"=20
href=3D"http://jquery.malsup.com/form/">jQuery Form Plugin</A> is a =
well-tested=20
tool for adding Ajax capabilities to forms, and you should generally use =
it for=20
handling forms with Ajax rather than trying to roll your own solution =
for=20
anything remotely complex. That said, there are a two jQuery methods you =
should=20
know that relate to form processing in jQuery: <CODE=20
class=3D"code">$.fn.serialize</CODE> and <CODE=20
class=3D"code">$.fn.serializeArray</CODE>.            </P>
<DIV id=3D"example-7.5" class=3D"example">
<P class=3D"title">Example 7.5:                 Turning form data into a =
query=20
string              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_524258" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myForm'</CODE><CODE=20
  =
class=3D"plain">).serialize();</CODE></TD></TR></TBODY></TABLE></DIV></DI=
V></DIV></DIV></DIV>
<DIV id=3D"example-7.6" class=3D"example">
<P class=3D"title">Example 7.6:                 Creating an array of =
objects=20
containing form data              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_873749" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myForm'</CODE><CODE=20
      =
class=3D"plain">).serializeArray();</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// creates a =
structure like=20
      this:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">[</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">{ name :=20
      </CODE><CODE class=3D"string">'field1'</CODE><CODE =
class=3D"plain">, value :=20
      123 },</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">{ name :=20
      </CODE><CODE class=3D"string">'field2'</CODE><CODE =
class=3D"plain">, value :=20
      </CODE><CODE class=3D"string">'hello world'</CODE> <CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">]</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV></DIV>
<DIV class=3D"section" title=3D"Working with JSONP">
<H2 class=3D"title">              Working with JSONP            </H2>
<P>              The advent of JSONP =E2=80=94 essentially a consensual =
cross-site      =20
       scripting hack =E2=80=94 has opened the door to powerful mashups =
of content. Many=20
prominent sites provide JSONP services, allowing you access to their =
content via=20
a predefined API. A particularly great source of JSONP-formatted data is =
the <A=20
class=3D"ulink" href=3D"http://developer.yahoo.com/yql/console/">Yahoo! =
Query=20
Language</A>, which we'll use in the following example to fetch news =
about cats.=20
           </P>
<DIV id=3D"example-7.7" class=3D"example">
<P class=3D"title">Example 7.7:                 Using YQL and JSONP      =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_914347" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">$.ajax({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">url :=20
      </CODE><CODE class=3D"string">'<A =
href=3D"http://query.yahooapis.com/v1/public/yql">http://query.yahooapis.=
com/v1/public/yql</A>'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      the name of the callback =
parameter,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">// as=20
      specified by the YQL =
service</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">jsonp :=20
      </CODE><CODE class=3D"string">'callback'</CODE><CODE=20
    class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      tell jQuery we're expecting =
JSONP</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">dataType=20
      : </CODE><CODE class=3D"string">'jsonp'</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      tell YQL what we want and that we want=20
JSON</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">data :=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">q : </CODE><CODE class=3D"string">'select =
title,abstract,url=20
      from search.news where query=3D"cat"'</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">format : </CODE><CODE=20
  class=3D"string">'json'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      work with the response</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">success=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(response) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">console.log(response);</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>              jQuery handles all the complex aspects of JSONP=20
behind-the-scenes              =E2=80=94 all we have to do is tell =
jQuery the name of=20
the JSONP callback parameter specified by YQL ("callback" in this case), =
and=20
otherwise the whole process looks and feels like a normal Ajax request.  =
       =20
  </P></DIV>
<DIV class=3D"section" title=3D"Ajax Events">
<H2 class=3D"title">              Ajax Events            </H2>
<P>              Often, you=E2=80=99ll want to perform an operation =
whenever an Ajax=20
requests starts or stops, such as showing or hiding a loading indicator. =
Rather=20
than defining this behavior inside every Ajax request, you can bind Ajax =
events=20
to elements just like you'd bind other events. For a complete list of =
Ajax=20
events, visit <A class=3D"ulink"=20
href=3D"http://docs.jquery.com/Ajax_Events">http://docs.jquery.com/Ajax_E=
vents</A>.=20
           </P>
<DIV id=3D"example-7.8" class=3D"example">
<P class=3D"title">Example 7.8:                 Setting up a loading =
indicator=20
using Ajax Events              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_623290" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#loading_indicator'</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.ajaxStart(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE class=3D"plain">).show();=20
      })</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.ajaxStop(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE class=3D"plain">).hide();=20
      =
});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">              Exercises            </H2>
<DIV class=3D"section" title=3D"Load External Content">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Load External Content              =
 =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/load.js</CODE>. Your task is to =
load the=20
content of a blog item when a user clicks on the title of the item.      =
       =20
</P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>Create a target div after the headline for each blog post and =
store a=20
  reference to it on the headline element using <CODE=20
  class=3D"code">$.fn.data</CODE>.                  </LI>
  <LI>Bind a click event to the headline that will use the <CODE=20
  class=3D"code">$.fn.load</CODE> method to load the appropriate content =
from=20
  <CODE class=3D"filename">/exercises/data/blog.html</CODE> into the =
target div.=20
  Don't forget to prevent the default action of the click event.         =
       =20
   </LI></OL></DIV>
<P>                Note that each blog headline in index.html includes a =
link to=20
the post. You'll need to leverage the href of that link to get the =
proper=20
content from blog.html. Once you have the href, here's one way to =
process it=20
into an ID that you can use as a selector in <CODE=20
class=3D"code">$.fn.load</CODE>:              </P>
<DIV id=3D"highlighter_397241" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">href =3D </CODE><CODE=20
      class=3D"string">'blog.html#post1'</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">tempArray =3D href.split(</CODE><CODE=20
      class=3D"string">'#'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">id =3D </CODE><CODE class=3D"string">'#'</CODE> =
<CODE class=3D"plain">+=20
      tempArray[1];</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                Remember to make liberal use of <CODE=20
class=3D"code">console.log</CODE> to make sure you're on the right path! =
         =20
   </P></DIV>
<DIV class=3D"section" title=3D"Load Content Using JSON">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Load Content Using JSON            =
   =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/specials.js</CODE>. Your task is =
to show=20
the user details about the special for a given day when the user selects =
a day=20
from the select dropdown.              </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist">
  <LI>
  <P>                      Append a target div after the form that's =
inside the=20
  #specials element; this will be where you put information about the =
special=20
  once you receive it.                    </P></LI>
  <LI>Bind to the change event of the select element; when the user =
changes the=20
  selection, send an Ajax request to <CODE=20
  class=3D"filename">/exercises/data/specials.json</CODE>.               =
   </LI>
  <LI>When the request returns a response, use the value the user =
selected in=20
  the select (hint: <CODE class=3D"code">$.fn.val</CODE>) to look up =
information=20
  about the special in the JSON response.                  </LI>
  <LI>
  <P>                      Add some HTML about the special to the target =
div you=20
  created.                    </P></LI>
  <LI>
  <P>                      Finally, because the form is now =
Ajax-enabled, remove=20
  the submit button from the form.                    =
</P></LI></OL></DIV>
<P>                Note that we're loading the JSON every time the user =
changes=20
their selection. How could we change the code so we only make the =
request once,=20
and then use a cached response when the user changes their choice in the =
select?=20
             </P></DIV></DIV></DIV>
<DIV id=3D"chapter-8" class=3D"chapter" title=3D"Plugins">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  Plugins               =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"What exactly is a plugin?">
<H2 class=3D"title">              What exactly is a plugin?            =
</H2>
<P>              A jQuery plugin is simply a new method that we use to =
extend=20
jQuery's prototype object. By extending the prototype object you enable =
all=20
jQuery objects to inherit any methods that you add. As established, =
whenever you=20
call <CODE class=3D"code">jQuery()</CODE> you're creating a new jQuery =
object,=20
with all of jQuery's methods inherited.            </P>
<P>              The idea of a plugin is to do something with a =
collection of=20
elements. You could consider each method that comes with the jQuery core =
a=20
plugin, like <CODE class=3D"code">fadeOut</CODE> or <CODE=20
class=3D"code">addClass</CODE>.            </P>
<P>              You can make your own plugins and use them privately in =
your=20
code or you can release them into the wild. There are thousands of =
jQuery=20
plugins available online. The barrier to creating a plugin of your own =
is so low=20
that you'll want to do it straight away!            </P></DIV>
<DIV class=3D"section" title=3D"How to create a basic plugin">
<H2 class=3D"title">              How to create a basic plugin           =
 </H2>
<P>              The notation for creating a typical plugin is as =
follows:      =20
     </P>
<DIV id=3D"highlighter_623471" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">($){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.fn.myNewPlugin =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// do =
something</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}(jQuery));</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV>
<P>              Don't let that confuse you though. The point of a =
jQuery plugin=20
is to extend jQuery's prototype object, and that's what's happening on =
this=20
line:            </P>
<DIV id=3D"highlighter_874758" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.fn.myNewPlugin =3D =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">() { =
</CODE><CODE=20
      =
class=3D"comments">//...</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DI=
V>
<P>              We wrap this assignment in an immediately-invoked =
function:    =20
       </P>
<DIV id=3D"highlighter_201055" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">($){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">//...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}(jQuery));</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV>
<P>              This has the effect of creating a "private" scope that =
allows=20
us to extend jQuery using the dollar symbol without having to risk the=20
possibility that the dollar has been overwritten by another library.     =
      =20
</P>
<P>              So our actual plugin, thus far, is this:            =
</P>
<DIV id=3D"highlighter_103687" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.fn.myNewPlugin =3D =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// do =
something</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              The <CODE class=3D"code">this</CODE> keyword within the =
new=20
plugin refers to the jQuery object on which the plugin is being called.  =
       =20
  </P>
<DIV id=3D"highlighter_187696" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">somejQueryObject =3D $(</CODE><CODE=20
      class=3D"string">'#something'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.fn.myNewPlugin =3D =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"keyword">this</CODE> =
<CODE class=3D"plain">=3D=3D=3D=20
      somejQueryObject);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">somejQueryObject.myNewPlugin();=20
      </CODE><CODE class=3D"comments">// alerts=20
'true'</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              Your typical jQuery object will contain references to =
any=20
number of DOM elements, and that's why jQuery objects are often referred =
to as=20
collections.            </P>
<P>              So, to do something with a collection we need to loop =
through=20
it, which is most easily achieved using jQuery's <CODE=20
class=3D"code">each()</CODE> method:            </P>
<DIV id=3D"highlighter_515215" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.fn.myNewPlugin =3D =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              jQuery's <CODE class=3D"code">each()</CODE> method, =
like most=20
other jQuery methods, returns a jQuery object, thus enabling what we've =
all come=20
to know and love as 'chaining' (<CODE=20
class=3D"code">$(...).css().attr()...</CODE>). We wouldn't want to break =
this=20
convention so we return the <CODE class=3D"code">this</CODE> object. =
Within this=20
loop you can do whatever you want with each element. Here's an example =
of a=20
small plugin using some of the techniques we've discussed:            =
</P>
<DIV id=3D"highlighter_15733" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">($){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.fn.showLinkLocation =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.filter(</CODE><CODE =
class=3D"string">'a'</CODE><CODE class=3D"plain">).each(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).append(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">' ('</CODE> <CODE class=3D"plain">+ =
$(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">).attr(</CODE><CODE =
class=3D"string">'href'</CODE><CODE class=3D"plain">)=20
      + </CODE><CODE =
class=3D"string">')'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}(jQuery));</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// Usage=20
  example:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a'</CODE><CODE=20
    =
class=3D"plain">).showLinkLocation();</CODE></TD></TR></TBODY></TABLE></D=
IV></DIV></DIV>
<P>              This handy plugin goes through all anchors in the =
collection=20
and appends the <CODE class=3D"code">href</CODE> attribute in brackets.  =
         =20
</P>
<DIV id=3D"highlighter_879980" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;!-- Before plugin is =
called:=20
      --&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;a =
href=3D</CODE><CODE class=3D"string">"page.html"</CODE><CODE=20
      =
class=3D"plain">&gt;Foo&lt;/a&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;!-- After plugin is =
called:=20
      --&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;a =
href=3D</CODE><CODE class=3D"string">"page.html"</CODE><CODE=20
      class=3D"plain">&gt;Foo=20
(page.html)&lt;/a&gt;</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              Our plugin can be optimised though:            </P>
<DIV id=3D"highlighter_781182" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">($){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.fn.showLinkLocation =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.filter(</CODE><CODE =
class=3D"string">'a'</CODE><CODE class=3D"plain">).append(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"string">' ('</CODE> =
<CODE=20
      class=3D"plain">+ </CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">.href=20
      + </CODE><CODE class=3D"string">')'</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}(jQuery));</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV>
<P>              We're using the <CODE class=3D"code">append</CODE> =
method's=20
capability to accept a callback, and the return value of that callback =
will=20
determine what is appended to each element in the collection. Notice =
also that=20
we're not using the <CODE class=3D"code">attr</CODE> method to retrieve =
the <CODE=20
class=3D"code">href</CODE> attribute, because the native DOM API gives =
us easy=20
access with the aptly named <CODE class=3D"code">href</CODE> property.   =
        =20
</P>
<P>              Here's another example of a plugin. This one doesn't =
require us=20
to loop through every elememt with the <CODE =
class=3D"code">each()</CODE> method.=20
Instead, we're simply going to delegate to other jQuery methods =
directly:       =20
    </P>
<DIV id=3D"highlighter_707127" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">($){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.fn.fadeInAndAddClass =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(duration, =
className)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.fadeIn(duration, </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
class=3D"plain">(){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).addClass(className);</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}(jQuery));</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// Usage=20
  example:</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a'</CODE><CODE =
class=3D"plain">).fadeInAndAddClass(400,=20
      </CODE><CODE class=3D"string">'finishedFading'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V>
<DIV class=3D"section" title=3D"Finding &amp; Evaluating Plugins">
<H2 class=3D"title">              Finding &amp; Evaluating Plugins       =
    =20
</H2>
<P>              Plugins extend the basic jQuery functionality, and one =
of the=20
most celebrated aspects of the library is its extensive plugin =
ecosystem. From=20
table sorting to form validation to autocompletion ... if =
there=E2=80=99s a need for it,=20
chances are good that someone has written a plugin for it.            =
</P>
<P>              The quality of jQuery plugins varies widely. Many =
plugins are=20
extensively tested and well-maintained, but others are hastily created =
and then=20
ignored. More than a few fail to follow best practices.            </P>
<P>              Google is your best initial resource for locating =
plugins,=20
though the jQuery team is working on an improved plugin repository. Once =
you=E2=80=99ve=20
identified some options via a Google search, you may want to consult the =
jQuery=20
mailing list or the #jquery IRC channel to get input from others.        =
   =20
</P>
<P>              When looking for a plugin to fill a need, do your =
homework.=20
Ensure that the plugin is well-documented, and look for the author to =
provide=20
lots of examples of its use. Be wary of plugins that do far more than =
you need;=20
they can end up adding substantial overhead to your page. For more tips =
on=20
spotting a subpar plugin, read <A class=3D"ulink" =
href=3D"http://remysharp.com/2010/06/03/signs-of-a-poorly-written-jquery-=
plugin/">Signs=20
of a poorly written jQuery plugin</A> by Remy Sharp.            </P>
<P>              Once you choose a plugin, you=E2=80=99ll need to add it =
to your page.=20
Download the plugin, unzip it if necessary, place it your =
application=E2=80=99s=20
directory structure, then include the plugin in your page using a script =
tag=20
(after you include jQuery).            </P></DIV>
<DIV class=3D"section" title=3D"Writing Plugins">
<H2 class=3D"title">              Writing Plugins            </H2>
<P>              Sometimes you want to make a piece of functionality =
available=20
throughout your code; for example, perhaps you want a single method you =
can call=20
on a jQuery selection that performs a series of operations on the =
selection. In=20
this case, you may want to write a plugin.            </P>
<P>              Most plugins are simply methods created in the <CODE =
class=3D"code">$.fn</CODE>=20
namespace. jQuery guarantees that a method called on a jQuery object =
will be=20
able to access that jQuery object as <CODE class=3D"code">this</CODE> =
inside the=20
method. In return, your plugin needs to guarantee that it returns the =
same=20
object it received, unless explicitly documented otherwise.            =
</P>
<P>              Here is an example of a simple plugin:            </P>
<DIV id=3D"example-8.1" class=3D"example">
<P class=3D"title">Example 8.1:                 Creating a plugin to add =
and=20
remove a class on hover              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_63553" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// defining the=20
  plugin</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">($){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.fn.hoverClass =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(c)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.hover(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">() { =
$(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE =
class=3D"plain">).toggleClass(c);=20
    }</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})(jQuery);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// using the=20
  plugin</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'li'</CODE><CODE =
class=3D"plain">).hoverClass(</CODE><CODE=20
      class=3D"string">'hover'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              For more on plugin development, read Mike Alsup's =
essential=20
post, <A class=3D"ulink" =
href=3D"http://www.learningjquery.com/2007/10/a-plugin-development-patter=
n">A=20
Plugin Development Pattern</A>. In it, he creates a plugin called <CODE =
class=3D"code">$.fn.hilight</CODE>,=20
which provides support for the metadata plugin if it's present, and =
provides a=20
centralized method for setting global and instance options for the =
plugin.      =20
     </P>
<DIV id=3D"example-8.2" class=3D"example">
<P class=3D"title">Example 8.2:                 The Mike Alsup jQuery =
Plugin=20
Development Pattern              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_884449" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// create=20
  closure</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">($)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"comments">//=20
      plugin definition</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"plain">$.fn.hilight=20
      =3D </CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(options) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">debug(</CODE><CODE =
class=3D"keyword">this</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      build main options before element=20
iteration</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">opts =3D =
$.extend({},=20
      $.fn.hilight.defaults, =
options);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      iterate and reformat each matched =
element</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$</CODE><CODE=20
      class=3D"keyword">this</CODE> <CODE class=3D"plain">=3D =
$(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      build element specific =
options</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"keyword">var</CODE>=20
      <CODE class=3D"plain">o =3D $.meta ? $.extend({}, opts, =
$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.data()) : =
opts;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      update element styles</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
class=3D"plain">.css({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">backgroundColor:=20
o.background,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">color: =
o.foreground</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"keyword">var</CODE>=20
      <CODE class=3D"plain">markup =3D $</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.html();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      call our format function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">markup=20
      =3D =
$.fn.hilight.format(markup);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.html(markup);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"comments">//=20
      private function for =
debugging</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"keyword">function</CODE>=20
      <CODE class=3D"plain">debug($obj) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(window.console =
&amp;&amp;=20
      window.console.log)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>33</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">window.console.log(</CODE><CODE=20
      class=3D"string">'hilight selection count: '</CODE> <CODE =
class=3D"plain">+=20
      $obj.size());</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>34</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>35</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>36</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"comments">//=20
      define and expose our format =
function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>37</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>38</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$.fn.hilight.format=20
      =3D </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(txt)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>39</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"string">'&lt;strong&gt;'</CODE>=20
      <CODE class=3D"plain">+ txt + </CODE><CODE=20
      class=3D"string">'&lt;/strong&gt;'</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>40</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>41</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>42</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"comments">//=20
      plugin defaults</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>43</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>44</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$.fn.hilight.defaults=20
      =3D {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>45</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">foreground: </CODE><CODE =
class=3D"string">'red'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>46</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">background: </CODE><CODE=20
  class=3D"string">'yellow'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>47</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>48</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>49</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// end of=20
  closure</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>50</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"comments">//</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>51</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})(jQuery);</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV></DIV></DIV></DIV>
<H2 class=3D"title">            Writing Stateful Plugins with the jQuery =
UI Widget=20
Factory          </H2>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            This section is based, with permission, on the blog post =
<A=20
class=3D"ulink" =
href=3D"http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugi=
ns/">Building=20
Stateful jQuery Plugins</A> by Scott Gonzalez.          </P></DIV>
<P>            While most existing jQuery plugins are stateless =
=E2=80=94 that is, we=20
call them on an element and that is the extent of our interaction with =
the=20
plugin =E2=80=94&nbsp;there=E2=80=99s a large set of functionality that =
doesn=E2=80=99t fit into the=20
basic plugin pattern.          </P>
<P>            In order to fill this gap, jQuery UI has implemented a =
more=20
advanced plugin system. The new system manages state, allows multiple =
functions=20
to be exposed via a single plugin, and provides various extension =
points. This=20
system is called the widget factory and is exposed as <CODE=20
class=3D"code">jQuery.widget</CODE> as part of jQuery UI 1.8; however, =
it can be=20
used independently of jQuery UI.          </P>
<P>            To demonstrate the capabilities of the widget factory, =
we'll=20
build a simple progress bar plugin.          </P>
<P>            To start, we=E2=80=99ll create a progress bar that just =
lets us set the=20
progress once. As we can see below, this is done by calling <CODE=20
class=3D"code">jQuery.widget</CODE> with two parameters: the name of the =
plugin to=20
create and an object literal containing functions to support our plugin. =
When=20
our plugin gets called, it will create a new plugin instance and all =
functions=20
will be executed within the context of that instance. This is different =
from a=20
standard jQuery plugin in two important ways. First, the context is an =
object,=20
not a DOM element. Second, the context is always a single object, never =
a=20
collection.          </P>
<DIV id=3D"example-8.3" class=3D"example">
<P class=3D"title">Example 8.3:               A simple, stateful plugin =
using the=20
jQuery UI widget factory            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_90089" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.widget(</CODE><CODE =
class=3D"string">"nmk.progressbar"</CODE><CODE=20
      class=3D"plain">, {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_create:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.element</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.addClass(</CODE><CODE=20
      class=3D"string">"progressbar"</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">.text(progress);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>            The name of the plugin must contain a namespace; in this =
case=20
we=E2=80=99ve used the <CODE class=3D"code">nmk</CODE> namespace. There =
is a limitation=20
that namespaces be exactly one level deep =E2=80=94 that is, we can't =
use a namespace=20
like <CODE class=3D"code">nmk.foo</CODE>. We can also see that the =
widget factory=20
has provided two properties for us. <CODE =
class=3D"code">this.element</CODE> is a=20
jQuery object containing exactly one element. If our plugin is called on =
a=20
jQuery object containing multiple elements, a separate plugin instance =
will be=20
created for each element, and each instance will have its own <CODE=20
class=3D"code">this.element</CODE>. The second property, <CODE=20
class=3D"code">this.options</CODE>, is a hash containing key/value pairs =
for all=20
of our plugin=E2=80=99s options. These options can be passed to our =
plugin as shown=20
here.          </P>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            In our example we use the <CODE class=3D"code">nmk</CODE> =

namespace. The <CODE class=3D"code">ui</CODE> namespace is reserved for =
official=20
jQuery UI plugins. When building your own plugins, you should create =
your own=20
namespace. This makes it clear where the plugin came from and whether it =
is part=20
of a larger collection.          </P></DIV>
<DIV id=3D"example-8.4" class=3D"example">
<P class=3D"title">Example 8.4:               Passing options to a =
widget         =20
  </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_958158" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">"&lt;div&gt;&lt;/div&gt;"</CODE><CODE=20
    class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.appendTo( </CODE><CODE =
class=3D"string">"body"</CODE> <CODE=20
      class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.progressbar({ value: 20=20
});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>            When we call <CODE class=3D"code">jQuery.widget</CODE> it =
extends=20
jQuery by adding a method to <CODE class=3D"code">jQuery.fn</CODE> (the =
same way=20
we'd create a standard plugin). The name of the function it adds is =
based on the=20
name you pass to <CODE class=3D"code">jQuery.widget</CODE>, without the =
namespace;=20
in our case it will create <CODE =
class=3D"code">jQuery.fn.progressbar</CODE>. The=20
options passed to our plugin get set in <CODE =
class=3D"code">this.options</CODE>=20
inside of our plugin instance. As shown below, we can specify default =
values for=20
any of our options. When designing your API, you should figure out the =
most=20
common use case for your plugin so that you can set appropriate default =
values=20
and make all options truly optional.          </P>
<DIV id=3D"example-8.5" class=3D"example">
<P class=3D"title">Example 8.5:               Setting default options =
for a widget=20
           </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_718560" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.widget(</CODE><CODE =
class=3D"string">"nmk.progressbar"</CODE><CODE=20
      class=3D"plain">, {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      default options</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">options:=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">value: 0</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_create:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.element</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.addClass( </CODE><CODE =
class=3D"string">"progressbar"</CODE>=20
      <CODE class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.text( progress =
);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"titlepage">
<H3 class=3D"title">              Adding Methods to a Widget           =20
</H3></DIV>
<P>            Now that we can initialize our progress bar, =
we=E2=80=99ll add the=20
ability to perform actions by calling methods on our plugin instance. To =
define=20
a plugin method, we just include the function in the object literal that =
we pass=20
to <CODE class=3D"code">jQuery.widget</CODE>. We can also define =
=E2=80=9Cprivate=E2=80=9D methods=20
by prepending an underscore to the function name.          </P>
<DIV id=3D"example-8.6" class=3D"example">
<P class=3D"title">Example 8.6:               Creating widget methods    =
       =20
</P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_675906" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.widget(</CODE><CODE =
class=3D"string">"nmk.progressbar"</CODE><CODE=20
      class=3D"plain">, {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">options:=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">value: 0</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_create:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.element</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.addClass(</CODE><CODE=20
      class=3D"string">"progressbar"</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">.text(progress);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      create a public method</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">value:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(value)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// no value passed, act as a=20
getter</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(value =3D=3D=3D =
undefined)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">.options.value;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// value passed, act as a=20
setter</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">} </CODE><CODE class=3D"keyword">else</CODE> <CODE =
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
=3D=20
      </CODE><CODE class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">._constrain(value);</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">.element.text(progress);</CODE></TD></TR></TBODY></TABLE>=
</DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      create a private method</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">_constrain: </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(value)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(value &gt; 100) =

  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">value =3D =
100;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(value &lt; 0)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">value =3D =
0;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>33</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>34</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE=20
  class=3D"plain">value;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>35</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>36</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>            To call a method on a plugin instance, you pass the name =
of the=20
method to the jQuery plugin. If you are calling a method that accepts=20
parameters, you simply pass those parameters after the method name.      =
   =20
</P>
<DIV id=3D"example-8.7" class=3D"example">
<P class=3D"title">Example 8.7:               Calling methods on a =
plugin instance=20
           </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_875184" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D $(</CODE><CODE=20
      class=3D"string">"&lt;div&gt;&lt;/div&gt;"</CODE><CODE=20
    class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.appendTo(</CODE><CODE =
class=3D"string">"body"</CODE><CODE=20
      class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.progressbar({ value: 20=20
});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// get the current=20
    value</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">alert(bar.progressbar(</CODE><CODE=20
      class=3D"string">"value"</CODE><CODE=20
class=3D"plain">));</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// update the=20
  value</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">bar.progressbar(</CODE><CODE=20
      class=3D"string">"value"</CODE><CODE class=3D"plain">,=20
  50);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// get the current =
value=20
      again</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">alert(bar.progressbar(</CODE><CODE=20
      class=3D"string">"value"</CODE><CODE=20
class=3D"plain">));</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            Executing methods by passing the method name to the same =
jQuery=20
function that was used to initialize the plugin may seem odd. This is =
done to=20
prevent pollution of the jQuery namespace while maintaining the ability =
to chain=20
method calls.          </P></DIV>
<DIV class=3D"section" title=3D"Working with Widget Options">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Working with Widget Options          =
   =20
</H3></DIV>
<P>              One of the methods that is automatically available to =
our=20
plugin is the <CODE class=3D"code">option</CODE> method. The option =
method allows=20
you to get and set options after initialization. This method works =
exactly like=20
jQuery=E2=80=99s css and attr methods: you can pass just a name to use =
it as a setter, a=20
name and value to use it as a single setter, or a hash of name/value =
pairs to=20
set multiple values. When used as a getter, the plugin will return the =
current=20
value of the option that corresponds to the name that was passed in. =
When used=20
as a setter, the plugin=E2=80=99s <CODE class=3D"code">_setOption</CODE> =
method will be=20
called for each option that is being set. We can specify a <CODE=20
class=3D"code">_setOption</CODE> method in our plugin to react to option =
changes. =20
          </P>
<DIV id=3D"example-8.8" class=3D"example">
<P class=3D"title">Example 8.8:                 Responding when an =
option is set  =20
           </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_25508" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.widget(</CODE><CODE =
class=3D"string">"nmk.progressbar"</CODE><CODE=20
      class=3D"plain">, {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">options:=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">value: 0</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_create:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.element.addClass(</CODE><CODE=20
      class=3D"string">"progressbar"</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">._update();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">_setOption: </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(key, =
value)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options[key] =
=3D=20
      value;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">._update();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_update:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">.element.text(progress);</CODE></TD></TR></TBODY></TABLE>=
</DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"section" title=3D"Adding Callbacks">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Adding Callbacks              =
</H3></DIV>
<P>              One of the easiest ways to make your plugin extensible =
is to=20
add callbacks so users can react when the state of your plugin changes. =
We can=20
see below how to add a callback to our progress bar to signify when the =
progress=20
has reached 100%. The <CODE class=3D"code">_trigger</CODE> method takes =
three=20
parameters: the name of the callback, a native event object that =
initiated the=20
callback, and a hash of data relevant to the event. The callback name is =
the=20
only required parameter, but the others can be very useful for users who =
want to=20
implement custom functionality on top of your plugin. For example, if we =
were=20
building a draggable plugin, we could pass the native mousemove event =
when=20
triggering a drag callback; this would allow users to react to the drag =
based on=20
the x/y coordinates provided by the event object.            </P>
<DIV id=3D"example-8.9" class=3D"example">
<P class=3D"title">Example 8.9:                 Providing callbacks for =
user=20
extension              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_108433" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.widget(</CODE><CODE =
class=3D"string">"nmk.progressbar"</CODE><CODE=20
      class=3D"plain">, {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">options:=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">value: 0</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_create:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.element.addClass(</CODE><CODE=20
      class=3D"string">"progressbar"</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">._update();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">_setOption: </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(key, =
value)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options[key] =
=3D=20
      value;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">._update();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_update:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">.element.text(progress);</CODE></TD></TR></TBODY></TABLE>=
</DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.options.value =3D=3D 100) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE =
class=3D"plain">._trigger(</CODE><CODE=20
      class=3D"string">"complete"</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"keyword">null</CODE><CODE=20
      class=3D"plain">, { value: 100 =
});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV>
<P>              Callback functions are essentially just additional =
options, so=20
you can get and set them just like any other option. Whenever a callback =
is=20
executed, a corresponding event is triggered as well. The event type is=20
determined by concatenating the plugin name and the callback name. The =
callback=20
and event both receive the same two parameters: an event object and a =
hash of=20
data relevant to the event, as we=E2=80=99ll see below.            </P>
<P>              If your plugin has functionality that you want to allow =
the=20
user to prevent, the best way to support this is by creating cancelable=20
callbacks. Users can cancel a callback, or its associated event, the =
same way=20
they cancel any native event: by calling <CODE=20
class=3D"code">event.preventDefault()</CODE> or using <CODE =
class=3D"code">return=20
false</CODE>. If the user cancels the callback, the <CODE=20
class=3D"code">_trigger</CODE> method will return false so you can =
implement the=20
appropriate functionality within your plugin.            </P>
<DIV id=3D"example-8.10" class=3D"example">
<P class=3D"title">Example 8.10:                 Binding to widget =
events         =20
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_524432" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D $(</CODE><CODE=20
      class=3D"string">"&lt;div&gt;&lt;/div&gt;"</CODE><CODE=20
    class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.appendTo(</CODE><CODE =
class=3D"string">"body"</CODE><CODE=20
      class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">.progressbar({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">complete: </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(event, data) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">alert( </CODE><CODE class=3D"string">"Callbacks =
are=20
      great!"</CODE> <CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">})</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.bind(</CODE><CODE=20
      class=3D"string">"progressbarcomplete"</CODE><CODE =
class=3D"plain">,=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(event,=20
      data) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">"Events bubble =
and support=20
      many handlers for extreme flexibility."</CODE><CODE=20
    class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">alert(</CODE><CODE class=3D"string">"The progress =
bar value is=20
      "</CODE> <CODE class=3D"plain">+=20
data.value);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">bar.progressbar(</CODE><CODE=20
      class=3D"string">"option"</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"string">"value"</CODE><CODE=20
      class=3D"plain">,=20
100);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sidebar" title=3D"The Widget Factory: Under the Hood">
<P class=3D"title"><B>The Widget Factory: Under the Hood</B></P>
<P>                When you call <CODE =
class=3D"code">jQuery.widget</CODE>, it=20
creates a constructor function for your plugin and sets the object =
literal that=20
you pass in as the prototype for your plugin instances. All of the =
functionality=20
that automatically gets added to your plugin comes from a base widget =
prototype,=20
which is defined as <CODE class=3D"code">jQuery.Widget.prototype</CODE>. =
When a=20
plugin instance is created, it is stored on the original DOM element =
using <CODE=20
class=3D"code">jQuery.data</CODE>, with the plugin name as the key.      =
       =20
</P>
<P>                Because the plugin instance is directly linked to the =
DOM=20
element, you can access the plugin instance directly instead of going =
through=20
the exposed plugin method if you want. This will allow you to call =
methods=20
directly on the plugin instance instead of passing method names as =
strings and=20
will also give you direct access to the plugin=E2=80=99s properties.     =
         </P>
<DIV id=3D"highlighter_688750" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">bar =3D $(</CODE><CODE=20
      class=3D"string">"&lt;div&gt;&lt;/div&gt;"</CODE><CODE=20
    class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.appendTo(</CODE><CODE =
class=3D"string">"body"</CODE><CODE=20
      class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">.progressbar()</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.data(</CODE><CODE =
class=3D"string">"progressbar"</CODE> <CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// call a method =
directly on=20
      the plugin instance</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">bar.option(</CODE><CODE =
class=3D"string">"value"</CODE><CODE=20
      class=3D"plain">, 50);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// access properties =
on the=20
      plugin instance</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">alert(bar.options.value);</CODE></TD></TR></TBODY></TABLE=
></DIV></DIV></DIV>
<P>                One of the biggest benefits of having a constructor =
and=20
prototype for a plugin is the ease of extending the plugin. By adding or =

modifying methods on the plugin=E2=80=99s prototype, we can modify the =
behavior of all=20
instances of our plugin. For example, if we wanted to add a method to =
our=20
progress bar to reset the progress to 0% we could add this method to the =

prototype and it would instantly be available to be called on any plugin =

instance.              </P>
<DIV id=3D"highlighter_175605" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$.nmk.progressbar.prototype.reset=20
      =3D </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE =
class=3D"plain">._setOption(</CODE><CODE=20
      class=3D"string">"value"</CODE><CODE class=3D"plain">,=20
0);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<DIV class=3D"section" title=3D"Cleaning Up">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Cleaning Up              </H3></DIV>
<P>              In some cases, it will make sense to allow users to =
apply and=20
then later unapply your plugin. You can accomplish this via the destroy =
method.=20
Within the <CODE class=3D"code">destroy</CODE> method, you should undo =
anything=20
your plugin may have done during initialization or later use. The <CODE =
class=3D"code">destroy</CODE>=20
method is automatically called if the element that your plugin instance =
is tied=20
to is removed from the DOM, so this can be used for garbage collection =
as well.=20
The default <CODE class=3D"code">destroy</CODE> method removes the link =
between=20
the DOM element and the plugin instance, so it=E2=80=99s important to =
call the base=20
function from your plugin=E2=80=99s <CODE class=3D"code">destroy</CODE> =
method.           =20
</P>
<DIV id=3D"example-8.11" class=3D"example">
<P class=3D"title">Example 8.11:                 Adding a destroy method =
to a=20
widget              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_76327" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.widget( </CODE><CODE =
class=3D"string">"nmk.progressbar"</CODE><CODE=20
      class=3D"plain">, {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">options:=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">value: 0</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_create:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.element.addClass(</CODE><CODE=20
      class=3D"string">"progressbar"</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">._update();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">_setOption: </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(key, =
value)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options[key] =
=3D=20
      value;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">._update();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">_update:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">progress =3D =
</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.options.value =
+=20
      </CODE><CODE class=3D"string">"%"</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">.element.text(progress);</CODE></TD></TR></TBODY></TABLE>=
</DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.options.value =3D=3D 100 ) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE =
class=3D"plain">._trigger(</CODE><CODE=20
      class=3D"string">"complete"</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"keyword">null</CODE><CODE=20
      class=3D"plain">, { value: 100 =
});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">destroy:=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.element</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.removeClass(</CODE><CODE=20
      class=3D"string">"progressbar"</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.text(</CODE><CODE class=3D"string">""</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// call the base destroy=20
function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$.Widget.prototype.destroy.call(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"section" title=3D"Conclusion">
<DIV class=3D"titlepage">
<H3 class=3D"title">                Conclusion              </H3></DIV>
<P>              The widget factory is only one way of creating stateful =

plugins. There are a few different models that can be used and each have =
their=20
own advantages and disadvantages. The widget factory solves lots of =
common=20
problems for you and can greatly improve productivity, it also greatly =
improves=20
code reuse, making it a great fit for jQuery UI as well as many other =
stateful=20
plugins.            </P></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">              Exercises            </H2>
<DIV class=3D"section" title=3D"Make a Table Sortable">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Make a Table Sortable              =
 =20
</H3></DIV>
<P>                For this exercise, your task is to identify, =
download, and=20
implement a table sorting plugin on the index.html page. When =
you=E2=80=99re done, all=20
columns in the table on the page should be sortable.              =
</P></DIV>
<DIV class=3D"section" title=3D"Write a Table-Striping Plugin">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Write a Table-Striping Plugin      =
         =20
</H3></DIV>
<P>                Open the file <CODE=20
class=3D"filename">/exercises/index.html</CODE> in your browser. Use the =
file=20
<CODE class=3D"filename">/exercises/js/stripe.js</CODE>. Your task is to =
write a=20
plugin called "stripe" that you can call on any table element. When the =
plugin=20
is called on a table element, it should change the color of odd rows in =
the=20
table body to a user-specified color.              </P>
<DIV id=3D"highlighter_738134" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myTable'</CODE><CODE =
class=3D"plain">).stripe(</CODE><CODE=20
      class=3D"string">'#cccccc'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                Don't forget to return the table so other methods can =
be=20
chained after the plugin!              </P></DIV></DIV></DIV></DIV>
<DIV class=3D"part" title=3D"Part&nbsp;III.&nbsp;Advanced Topics">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H1 class=3D"title">            Part&nbsp;III.&nbsp;Advanced Topics      =
   =20
</H1></DIV></DIV></DIV>
<DIV class=3D"article" title=3D"This Section is a Work in Progress">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">              This Section is a Work in Progress     =
      =20
</H2></DIV></DIV>
<HR>
</DIV>
<P>        Please visit <A class=3D"ulink" =
href=3D"http://github.com/rmurphey/jqfundamentals">http://github.com/rmur=
phey/jqfundamentals</A>=20
to contribute!      </P></DIV>
<DIV id=3D"chapter-9" class=3D"chapter" title=3D"Performance Best =
Practices">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  Performance Best Practices         =
      =20
</H2></DIV></DIV></DIV>
<P>            This chapter covers a number of jQuery and JavaScript =
best=20
practices, in no particular order. Many of the best practices in this =
chapter=20
are based on the <A class=3D"ulink" =
href=3D"http://paulirish.com/perf">jQuery=20
Anti-Patterns for Performance</A> presentation by Paul Irish.          =
</P>
<DIV class=3D"sect1" title=3D"Cache length during loops">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Cache length during loops        =
         =20
</H2></DIV></DIV></DIV>
<P>              In a for loop, don't access the length property of an =
array=20
every time; cache it beforehand.            </P>
<DIV id=3D"highlighter_921558" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myLength =3D =
myArray.length;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">for</CODE> <CODE=20
      class=3D"plain">(</CODE><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">i =3D 0; i &lt; myLength; i++)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">// do=20
      stuff</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
>
<DIV class=3D"sect1" title=3D"Append new content outside of a loop">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Append new content outside of a =
loop      =20
           </H2></DIV></DIV></DIV>
<P>              Touching the DOM comes at a cost; if you're adding a =
lot of=20
elements to the DOM, do it all at once, not one at a time.            =
</P>
<DIV id=3D"highlighter_367099" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// this is=20
  bad</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.each(myArray, =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i, item)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">newListItem =3D =
</CODE><CODE=20
      class=3D"string">'&lt;li&gt;'</CODE> <CODE class=3D"plain">+ item =
+=20
      </CODE><CODE class=3D"string">'&lt;/li&gt;'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#ballers'</CODE><CODE =
class=3D"plain">).append(newListItem);</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// better: do=20
  this</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">frag =3D=20
  =
document.createDocumentFragment();</CODE></TD></TR></TBODY></TABLE></DIV>=

<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.each(myArray, =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i, item)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">newListItem =3D =
</CODE><CODE=20
      class=3D"string">'&lt;li&gt;'</CODE> <CODE class=3D"plain">+ item =
+=20
      </CODE><CODE class=3D"string">'&lt;/li&gt;'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">frag.appendChild(newListItem);</CODE></TD></TR></TBODY></=
TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#ballers'</CODE><CODE=20
      =
class=3D"plain">)[0].appendChild(frag);</CODE></TD></TR></TBODY></TABLE><=
/DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// or do=20
  this</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myHtml =3D </CODE><CODE =
class=3D"string">''</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.each(myArray, =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i, item)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">html +=3D=20
      </CODE><CODE class=3D"string">'&lt;li&gt;'</CODE> <CODE =
class=3D"plain">+ item=20
      + </CODE><CODE class=3D"string">'&lt;/li&gt;'</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#ballers'</CODE><CODE=20
    =
class=3D"plain">).html(myHtml);</CODE></TD></TR></TBODY></TABLE></DIV></D=
IV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Keep things DRY">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Keep things DRY                  =

</H2></DIV></DIV></DIV>
<P>              Don't repeat yourself; if you're repeating yourself, =
you're=20
doing it wrong.            </P>
<DIV id=3D"highlighter_689937" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
BAD</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($eventfade.data(</CODE><CODE=20
      class=3D"string">'currently'</CODE><CODE class=3D"plain">) !=3D =
</CODE><CODE=20
      class=3D"string">'showing'</CODE><CODE class=3D"plain">)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">$eventfade.stop();</CODE></TD></TR></TBODY></TABLE></DIV>=

<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($eventhover.data(</CODE><CODE=20
      class=3D"string">'currently'</CODE><CODE class=3D"plain">) !=3D =
</CODE><CODE=20
      class=3D"string">'showing'</CODE><CODE class=3D"plain">)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">$eventhover.stop();</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($spans.data(</CODE><CODE=20
      class=3D"string">'currently'</CODE><CODE class=3D"plain">) !=3D =
</CODE><CODE=20
      class=3D"string">'showing'</CODE><CODE class=3D"plain">)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">$spans.stop();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
GOOD!!</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$elems =3D [$eventfade, $eventhover,=20
  $spans];</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.each($elems, =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(i,elem) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE =
class=3D"plain">(elem.data(</CODE><CODE=20
      class=3D"string">'currently'</CODE><CODE class=3D"plain">) !=3D =
</CODE><CODE=20
      class=3D"string">'showing'</CODE><CODE class=3D"plain">)=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">elem.stop();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV>
<DIV class=3D"sect1" title=3D"Beware anonymous functions">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Beware anonymous functions       =
         =20
 </H2></DIV></DIV></DIV>
<P>              Anonymous functions bound everywhere are a pain. =
They're=20
difficult to debug, maintain, test, or reuse. Instead, use an object =
literal to=20
organize and name your handlers and callbacks.            </P>
<DIV id=3D"highlighter_86835" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
BAD</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$(document).ready(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#magic'</CODE><CODE =
class=3D"plain">).click(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#yayeffects'</CODE><CODE=20
      class=3D"plain">).slideUp(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// ...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#happiness'</CODE><CODE=20
      class=3D"plain">).load(url + </CODE><CODE class=3D"string">'=20
      #unicorns'</CODE><CODE class=3D"plain">, </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// ...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
BETTER</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">PI =3D {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">onReady=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#magic'</CODE><CODE =
class=3D"plain">).click(PI.candyMtn);</CODE></TD></TR></TBODY></TABLE></D=
IV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#happiness'</CODE><CODE=20
      class=3D"plain">).load(PI.url + </CODE><CODE class=3D"string">'=20
      #unicorns'</CODE><CODE class=3D"plain">,=20
PI.unicornCb);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">candyMtn=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#yayeffects'</CODE><CODE=20
      =
class=3D"plain">).slideUp(PI.slideCb);</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">slideCb=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">() { ...=20
      },</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">unicornCb : </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">() { ...=20
  }</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">$(document).ready(PI.onReady);</CODE></TD></TR></TBODY></=
TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Optimize Selectors">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Optimize Selectors               =
  =20
</H2></DIV></DIV></DIV>
<P>              Selector optimization is less important than it used to =
be, as=20
more browsers implement <CODE =
class=3D"code">document.querySelectorAll()</CODE>=20
and the burden of selection shifts from jQuery to the browser. However, =
there=20
are still some tips to keep in mind.            </P>
<DIV class=3D"sect2" title=3D"ID-Based Selectors">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  ID-Based Selectors               =20
</H3></DIV>
<P>                Beginning your selector with an ID is always best.    =
       =20
  </P>
<DIV id=3D"highlighter_130561" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
fast</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#container div.robotarm'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
  super-fast</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#container'</CODE><CODE =
class=3D"plain">).find(</CODE><CODE=20
      class=3D"string">'div.robotarm'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                The <CODE class=3D"code">$.fn.find</CODE> approach is =
faster=20
because the first selection is handled without going through the Sizzle =
selector=20
engine =E2=80=94 ID-only selections are handled using <CODE=20
class=3D"code">document.getElementById()</CODE>, which is extremely fast =
because=20
it is native to the browser.              </P></DIV>
<DIV class=3D"sect2" title=3D"Specificity">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Specificity                =
</H3></DIV>
<P>                Be specific on the right-hand side of your selector, =
and less=20
specific on the left.              </P>
<DIV id=3D"highlighter_507180" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
  unoptimized</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'div.data .gonzalez'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
  optimized</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.data td.gonzalez'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                Use <CODE class=3D"code">tag.class</CODE> if possible =
on your=20
right-most selector, and just <CODE class=3D"code">tag</CODE> or just =
<CODE class=3D"code">.class</CODE>=20
on the left.              </P>
<P>                Avoid excessive specificity.              </P>
<DIV id=3D"highlighter_701670" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.data table.attendees td.gonzalez'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// better: drop the =
middle if=20
      possible</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.data td.gonzalez'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                A "flatter" DOM also helps improve selector =
performance, as=20
the selector engine has fewer layers to traverse when looking for an =
element.   =20
          </P></DIV>
<DIV class=3D"sect2" title=3D"Avoid the Universal Selector">
<DIV class=3D"titlepage">
<H3 class=3D"title">                  Avoid the Universal Selector       =
        =20
</H3></DIV>
<P>                Selections that specify or imply that a match could =
be found=20
anywhere can be very slow.              </P>
<DIV id=3D"highlighter_960407" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.buttons &gt; *'</CODE><CODE =
class=3D"plain">);&nbsp;=20
      </CODE><CODE class=3D"comments">// extremely=20
expensive</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.buttons'</CODE><CODE =
class=3D"plain">).children();&nbsp;=20
      </CODE><CODE class=3D"comments">// much=20
better</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.gender :radio'</CODE><CODE =
class=3D"plain">);&nbsp;=20
      </CODE><CODE class=3D"comments">// implied universal=20
  selection</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.gender *:radio'</CODE><CODE class=3D"plain">); =
</CODE><CODE=20
      class=3D"comments">// same thing, explicit=20
now</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.gender input:radio'</CODE><CODE =
class=3D"plain">);=20
      </CODE><CODE class=3D"comments">// much=20
better</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Use Event Delegation">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Use Event Delegation             =
    =20
</H2></DIV></DIV></DIV>
<P>              Event delegation allows you to bind an event handler to =
one=20
container element (for example, an unordered list) instead of multiple =
contained=20
elements (for example, list items). jQuery makes this easy with =
$.fn.live and=20
$.fn.delegate. Where possible, you should use <CODE=20
class=3D"code">$.fn.delegate</CODE> instead of <CODE=20
class=3D"code">$.fn.live</CODE>, as it eliminates the need for an =
unnecessary=20
selection, and its explicit context (vs. <CODE =
class=3D"code">$.fn.live</CODE>'s=20
context of <CODE class=3D"code">document</CODE>) reduces overhead by =
approximately=20
80%.            </P>
<P>              In addition to performance benefits, event delegation =
also=20
allows you to add new contained elements to your page without having to =
re-bind=20
the event handlers for them as they're added.            </P>
<DIV id=3D"highlighter_550662" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// bad (if there are =
lots of=20
      list items)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'li.trigger'</CODE><CODE=20
      =
class=3D"plain">).click(handlerFn);</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// better: event =
delegation=20
      with $.fn.live</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'li.trigger'</CODE><CODE =
class=3D"plain">).live(</CODE><CODE=20
      class=3D"string">'click'</CODE><CODE class=3D"plain">,=20
  handlerFn);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// best: event =
delegation with=20
      $.fn.delegate</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// allows you to =
specify a=20
      context easily</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myList'</CODE><CODE =
class=3D"plain">).delegate(</CODE><CODE=20
      class=3D"string">'li.trigger'</CODE><CODE class=3D"plain">, =
</CODE><CODE=20
      class=3D"string">'click'</CODE><CODE class=3D"plain">,=20
  handlerFn);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Detach Elements to Work With Them">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Detach Elements to Work With =
Them         =20
        </H2></DIV></DIV></DIV>
<P>              The DOM is slow; you want to avoid manipulating it as =
much as=20
possible. jQuery introduced <CODE class=3D"code">$.fn.detach</CODE> in =
version 1.4=20
to help address this issue, allowing you to remove an element from the =
DOM while=20
you work with it.            </P>
<DIV id=3D"highlighter_860986" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$table =3D $(</CODE><CODE=20
      class=3D"string">'#myTable'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$parent =3D =
$table.parent();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">$table.detach();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// ... add lots and =
lots of=20
      rows to table</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">$parent.append($table);</CODE></TD></TR></TBODY></TABLE><=
/DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Use Stylesheets for Changing CSS on Many =
Elements">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Use Stylesheets for Changing CSS =
on Many=20
Elements                  </H2></DIV></DIV></DIV>
<P>              If you're changing the CSS of more than 20 elements =
using=20
$.fn.css, consider adding a style tag to the page instead for a nearly =
60%=20
increase in speed.            </P>
<DIV id=3D"highlighter_775733" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// fine for up to 20 =
elements,=20
      slow after that</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'a.swedberg'</CODE><CODE =
class=3D"plain">).css(</CODE><CODE=20
      class=3D"string">'color'</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"string">'#asd123'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'&lt;style type=3D"text/css"&gt;a.swedberg { =
color : #asd123=20
      }&lt;/style&gt;'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.appendTo(</CODE><CODE =
class=3D"string">'head'</CODE><CODE=20
      =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V>
<DIV class=3D"sect1" title=3D"Use $.data Instead of $.fn.data">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Use <CODE =
class=3D"code">$.data</CODE>=20
Instead of <CODE class=3D"code">$.fn.data</CODE></H2></DIV></DIV></DIV>
<P>              Using $.data on a DOM element instead of calling =
$.fn.data on a=20
jQuery selection can be up to 10 times faster. Be sure you understand =
the=20
difference between a DOM element and a jQuery selection before doing =
this,=20
though.            </P>
<DIV id=3D"highlighter_311937" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
regular</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
    =
class=3D"plain">$(elem).data(key,value);=E2=80=A8=E2=80=A8</CODE></TD></T=
R></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// 10x=20
  faster</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">=E2=80=A8$.data(elem,key,value);</CODE></TD></TR></TBODY>=
</TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Don't Act on Absent Elements">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Don't Act on Absent Elements     =
         =20
   </H2></DIV></DIV></DIV>
<P>              jQuery won't tell you if you're trying to run a whole =
lot of=20
code on an empty selection =E2=80=94 it will proceed as though nothing's =
wrong. It's up=20
to you to verify that your selection contains some elements.            =
</P>
<DIV id=3D"highlighter_378312" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// BAD: this runs =
three=20
      functions</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// before it realizes =
there's=20
      nothing</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// in the=20
  selection</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#nosuchthing'</CODE><CODE=20
    class=3D"plain">).slideUp();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
Better</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">$mySelection =3D $(</CODE><CODE=20
      class=3D"string">'#nosuchthing'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($mySelection.length) { $mySelection.slideUp();=20
  }</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// BEST: add a doOnce =

      plugin</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">jQuery.fn.doOnce =3D =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE=20
  class=3D"plain">(func){</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE class=3D"plain">.length =
&amp;&amp;=20
      func.apply(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">=E2=80=A8}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">=E2=80=A8$(</CODE><CODE=20
      class=3D"string">'li.cartitems'</CODE><CODE=20
      class=3D"plain">).doOnce(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      =
class=3D"plain">(){=E2=80=A8</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      make it ajax! \o/</CODE><CODE=20
class=3D"plain">=E2=80=A8</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              This guidance is especially applicable for jQuery UI =
widgets,=20
which have a lot of overhead even when the selection doesn't contain =
elements.  =20
         </P></DIV>
<DIV class=3D"sect1" title=3D"Variable Definition">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Variable Definition              =
   =20
</H2></DIV></DIV></DIV>
<P>              Variables can be defined in one statement instead of =
several.  =20
         </P>
<DIV id=3D"highlighter_961150" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// old &amp;=20
  busted</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">test =3D 1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">test2 =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() { ... };</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">test3 =3D =
test2(test);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// new=20
  hotness</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">test =3D 1,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">test2 =3D=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">() { ...=20
      },</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">test3 =3D=20
      test2(test);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>              In self-executing functions, variable definition can be =
skipped=20
all together.            </P>
<DIV id=3D"highlighter_445172" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(foo, bar) =
{ ... })(1,=20
      2);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Conditionals">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Conditionals                 =20
</H2></DIV></DIV></DIV>
<DIV id=3D"highlighter_658979" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// old=20
way</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(type =3D=3D </CODE><CODE =
class=3D"string">'foo'</CODE> <CODE=20
      class=3D"plain">|| type =3D=3D </CODE><CODE =
class=3D"string">'bar'</CODE><CODE=20
      class=3D"plain">) { ... }</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//=20
better</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(/^(foo|bar)$/.test(type)) { ...=20
}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// object literal=20
    lookup</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">(({ foo : 1, bar : 1 })[type]) { ...=20
}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV class=3D"sect1" title=3D"Don't Treat jQuery as a Black Box">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                    Don't Treat jQuery as a Black =
Box         =20
        </H2></DIV></DIV></DIV>
<P>              Use the source as your documentation =E2=80=94 bookmark =
<A class=3D"ulink"=20
href=3D"http://bit.ly/jqsource">http://bit.ly/jqsource</A> and refer to =
it often. =20
          </P></DIV></DIV>
<DIV id=3D"chapter-10" class=3D"chapter" title=3D"Code Organization">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">              Code Organization           =20
</H2></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Overview">
<H2 class=3D"title">          Overview        </H2>
<P>          When you move beyond adding simple enhancements to your =
website=20
with jQuery and start developing full-blown client-side applications, =
you need=20
to consider how to organize your code. In this chapter, we'll take a =
look at=20
various code organization patterns you can use in your jQuery =
application and=20
explore the RequireJS dependency management and build system.        =
</P>
<DIV class=3D"section" title=3D"Key Concepts">
<DIV class=3D"titlepage">
<H3 class=3D"title">              Key Concepts            </H3></DIV>
<P>            Before we jump into code organization patterns, it's =
important to=20
understand some concepts that are common to all good code organization =
patterns.=20
         </P>
<UL>
  <LI>Your code should be divided into units of functionality =E2=80=94 =
modules,=20
  services, etc. Avoid the temptation to have all of your code in one =
huge <CODE=20
  class=3D"code">$(document).ready()</CODE> block. This concept, =
loosely, is known=20
  as encapsulation.            </LI>
  <LI>
  <P>                Don't repeat yourself. Identify similarities among =
pieces=20
  of functionality, and use inheritance techniques to avoid repetitive =
code.    =20
           </P></LI>
  <LI>
  <P>                Despite jQuery's DOM-centric nature, JavaScript=20
  applications are not all about the DOM. Remember that not all pieces =
of=20
  functionality need to =E2=80=94 or should =E2=80=94 have a DOM =
representation.             =20
  </P></LI>
  <LI>
  <P>                Units of functionality should be <A class=3D"ulink" =
href=3D"http://en.wikipedia.org/wiki/Loose_coupling">loosely=20
  coupled</A> =E2=80=94 a unit of functionality should be able to exist =
on its own, and=20
  communication between units should be handled via a messaging system =
such as=20
  custom events or pub/sub. Stay away from direct communication between =
units of=20
  functionality whenever possible.              </P></LI></UL>
<P>            The concept of loose coupling can be especially =
troublesome to=20
developers making their first foray into complex applications, so be =
mindful of=20
this as you're getting started.          </P></DIV></DIV>
<DIV class=3D"section" title=3D"Encapsulation">
<H2 class=3D"title">          Encapsulation        </H2>
<P>          The first step to code organization is separating pieces of =
your=20
application into distinct pieces; sometimes, even just this effort is =
sufficient=20
to lend        </P>
<DIV class=3D"section" title=3D"The Object Literal">
<DIV class=3D"titlepage">
<H3 class=3D"title">              The Object Literal            =
</H3></DIV>
<P>            An object literal is perhaps the simplest way to =
encapsulate=20
related code. It doesn't offer any privacy for properties or methods, =
but it's=20
useful for eliminating anonymous functions from your code, centralizing=20
configuration options, and easing the path to reuse and refactoring.     =
    =20
</P>
<DIV id=3D"example-10.1" class=3D"example">
<P class=3D"title">Example 10.1:               An object literal         =
   </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_567560" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myFeature =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myProperty : =
</CODE><CODE class=3D"string">'hello'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myMethod : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(myFeature.myProperty);</CODE></TD></TR></TBOD=
Y></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">init : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(settings) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">myFeature.settings =3D=20
settings;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">readSettings : =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">console.log(myFeature.settings);</CODE></TD></TR></TBODY>=
</TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myFeature.myProperty; =
</CODE><CODE=20
      class=3D"comments">// =
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myFeature.myMethod(); =
</CODE><CODE=20
      class=3D"comments">// logs =
'hello'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myFeature.init({ foo :=20
      </CODE><CODE class=3D"string">'bar'</CODE> <CODE=20
  class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">myFeature.readSettings();=20
      </CODE><CODE class=3D"comments">// logs { foo : 'bar'=20
}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>            The object literal above is simply an object assigned to =
a=20
variable. The object has one property and several methods. All of the =
properties=20
and methods are public, so any part of your application can see the =
properties=20
and call methods on the object. While there is an init method, there's =
nothing=20
requiring that it be called before the object is functional.          =
</P>
<P>            How would we apply this pattern to jQuery code? Let's say =
that we=20
had this code written in the traditional jQuery style:          </P>
<DIV id=3D"highlighter_152040" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// clicking on a list =
item=20
      loads some content</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// using the list =
item's ID and=20
      hides content</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// in sibling list=20
    items</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$(document).ready(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#myFeature li'</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">.append(</CODE><CODE =
class=3D"string">'&lt;div/&gt;'</CODE><CODE=20
      class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">.click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"keyword">var</CODE>=20
      <CODE class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE> =
<CODE class=3D"plain">=3D=20
      $(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE class=3D"keyword">var</CODE>=20
      <CODE class=3D"plain">$div =3D $</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'div'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$div.load(</CODE><CODE=20
      class=3D"string">'foo.php?item=3D'</CODE> <CODE=20
  class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.attr(</CODE><CODE =
class=3D"string">'id'</CODE><CODE =
class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$div.show();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">$</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">.siblings()</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'div'</CODE><CODE =
class=3D"plain">).hide();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"spaces">&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            If this were the extent of our application, leaving it =
as-is=20
would be fine. On the other hand, if this was a piece of a larger =
application,=20
we'd do well to keep this functionality separate from unrelated =
functionality.=20
We might also want to move the URL out of the code and into a =
configuration=20
area. Finally, we might want to break up the chain to make it easier to =
modify=20
pieces of the functionality later.          </P>
<DIV id=3D"example-10.2" class=3D"example">
<P class=3D"title">Example 10.2:               Using an object literal =
for a=20
jQuery feature            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_34220" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myFeature =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">init : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(settings) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">myFeature.config =3D =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$items : $(</CODE><CODE =
class=3D"string">'#myFeature=20
      li'</CODE><CODE =
class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$container : $(</CODE><CODE =
class=3D"string">'&lt;div=20
      class=3D"container"&gt;&lt;/div&gt;'</CODE><CODE=20
  class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">urlBase : </CODE><CODE=20
    =
class=3D"string">'/foo.php?item=3D'</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//=20
      allow overriding the default =
config</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.extend(myFeature.config,=20
settings);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.setup();</CODE></TD></TR></TBODY></TABLE></DIV>=

<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">setup : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.config.$items</CODE></TD></TR></TBODY></TABLE><=
/DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">.each(myFeature.createContainer)</CODE></TD></TR></TBODY>=
</TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">.click(myFeature.showItem);</CODE></TD></TR></TBODY></TAB=
LE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">createContainer : =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$i =3D =
$(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$c =3D=20
myFeature.config.$container.clone()</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">.appendTo($i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$i.data(</CODE><CODE =
class=3D"string">'container'</CODE><CODE=20
      class=3D"plain">, $c);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">buildUrl : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"plain">myFeature.config.urlBase=20
      +</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</CODE><CODE=20
      class=3D"plain">myFeature.$currentItem.attr(</CODE><CODE=20
      class=3D"string">'id'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>33</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>34</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">showItem : </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>35</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE =
class=3D"plain">myFeature.$currentItem =3D=20
      $(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>36</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.getContent(myFeature.showContent);</CODE></TD><=
/TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>37</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>38</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>39</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">getContent : =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(callback) =
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>40</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">url =3D=20
      myFeature.buildUrl();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>41</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.$currentItem</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>42</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">.data(</CODE><CODE =
class=3D"string">'container'</CODE><CODE=20
      class=3D"plain">).load(url, =
callback);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>43</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>44</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>45</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">showContent : =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>46</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.$currentItem</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>47</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">.data(</CODE><CODE =
class=3D"string">'container'</CODE><CODE=20
      class=3D"plain">).show();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>48</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.hideContent();</CODE></TD></TR></TBODY></TABLE>=
</DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>49</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>50</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>51</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">hideContent : =
</CODE><CODE class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>52</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">myFeature.$currentItem.siblings()</CODE></TD></TR></TBODY=
></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>53</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>54</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).data(</CODE><CODE=20
      class=3D"string">'container'</CODE><CODE=20
  class=3D"plain">).hide();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>55</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>56</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>57</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>58</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>59</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">$(document).ready(myFeature.init);</CODE></TD></TR></TBOD=
Y></TABLE></DIV></DIV></DIV></DIV></DIV>
<P>            The first thing you'll notice is that this approach is =
obviously=20
far longer than the original =E2=80=94 again, if this were the extent of =
our=20
application, using an object literal would likely be overkill. Assuming =
it's not=20
the extent of our application, though, we've gained several things:      =
   =20
</P>
<UL>
  <LI>
  <P>                We've broken our feature up into tiny methods. In =
the=20
  future, if we want to change how content is shown, it's clear where to =
change=20
  it. In the original code, this step is much harder to locate.          =
   =20
  </P></LI>
  <LI>
  <P>                We've eliminated the use of anonymous functions.    =
       =20
    </P></LI>
  <LI>
  <P>                We've moved configuration options out of the body =
of the=20
  code and put them in a central location.              </P></LI>
  <LI>
  <P>                We've eliminated the constraints of the chain, =
making the=20
  code easier to refactor, remix, and rearrange.              =
</P></LI></UL>
<P>            For non-trivial features, object literals are a clear =
improvement=20
over a long stretch of code stuffed in a $(document).ready() block, as =
they get=20
us thinking about the pieces of our functionality. However, they aren't =
a whole=20
lot more advanced than simply having a bunch of function declarations =
inside of=20
that $(document).ready() block.          </P></DIV>
<DIV class=3D"section" title=3D"The Module Pattern">
<DIV class=3D"titlepage">
<H3 class=3D"title">              The Module Pattern            =
</H3></DIV>
<P>            The module pattern overcomes some of the limitations of =
the=20
object literal, offering privacy for variables and functions while =
exposing a=20
public API if desired.          </P>
<DIV id=3D"example-10.3" class=3D"example">
<P class=3D"title">Example 10.3:               The module pattern        =
    </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_802846" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">feature =3D(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// private variables =
and=20
      functions</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">privateThing =3D </CODE><CODE=20
      class=3D"string">'secret'</CODE><CODE=20
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">publicThing =3D </CODE><CODE class=3D"string">'not =

      secret'</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">changePrivateThing =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">privateThing =3D </CODE><CODE =
class=3D"string">'super=20
      secret'</CODE><CODE =
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">sayPrivateThing =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">console.log(privateThing);</CODE></TD></TR></TBODY></TABL=
E></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">changePrivateThing();</CODE></TD></TR></TBODY></TABLE></D=
IV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// public=20
  API</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">return</CODE> <CODE =
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">publicThing : =
publicThing,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">sayPrivateThing :=20
sayPrivateThing</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">feature.publicThing; =
</CODE><CODE=20
      class=3D"comments">// 'not =
secret'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
    =
class=3D"plain">feature.sayPrivateThing();</CODE></TD></TR></TBODY></TABL=
E></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// logs 'secret' and =
changes=20
      the value</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// of=20
  =
privateThing</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DI=
V>
<P>            In the example above, we self-execute an anonymous =
function that=20
returns an object. Inside of the function, we define some variables. =
Because the=20
variables are defined inside of the function, we don't have access to =
them=20
outside of the function unless we put them in the return object. This =
means that=20
no code outside of the function has access to the <CODE=20
class=3D"code">privateThing</CODE> variable or to the <CODE=20
class=3D"code">changePrivateThing</CODE> function. However, <CODE=20
class=3D"code">sayPrivateThing</CODE> does have access to <CODE=20
class=3D"code">privateThing</CODE> and <CODE=20
class=3D"code">changePrivateThing</CODE>, because both were defined in =
the same=20
scope as <CODE class=3D"code">sayPrivateThing</CODE>.          </P>
<P>            This pattern is powerful because, as you can gather from =
the=20
variable names, it can give you private variables and functions while =
exposing a=20
limited API consisting of the returned object's properties and methods.  =
       =20
</P>
<P>            Below is a revised version of the previous example, =
showing how=20
we could create the same feature using the module pattern while only =
exposing=20
one public method of the module, <CODE =
class=3D"code">showItemByIndex()</CODE>.   =20
      </P>
<DIV id=3D"example-10.4" class=3D"example">
<P class=3D"title">Example 10.4:               Using the module pattern =
for a=20
jQuery feature            </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_255123" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$(document).ready(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">feature =3D (</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$items =3D =
$(</CODE><CODE=20
      class=3D"string">'#myFeature li'</CODE><CODE=20
  class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$container =3D $(</CODE><CODE =
class=3D"string">'&lt;div=20
      class=3D"container"&gt;&lt;/div&gt;'</CODE><CODE=20
  class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">$currentItem,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">urlBase =3D </CODE><CODE=20
      class=3D"string">'/foo.php?item=3D'</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">createContainer =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$i =3D =
$(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$c =3D=20
$container.clone().appendTo($i);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$i.data(</CODE><CODE =
class=3D"string">'container'</CODE><CODE=20
      class=3D"plain">, $c);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">buildUrl =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"plain">urlBase +=20
      $currentItem.attr(</CODE><CODE class=3D"string">'id'</CODE><CODE =
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">showItem =3D </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$currentItem =
=3D=20
      $(</CODE><CODE class=3D"keyword">this</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">getContent(showContent);</CODE></TD></TR></TBODY></TABLE>=
</DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">showItemByIndex =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(idx)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.proxy(showItem,=20
$items.get(idx));</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">getContent =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(callback)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$currentItem.data(</CODE><CODE=20
      class=3D"string">'container'</CODE><CODE =
class=3D"plain">).load(buildUrl(),=20
      callback);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>32</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>33</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>34</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">showContent =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>35</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$currentItem.data(</CODE><CODE=20
      class=3D"string">'container'</CODE><CODE=20
  class=3D"plain">).show();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>36</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">hideContent();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>37</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>38</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>39</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">hideContent =3D </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>40</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">$currentItem.siblings()</CODE></TD></TR></TBODY></TABLE><=
/DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>41</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>42</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><C=
ODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).data(</CODE><CODE=20
      class=3D"string">'container'</CODE><CODE=20
  class=3D"plain">).hide();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>43</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>44</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>45</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>46</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$items</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>47</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">.each(createContainer)</CODE></TD></TR></TBODY></TABLE></=
DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>48</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      =
class=3D"plain">.click(showItem);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>49</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>50</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"plain">{ =
showItemByIndex :=20
      showItemByIndex };</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>51</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">})();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>52</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>53</CODE></TD>
    <TD class=3D"content"><CODE=20
    =
class=3D"plain">feature.showItemByIndex(0);</CODE></TD></TR></TBODY></TAB=
LE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>54</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV></DIV>
<H2 class=3D"title">        Managing Dependencies      </H2>
<DIV class=3D"note">
<H3 class=3D"title">        Note      </H3>
<P>        This section is based heavily on the excellent RequireJS=20
documentation at <A class=3D"ulink"=20
href=3D"http://requirejs.org/docs/jquery.html">http://requirejs.org/docs/=
jquery.html</A>,=20
and is used with the permission of RequireJS author James Burke.      =
</P></DIV>
<P>        When a project reaches a certain size, managing the script =
modules=20
for a project starts to get tricky. You need to be sure to sequence the =
scripts=20
in the right order, and you need to start seriously thinking about =
combining=20
scripts together into a bundle for deployment, so that only one or a =
very small=20
number of requests are made to load the scripts. You may also want to =
load code=20
on the fly, after page load.      </P>
<P>        RequireJS, a dependency management tool by James Burke, can =
help you=20
manage the script modules, load them in the right order, and make it =
easy to=20
combine the scripts later via the RequireJS optimization tool without =
needing to=20
change your markup. It also gives you an easy way to load scripts after =
the page=20
has loaded, allowing you to spread out the download size over time.      =
</P>
<P>        RequireJS has a module system that lets you define =
well-scoped=20
modules, but you do not have to follow that system to get the benefits =
of=20
dependency management and build-time optimizations. Over time, if you =
start to=20
create more modular code that needs to be reused in a few places, the =
module=20
format for RequireJS makes it easy to write encapsulated code that can =
be loaded=20
on the fly. It can grow with you, particularly if you want to =
incorporate=20
internationalization (i18n) string bundles, to localize your project for =

different languages, or load some HTML strings and make sure those =
strings are=20
available before executing code, or even use JSONP services as =
dependencies.    =20
 </P>
<DIV class=3D"section" title=3D"Getting RequireJS">
<DIV class=3D"titlepage">
<H3 class=3D"title">            Getting RequireJS          </H3></DIV>
<P>          The easiest way to use RequireJS with jQuery is to <A =
class=3D"ulink"=20
href=3D"http://requirejs.org/docs/download.html">download a build of =
jQuery that=20
has RequireJS built in</A>. This build excludes portions of RequireJS =
that=20
duplicate jQuery functionality. You may also find it useful to download =
<A=20
class=3D"ulink" =
href=3D"http://requirejs.org/docs/release/0.11.0/jquery-require-sample.zi=
p">a=20
sample jQuery project that uses RequireJS</A>.        </P></DIV>
<DIV class=3D"section" title=3D"Using RequireJS with jQuery">
<DIV class=3D"titlepage">
<H3 class=3D"title">            Using RequireJS with jQuery          =
</H3></DIV>
<P>          Using RequireJS in your page is simple: just include the =
jQuery=20
that has RequireJS built in, then require your application files. The =
following=20
example assumes that the jQuery build, and your other scripts, are all =
in a=20
<CODE class=3D"filename">scripts/</CODE> directory.        </P>
<DIV id=3D"example-10.5" class=3D"example">
<P class=3D"title">Example 10.5:             Using RequireJS: A simple =
example    =20
     </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_677109" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;!DOCTYPE=20
  html&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;html&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;head&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">&lt;title&gt;jQuery+RequireJS Sample=20
      Page&lt;/title&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">&lt;script src=3D</CODE><CODE=20
      class=3D"string">"scripts/require-jquery.js"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">&lt;script&gt;require([</CODE><CODE=20
      class=3D"string">"app"</CODE><CODE=20
  =
class=3D"plain">]);&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV>=

<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/head&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;body&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">&lt;h1&gt;jQuery+RequireJS Sample=20
  Page&lt;/h1&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/body&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/html&gt;</CODE></TD></TR></TBODY></TABLE></DIV></DIV=
></DIV></DIV></DIV>
<P>          The call to <CODE class=3D"code">require(["app"])</CODE> =
tells=20
RequireJS to load the <CODE class=3D"filename">scripts/app.js</CODE> =
file.=20
RequireJS will load any dependency that is passed to <CODE=20
class=3D"code">require()</CODE> without a <CODE =
class=3D"filename">.js</CODE>=20
extension from the same directory as <CODE=20
class=3D"filename">require-jquery.js</CODE>, though this can be =
configured to=20
behave differently. If you feel more comfortable specifying the whole =
path, you=20
can also do the following:        </P>
<DIV id=3D"highlighter_177828" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">&lt;script&gt;require([</CODE><CODE=20
      class=3D"string">"scripts/app.js"</CODE><CODE=20
      =
class=3D"plain">]);&lt;/script&gt;</CODE></TD></TR></TBODY></TABLE></DIV>=
</DIV></DIV>
<P>          What is in <CODE class=3D"filename">app.js</CODE>? Another =
call to=20
<CODE class=3D"filename">require.js</CODE> to load all the scripts you =
need and=20
any init work you want to do for the page. This example <CODE=20
class=3D"filename">app.js</CODE> script loads two plugins, <CODE=20
class=3D"filename">jquery.alpha.js</CODE> and <CODE=20
class=3D"filename">jquery.beta.js</CODE> (not the names of real plugins, =
just an=20
example). The plugins should be in the same directory as <CODE=20
class=3D"filename">require-jquery.js</CODE>:        </P>
<DIV id=3D"example-10.6" class=3D"example">
<P class=3D"title">Example 10.6:             A simple JavaScript file =
with=20
dependencies          </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_428681" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">require([</CODE><CODE =
class=3D"string">"jquery.alpha"</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"string">"jquery.beta"</CODE><CODE=20
      class=3D"plain">], </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//the jquery.alpha.js =
and=20
      jquery.beta.js plugins have been =
loaded.</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"string">'body'</CODE><CODE =
class=3D"plain">).alpha().beta();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV></DIV></DIV>
<DIV class=3D"section" title=3D"Creating Reusable Modules with =
RequireJS">
<DIV class=3D"titlepage">
<H3 class=3D"title">            Creating Reusable Modules with RequireJS =
        =20
</H3></DIV>
<P>          RequireJS makes it easy to define reusable modules via =
<CODE class=3D"code">require.def()</CODE>.=20
A RequireJS module can have dependencies that can be used to define a =
module,=20
and a RequireJS module can return a value =E2=80=94 an object, a =
function, whatever =E2=80=94=20
that can then be consumed by yet other modules.        </P>
<P>          If your module does not have any dependencies, then just =
specify=20
the name of the module as the first argument to <CODE=20
class=3D"code">require.def()</CODE>. The second argument is just an =
object literal=20
that defines the module's properties. For example:        </P>
<DIV id=3D"example-10.7" class=3D"example">
<P class=3D"title">Example 10.7:             Defining a RequireJS module =
that has=20
no dependencies          </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_986768" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">require.def(</CODE><CODE =
class=3D"string">"my/simpleshirt"</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">color:=20
      </CODE><CODE class=3D"string">"black"</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">size:=20
      </CODE><CODE =
class=3D"string">"unisize"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              This example would be stored in a my/simpleshirt.js =
file.      =20
     </P>
<P>              If your module has dependencies, you can specify the=20
dependencies as the second argument to <CODE =
class=3D"code">require.def()</CODE>=20
(as an array) and then pass a function as the third argument. The =
function will=20
be called to define the module once all dependencies have loaded. The =
function=20
receives the values returned by the dependencies as its arguments (in =
the same=20
order they were required in the array), and the function should return =
an object=20
that defines the module.            </P>
<DIV id=3D"example-10.8" class=3D"example">
<P class=3D"title">Example 10.8:                 Defining a RequireJS =
module with=20
dependencies              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_601133" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">require.def(</CODE><CODE =
class=3D"string">"my/shirt"</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">[</CODE><CODE=20
      class=3D"string">"my/cart"</CODE><CODE class=3D"plain">, =
</CODE><CODE class=3D"string">"my/inventory"</CODE><CODE=20
      class=3D"plain">],</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(cart,=20
      inventory) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">//return an object to define the "my/shirt"=20
    module.</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE=20
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">color: </CODE><CODE =
class=3D"string">"blue"</CODE><CODE =
class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">size: </CODE><CODE=20
  class=3D"string">"large"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">addToCart: </CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">inventory.decrement(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">cart.add(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              In this example, a my/shirt module is created. It =
depends on=20
my/cart and my/inventory. On disk, the files are structured like this:   =
       =20
 </P>
<DIV id=3D"highlighter_361734" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">my/cart.js</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
  class=3D"plain">my/inventory.js</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">my/shirt.js</CODE></TD></TR></TBODY></TABLE></DIV></DIV><=
/DIV>
<P>              The function that defines <CODE =
class=3D"code">my/shirt</CODE> is=20
not called until the <CODE class=3D"code">my/cart</CODE> and <CODE=20
class=3D"code">my/inventory</CODE> modules have been loaded, and the =
function=20
receives the modules as the <CODE class=3D"code">cart</CODE> and <CODE =
class=3D"code">inventory</CODE>=20
arguments. The order of the function arguments must match the order in =
which the=20
dependencies were required in the dependencies array. The object =
returned by the=20
function call defines the <CODE class=3D"code">my/shirt</CODE> module. =
Be defining=20
modules in this way, <CODE class=3D"code">my/shirt</CODE> does not exist =
as a=20
global object. Modules that define globals are explicitly discouraged, =
so=20
multiple versions of a module can exist in a page at a time.            =
</P>
<P>              Modules do not have to return objects; any valid return =
value=20
from a function is allowed.            </P>
<DIV id=3D"example-10.9" class=3D"example">
<P class=3D"title">Example 10.9:                 Defining a RequireJS =
module that=20
returns a function              </P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_945220" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">require.def(</CODE><CODE =
class=3D"string">"my/title"</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">[</CODE><CODE=20
      class=3D"string">"my/dependency1"</CODE><CODE class=3D"plain">, =
</CODE><CODE=20
      class=3D"string">"my/dependency2"</CODE><CODE=20
  class=3D"plain">],</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(dep1,=20
      dep2) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">//return a function to define "my/title". It =
gets or=20
      sets</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"comments">//the=20
      window title.</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">(title) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">return</CODE> <CODE class=3D"plain">title ? =
(window.title =3D=20
      title) : window.title;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DI=
V></DIV>
<P>              Only one module should be required per JavaScript file. =
       =20
   </P></DIV></DIV></DIV>
<DIV class=3D"section" title=3D"Optimizing Your Code: The RequireJS =
Build Tool">
<DIV class=3D"titlepage">
<H3 class=3D"title">            Optimizing Your Code: The RequireJS =
Build Tool    =20
     </H3></DIV>
<P>          Once you incorporate RequireJS for dependency management, =
your page=20
is set up to be optimized very easily. Download the RequireJS source and =
place=20
it anywhere you like, preferrably somewhere outside your web development =
area.=20
For the purposes of this example, the RequireJS source is placed as a =
sibling to=20
the <CODE class=3D"filename">webapp</CODE> directory, which contains the =
HTML page=20
and the scripts directory with all the scripts. Complete directory =
structure:   =20
    </P>
<DIV id=3D"highlighter_513140" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">requirejs/ (used =
</CODE><CODE=20
      class=3D"keyword">for</CODE> <CODE class=3D"plain">the build=20
  tools)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
  class=3D"plain">webapp/app.html</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
  =
class=3D"plain">webapp/scripts/app.js</CODE></TD></TR></TBODY></TABLE></D=
IV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">webapp/scripts/require-jquery.js</CODE></TD></TR></TBODY>=
</TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">webapp/scripts/jquery.alpha.js</CODE></TD></TR></TBODY></=
TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"plain">webapp/scripts/jquery.beta.js</CODE></TD></TR></TBODY></T=
ABLE></DIV></DIV></DIV>
<P>          Then, in the scripts directory that has <CODE=20
class=3D"filename">require-jquery.js</CODE> and app.js, create a file =
called=20
app.build.js with the following contents:        </P>
<DIV class=3D"example">
<P class=3D"title"><B>A RequireJS build configuration file</B></P>
<DIV class=3D"example-contents">
<DIV id=3D"highlighter_725165" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">appDir: </CODE><CODE =
class=3D"string">"../"</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">baseUrl: </CODE><CODE =
class=3D"string">"scripts/"</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">dir: </CODE><CODE=20
      class=3D"string">"../../webapp-build"</CODE><CODE=20
  class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//Comment out the =
optimize line=20
      if you want</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//the code minified =
by Closure=20
      Compiler using</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">//the "simple" =
optimizations=20
      mode</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">optimize: </CODE><CODE =
class=3D"string">"none"</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">modules:=20
[</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">name: </CODE><CODE=20
class=3D"string">"app"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">]</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV=
></DIV>
<P>          To use the build tool, you need Java 6 installed. Closure =
Compiler=20
is used for the JavaScript minification step (if <CODE =
class=3D"code">optimize:=20
"none"</CODE> is commented out), and it requires Java 6.        </P>
<P>          To start the build, go to the webapp/scripts directory, =
execute the=20
following command:        </P>
<DIV id=3D"highlighter_681127" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"preprocessor"># non-windows=20
    systems</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">../../requirejs/build/build.sh=20
      app.build.js</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"preprocessor"># windows=20
  systems</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">..\..\requirejs\build\build.bat=20
      app.build.js</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>          Now, in the webapp-build directory, <CODE=20
class=3D"filename">app.js</CODE> will have the <CODE=20
class=3D"filename">app.js</CODE> contents, <CODE=20
class=3D"filename">jquery.alpha.js</CODE> and <CODE=20
class=3D"filename">jquery.beta.js</CODE> inlined. If you then load the =
<CODE=20
class=3D"filename">app.html</CODE> file in the <CODE=20
class=3D"filename">webapp-build</CODE> directory, you should not see any =
network=20
requests for <CODE class=3D"filename">jquery.alpha.js</CODE> and <CODE =
class=3D"filename">jquery.beta.js</CODE>.=20
       </P></DIV>
<DIV class=3D"section" title=3D"Exercises">
<H2 class=3D"title">          Exercises        </H2>
<DIV class=3D"section" title=3D"Create a Portlet Module">
<DIV class=3D"titlepage">
<H3 class=3D"title">              Create a Portlet Module            =
</H3></DIV>
<P>            Open the file <CODE=20
class=3D"filename">/exercises/portlets.html</CODE> in your browser. Use =
the file=20
<CODE class=3D"filename">/exercises/js/portlets.js</CODE>. Your task is =
to create=20
a portlet creation function that uses the module pattern, such that the=20
following code will work:          </P>
<DIV id=3D"highlighter_801864" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"keyword">var</CODE> <CODE=20
      class=3D"plain">myPortlet =3D =
Portlet({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">title : </CODE><CODE =
class=3D"string">'Curry'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">source : </CODE><CODE =
class=3D"string">'data/html/curry.html'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">initialState : =
</CODE><CODE class=3D"string">'open'</CODE>=20
      <CODE class=3D"comments">// or =
'closed'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"plain">myPortlet.$element.appendTo(</CODE><CODE=20
      class=3D"string">'body'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            Each portlet should be a div with a title, a content =
area, a=20
button to open/close the portlet, a button to remove the portlet, and a =
button=20
to refresh the portlet. The portlet returned by the Portlet function =
should have=20
the following public API:          </P>
<DIV id=3D"highlighter_953409" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myPortlet.open(); =
</CODE><CODE=20
      class=3D"comments">// force open =
state</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myPortlet.close(); =
</CODE><CODE=20
      class=3D"comments">// force close =
state</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myPortlet.toggle(); =
</CODE><CODE=20
      class=3D"comments">// toggle open/close=20
state</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myPortlet.refresh(); =
</CODE><CODE=20
      class=3D"comments">// refresh the =
content</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">myPortlet.destroy(); =
</CODE><CODE=20
      class=3D"comments">// remove the portlet from the=20
page</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">myPortlet.setSource(</CODE><CODE=20
      class=3D"string">'data/html/onions.html'</CODE><CODE=20
    class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"comments">// change the=20
  source</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=3D"chapter-11" class=3D"chapter" title=3D"Custom Events">
<P class=3D"toc"><A title=3D"Back to top" =
href=3D"http://jqfundamentals.com/book/index.html#toc">Back=20
to top</A></P>
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title">                  Custom Events               =20
</H2></DIV></DIV></DIV>
<H2 class=3D"title">            Introducing Custom Events          </H2>
<P>            We=E2=80=99re all familiar with the basic events =
=E2=80=94 click, mouseover,=20
focus, blur, submit, etc. =E2=80=94 that we can latch on to as a user =
interacts with the=20
browser. Custom events open up a whole new world of event-driven =
programming. In=20
this chapter, we=E2=80=99ll use jQuery=E2=80=99s custom events system to =
make a simple Twitter=20
search application.          </P>
<P>            It can be difficult at first to understand why you'd want =
to use=20
custom events, when the built-in events seem to suit your needs just =
fine. It=20
turns out that custom events offer a whole new way of thinking about=20
event-driven JavaScript. Instead of focusing on the element that =
triggers an=20
action, custom events put the spotlight on the element being acted upon. =
This=20
brings a bevy of benefits, including:          </P>
<UL>
  <LI>
  <P>                Behaviors of the target element can easily be =
triggered by=20
  different elements using the same code.              </P></LI>
  <LI>
  <P>                Behaviors can be triggered across multiple, =
similar, target=20
  elements at once.              </P></LI>
  <LI>
  <P>                Behaviors are more clearly associated with the =
target=20
  element in code, making code easier to read and maintain.              =

  </P></LI></UL>
<P>            Why should you care? An example is probably the best way =
to=20
explain. Suppose you have a lightbulb in a room in a house. The =
lightbulb is=20
currently turned on, and it=E2=80=99s controlled by two three-way =
switches and a=20
clapper:          </P>
<DIV id=3D"highlighter_684293" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;div =
class=3D</CODE><CODE class=3D"string">"room"</CODE>=20
      <CODE class=3D"plain">id=3D</CODE><CODE =
class=3D"string">"kitchen"</CODE><CODE=20
      class=3D"plain">&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"lightbulb on"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"clapper"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV></DIV>=
</DIV>
<P>            Triggering the clapper or either of the switches will =
change the=20
state of the lightbulb. The switches and the clapper don=E2=80=99t care =
what state the=20
lightbulb is in; they just want to change the state.          </P>
<P>            Without custom events, you might write some code like =
this:      =20
   </P>
<DIV id=3D"highlighter_699763" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.switch, .clapper'</CODE><CODE=20
      class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$light =3D =
$(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">).parent().find(</CODE><CODE=20
      class=3D"string">'.lightbulb'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($light.hasClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE class=3D"plain">))=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$light.removeClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'off'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">}=20
      </CODE><CODE class=3D"keyword">else</CODE> <CODE=20
  class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$light.removeClass(</CODE><CODE=20
      class=3D"string">'off'</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            With custom events, your code might look more like this:  =
       =20
</P>
<DIV id=3D"highlighter_547552" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.lightbulb'</CODE><CODE =
class=3D"plain">).bind(</CODE><CODE=20
      class=3D"string">'changeState'</CODE><CODE class=3D"plain">, =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$light =3D =
$(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($light.hasClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE class=3D"plain">))=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$light.removeClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'off'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">}=20
      </CODE><CODE class=3D"keyword">else</CODE> <CODE=20
  class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$light.removeClass(</CODE><CODE=20
      class=3D"string">'off'</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.switch, .clapper'</CODE><CODE=20
      class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).parent().find(</CODE><CODE=20
      class=3D"string">'.lightbulb'</CODE><CODE=20
      class=3D"plain">).trigger(</CODE><CODE=20
      class=3D"string">'changeState'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            This last bit of code is not that exciting, but something =

important has happened: we=E2=80=99ve moved the behavior of the =
lightbulb to the=20
lightbulb, and away from the switches and the clapper.          </P>
<P>            Let=E2=80=99s make our example a little more interesting. =
We=E2=80=99ll add=20
another room to our house, along with a master switch, as shown here:    =
     =20
</P>
<DIV id=3D"highlighter_637115" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;div =
class=3D</CODE><CODE class=3D"string">"room"</CODE>=20
      <CODE class=3D"plain">id=3D</CODE><CODE =
class=3D"string">"kitchen"</CODE><CODE=20
      class=3D"plain">&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"lightbulb on"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"clapper"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;div =
class=3D</CODE><CODE class=3D"string">"room"</CODE>=20
      <CODE class=3D"plain">id=3D</CODE><CODE =
class=3D"string">"bedroom"</CODE><CODE=20
      class=3D"plain">&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"lightbulb on"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"clapper"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;div =
id=3D</CODE><CODE class=3D"string">"master_switch"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV></=
DIV></DIV>
<P>            If there are any lights on in the house, we want the =
master=20
switch to turn all the lights off; otherwise, we want it to turn all =
lights on.=20
To accomplish this, we=E2=80=99ll add two more custom events to the =
lightbulbs: <CODE=20
class=3D"code">turnOn</CODE> and <CODE class=3D"code">turnOff</CODE>. =
We=E2=80=99ll make use=20
of them in the <CODE class=3D"code">changeState</CODE> custom event, and =
use some=20
logic to decide which one the master switch should trigger:          =
</P>
<DIV id=3D"highlighter_266899" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.lightbulb'</CODE><CODE=20
  class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.bind(</CODE><CODE =
class=3D"string">'changeState'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$light =3D =
$(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE=20
      class=3D"plain">($light.hasClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE class=3D"plain">))=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$light.trigger(</CODE><CODE=20
      class=3D"string">'turnOff'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">} </CODE><CODE class=3D"keyword">else</CODE> <CODE =
class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$light.trigger(</CODE><CODE=20
      class=3D"string">'turnOn'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">})</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.bind(</CODE><CODE =
class=3D"string">'turnOn'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).removeClass(</CODE><CODE=20
      class=3D"string">'off'</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">})</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.bind(</CODE><CODE =
class=3D"string">'turnOff'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).removeClass(</CODE><CODE=20
      class=3D"string">'off'</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'on'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'.switch, .clapper'</CODE><CODE=20
      class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).parent().find(</CODE><CODE=20
      class=3D"string">'.lightbulb'</CODE><CODE=20
      class=3D"plain">).trigger(</CODE><CODE=20
      class=3D"string">'changeState'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#master_switch'</CODE><CODE=20
      class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE class=3D"plain">($(</CODE><CODE =
class=3D"string">'.lightbulb.on'</CODE><CODE=20
      class=3D"plain">).length) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'.lightbulb'</CODE><CODE=20
      class=3D"plain">).trigger(</CODE><CODE =
class=3D"string">'turnOff'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">}=20
      </CODE><CODE class=3D"keyword">else</CODE> <CODE=20
  class=3D"plain">{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'.lightbulb'</CODE><CODE=20
      class=3D"plain">).trigger(</CODE><CODE =
class=3D"string">'turnOn'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>            Note how the behavior of the master switch is attached to =
the=20
master switch; the behavior of a lightbulb belongs to the lightbulbs.    =
     =20
</P>
<DIV class=3D"note">
<H3 class=3D"title">            Note          </H3>
<P>            If you=E2=80=99re accustomed to object-oriented =
programming, you may find=20
it useful to think of custom events as methods of objects. Loosely =
speaking, the=20
object to which the method belongs is created via the jQuery selector. =
Binding=20
the changeState custom event to all <CODE =
class=3D"code">$(=E2=80=98.light=E2=80=99)</CODE>=20
elements is akin to having a class called <CODE =
class=3D"code">Light</CODE> with a=20
method of <CODE class=3D"code">changeState</CODE>, and then =
instantiating new=20
<CODE class=3D"code">Light</CODE> objects for each element with a =
classname of=20
light.          </P></DIV>
<DIV class=3D"sidebar" title=3D"Recap: $.fn.bind and $.fn.trigger">
<P class=3D"title"><B>Recap: $.fn.bind and $.fn.trigger</B></P>
<P>              In the world of custom events, there are two important =
jQuery=20
methods: <CODE class=3D"code">$.fn.bind</CODE> and <CODE=20
class=3D"code">$.fn.trigger</CODE>. In the Events chapter, we saw how to =
use these=20
methods for working with user events; for this chapter, it's important =
to=20
remember two things:            </P>
<UL>
  <LI>The <CODE class=3D"code">$.fn.bind</CODE> method takes an event =
type and an=20
  event handling function as arguments. Optionally, it can also receive=20
  event-related data as its second argument, pushing the event handling =
function=20
  to the third argument. Any data that is passed will be available to =
the event=20
  handling function in the <CODE class=3D"code">data</CODE> property of =
the event=20
  object. The event handling function always receives the event object =
as its=20
  first argument.              </LI>
  <LI>The <CODE class=3D"code">$.fn.trigger</CODE> method takes an event =
type as=20
  its argument. Optionally, it can also take an array of values. These =
values=20
  will be passed to the event handling function as arguments after the =
event=20
  object.              </LI></UL>
<P>              Here is an example of the usage of <CODE=20
class=3D"code">$.fn.bind</CODE> and <CODE =
class=3D"code">$.fn.trigger</CODE> that=20
uses custom data in both cases:            </P>
<DIV id=3D"highlighter_70508" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$(document).bind(</CODE><CODE=20
      class=3D"string">'myCustomEvent'</CODE><CODE class=3D"plain">, { =
foo :=20
      </CODE><CODE class=3D"string">'bar'</CODE> <CODE =
class=3D"plain">},=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e, arg1,=20
      arg2) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(e.data.foo); </CODE><CODE =
class=3D"comments">//=20
      'bar'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(arg1); </CODE><CODE =
class=3D"comments">//=20
      'bim'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">console.log(arg2); </CODE><CODE =
class=3D"comments">//=20
      'baz'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$(document).trigger(</CODE><CODE=20
      class=3D"string">'myCustomEvent'</CODE><CODE class=3D"plain">, [ =
</CODE><CODE=20
      class=3D"string">'bim'</CODE><CODE class=3D"plain">, </CODE><CODE =
class=3D"string">'baz'</CODE>=20
      <CODE =
class=3D"plain">]);</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV>
<DIV class=3D"section" title=3D"A Sample Application">
<DIV class=3D"titlepage">
<H3 class=3D"title">                A Sample Application              =
</H3></DIV>
<P>              To demonstrate the power of custom events, =
we=E2=80=99re going to=20
create a simple tool for searching Twitter. The tool will offer several =
ways for=20
a user to add search terms to the display: by entering a search term in =
a text=20
box, by entering multiple search terms in the URL, and by querying =
Twitter for=20
trending terms.            </P>
<P>              The results for each term will be shown in a results =
container;=20
these containers will be able to be expanded, collapsed, refreshed, and =
removed,=20
either individually or all at once.            </P>
<P>              When we=E2=80=99re done, it will look like this:        =
    </P>
<DIV class=3D"figure">
<P class=3D"title"><B>Figure&nbsp;11.1.&nbsp;Our finished =
application</B></P>
<DIV class=3D"figure-contents">
<DIV class=3D"screenshot">
<DIV class=3D"mediaobject"><IMG alt=3D"Our finished application" =
src=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery%20Fundament=
als_files/70415e9fffab1c47953f5264ecf722fe.png"></DIV></DIV></DIV></DIV><=
BR=20
class=3D"figure-break">
<DIV class=3D"section" title=3D"The Setup">
<DIV class=3D"titlepage">
<H4 class=3D"title">                  The Setup                =
</H4></DIV>
<P>                We=E2=80=99ll start with some basic HTML:             =
 </P>
<DIV id=3D"highlighter_302605" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;h1&gt;Twitter=20
      Search&lt;/h1&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;input =
type=3D</CODE><CODE class=3D"string">"button"</CODE>=20
      <CODE class=3D"plain">id=3D</CODE><CODE=20
  class=3D"string">"get_trends"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">value=3D</CODE><CODE class=3D"string">"Load =
Trending=20
      Terms"</CODE> <CODE =
class=3D"plain">/&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;form&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">&lt;input type=3D</CODE><CODE =
class=3D"string">"text"</CODE>=20
      <CODE class=3D"plain">class=3D</CODE><CODE=20
    class=3D"string">"input_text"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">id=3D</CODE><CODE =
class=3D"string">"search_term"</CODE> <CODE=20
      class=3D"plain">/&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">&lt;input type=3D</CODE><CODE =
class=3D"string">"submit"</CODE>=20
      <CODE class=3D"plain">class=3D</CODE><CODE=20
    =
class=3D"string">"input_submit"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">value=3D</CODE><CODE class=3D"string">"Add Search =
Term"</CODE>=20
      <CODE class=3D"plain">/&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/form&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">&lt;div =
id=3D</CODE><CODE class=3D"string">"twitter"</CODE><CODE=20
      class=3D"plain">&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">&lt;div=20
      class=3D</CODE><CODE class=3D"string">"template =
results"</CODE><CODE =
class=3D"plain">&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">&lt;h2&gt;Search Results </CODE><CODE=20
      class=3D"keyword">for</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">&lt;span class=3D</CODE><CODE=20
      class=3D"string">"search_term"</CODE><CODE=20
      =
class=3D"plain">&gt;&lt;/span&gt;&lt;/h2&gt;</CODE></TD></TR></TBODY></TA=
BLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">&lt;/div&gt;</CODE></TD></TR></TBODY></TABLE></DIV></DIV>=
</DIV>
<P>                This gives us a container (#twitter) for our widget, =
a=20
template for our results containers (hidden via CSS), and a simple form =
where=20
users can input a search term. (For the sake of simplicity, =
we=E2=80=99re going to=20
assume that our application is JavaScript-only and that our users will =
always=20
have CSS.)              </P>
<P>                There are two types of objects we=E2=80=99ll want to =
act on: the=20
results containers, and the Twitter container.              </P>
<P>                The results containers are the heart of the =
application.=20
We=E2=80=99ll create a plugin that will prepare each results container =
once it=E2=80=99s added=20
to the Twitter container. Among other things, it will bind the custom =
events for=20
each container and add the action buttons at the top right of each =
container.=20
Each results container will have the following custom events:            =
  </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">refresh</SPAN></DT>
  <DD>
  <P>                      Mark the container as being in the =
=E2=80=9Crefreshing=E2=80=9D=20
  state, and fire the request to fetch the data for the search term.     =
       =20
         </P></DD>
  <DT><SPAN class=3D"term">populate</SPAN></DT>
  <DD>
  <P>                      Receive the returned JSON data and use it to =
populate=20
  the container.                    </P></DD>
  <DT><SPAN class=3D"term">remove</SPAN></DT>
  <DD>
  <P>                      Remove the container from the page after the =
user=20
  verifies the request to do so. Verification can be bypassed by passing =
true as=20
  the second argument to the event handler. The remove event also =
removes the=20
  term associated with the results container from the global object =
containing=20
  the search terms.                    </P></DD>
  <DT><SPAN class=3D"term">collapse</SPAN></DT>
  <DD>
  <P>                      Add a class of collapsed to the container, =
which will=20
  hide the results via CSS. It will also turn the container=E2=80=99s =
=E2=80=9CCollapse=E2=80=9D button=20
  into an =E2=80=9CExpand=E2=80=9D button.                    </P></DD>
  <DT><SPAN class=3D"term">expand</SPAN></DT>
  <DD>
  <P>                      Remove the collapsed class from the =
container. It=20
  will also turn the container=E2=80=99s =E2=80=9CExpand=E2=80=9D button =
into a =E2=80=9CCollapse=E2=80=9D button.      =20
               </P></DD></DL></DIV>
<P>                The plugin is also responsible for adding the action =
buttons=20
to the container. It binds a click event to each action=E2=80=99s list =
item, and uses=20
the list item=E2=80=99s class to determine which custom event will be =
triggered on the=20
corresponding results container.              </P>
<DIV id=3D"highlighter_749955" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>001</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.fn.twitterResult =3D =
</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(settings)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>002</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.each(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>003</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$results =3D =
$(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE=20
class=3D"plain">),</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>004</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$actions =3D $.fn.twitterResult.actions=20
=3D</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>005</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.fn.twitterResult.actions=20
||</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>006</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">$.fn.twitterResult.createActions(),</CODE></TD></TR></TBO=
DY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>007</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$a =3D=20
  =
$actions.clone().prependTo($results),</CODE></TD></TR></TBODY></TABLE></D=
IV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>008</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">term =3D =
settings.term;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>009</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>010</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$results.find(</CODE><CODE=20
      class=3D"string">'span.search_term'</CODE><CODE=20
      =
class=3D"plain">).text(term);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>011</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>012</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$.each(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>013</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">[</CODE><CODE =
class=3D"string">'refresh'</CODE><CODE class=3D"plain">,=20
      </CODE><CODE class=3D"string">'populate'</CODE><CODE =
class=3D"plain">,=20
      </CODE><CODE class=3D"string">'remove'</CODE><CODE =
class=3D"plain">,=20
      </CODE><CODE class=3D"string">'collapse'</CODE><CODE =
class=3D"plain">,=20
      </CODE><CODE class=3D"string">'expand'</CODE><CODE=20
  class=3D"plain">],</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>014</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i, ev)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>015</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">$results.bind(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>016</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><C=
ODE=20
      class=3D"plain">ev,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>017</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><C=
ODE=20
      class=3D"plain">{ term : term =
},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>018</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><C=
ODE=20
      =
class=3D"plain">$.fn.twitterResult.events[ev]</CODE></TD></TR></TBODY></T=
ABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>019</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>020</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>021</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>022</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>023</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// use the class of each action to figure=20
  out</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>024</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// which event it will trigger on the results=20
    panel</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>025</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$a.find(</CODE><CODE =
class=3D"string">'li'</CODE><CODE class=3D"plain">).click(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">()=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>026</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// pass the li that was clicked to the=20
  function</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>027</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// so it can be manipulated if=20
needed</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>028</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$results.trigger($(</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE =
class=3D"plain">).attr(</CODE><CODE class=3D"string">'class'</CODE><CODE =

      class=3D"plain">), [ $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE class=3D"plain">)=20
      ]);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>029</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>030</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>031</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>032</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>033</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$.fn.twitterResult.createActions =3D=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">()=20
    {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>034</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE> <CODE =
class=3D"plain">$(</CODE><CODE class=3D"string">'&lt;ul=20
      class=3D"actions" /&gt;'</CODE><CODE=20
  class=3D"plain">).append(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>035</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"string">'&lt;li =
class=3D"refresh"&gt;Refresh&lt;/li&gt;'</CODE> <CODE=20
      class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>036</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"string">'&lt;li =
class=3D"remove"&gt;Remove&lt;/li&gt;'</CODE> <CODE=20
      class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>037</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"string">'&lt;li=20
  =
class=3D"collapse"&gt;Collapse&lt;/li&gt;'</CODE></TD></TR></TBODY></TABL=
E></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>038</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>039</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>040</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>041</CODE></TD>
    <TD class=3D"content"><CODE =
class=3D"plain">$.fn.twitterResult.events =3D=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>042</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">refresh=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>043</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// indicate that the results are=20
  refreshing</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>044</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$</CODE><CODE =
class=3D"keyword">this</CODE>=20
      <CODE class=3D"plain">=3D $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'refreshing'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>045</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>046</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'p.tweet'</CODE><CODE=20
      class=3D"plain">).remove();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>047</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$results.append(</CODE><CODE =
class=3D"string">'&lt;p=20
      class=3D"loading"&gt;Loading ...&lt;/p&gt;'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>048</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>049</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// get the twitter data using=20
jsonp</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>050</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$.getJSON(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>051</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'<A=20
      =
href=3D"http://search.twitter.com/search.json?q=3D">http://search.twitter=
.com/search.json?q=3D</A>'</CODE>=20
      <CODE class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>052</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">escape(e.data.term) + </CODE><CODE=20
      class=3D"string">'&amp;rpp=3D5&amp;callback=3D?'</CODE><CODE=20
      class=3D"plain">,</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>053</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(json)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>054</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.trigger(</CODE><CODE =
class=3D"string">'populate'</CODE><CODE=20
      class=3D"plain">, [ json =
]);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>055</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>056</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>057</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>058</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>059</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">populate=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e,=20
      json) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>060</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">results =3D=20
      json.results;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>061</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$</CODE><CODE =
class=3D"keyword">this</CODE>=20
      <CODE class=3D"plain">=3D $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>062</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>063</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'p.loading'</CODE><CODE=20
      class=3D"plain">).remove();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>064</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>065</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$.each(results, </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i,result)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>066</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">tweet =3D =
</CODE><CODE class=3D"string">'&lt;p=20
      class=3D"tweet"&gt;'</CODE> <CODE=20
class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>067</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'&lt;a href=3D"<A=20
      href=3D"http://twitter.com/">http://twitter.com/</A>'</CODE> <CODE =
class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>068</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">result.from_user =
+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>069</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'"&gt;'</CODE> <CODE=20
class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>070</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">result.from_user =
+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>071</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'&lt;/a&gt;: '</CODE> <CODE=20
  class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>072</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">result.text =
+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>073</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">' &lt;span class=3D"date"&gt;'</CODE> <CODE=20
      class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>074</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">result.created_at =
+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>075</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'&lt;/span&gt;'</CODE> <CODE=20
  class=3D"plain">+</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>076</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"string">'&lt;/p&gt;'</CODE><CODE=20
  class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>077</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      =
class=3D"plain">.append(tweet);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>078</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>079</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>080</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// indicate that the=20
results</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>081</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// are done =
refreshing</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>082</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.removeClass(</CODE><CODE=20
      class=3D"string">'refreshing'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>083</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>084</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>085</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">remove :=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e, force)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>086</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE=20
class=3D"plain">(</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>087</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">!force =
&amp;&amp;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>088</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">!confirm(</CODE><CODE class=3D"string">'Remove =
panel for term=20
      '</CODE> <CODE class=3D"plain">+ e.data.term + </CODE><CODE=20
      class=3D"string">'?'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>089</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>090</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">return</CODE><CODE=20
class=3D"plain">;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>091</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>092</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).remove();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>093</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>094</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// indicate that we no=20
longer</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>095</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// have a panel for the=20
term</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>096</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">search_terms[e.data.term] =3D=20
0;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>097</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>098</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>099</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">collapse=20
      : </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>100</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).find(</CODE><CODE=20
      class=3D"string">'li.collapse'</CODE><CODE=20
      class=3D"plain">).removeClass(</CODE><CODE=20
      class=3D"string">'collapse'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>101</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.addClass(</CODE><CODE =
class=3D"string">'expand'</CODE><CODE=20
      class=3D"plain">).text(</CODE><CODE =
class=3D"string">'Expand'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>102</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>103</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).addClass(</CODE><CODE=20
      class=3D"string">'collapsed'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>104</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">},</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>105</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>106</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE =
class=3D"plain">expand :=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>107</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).find(</CODE><CODE=20
      class=3D"string">'li.expand'</CODE><CODE=20
      class=3D"plain">).removeClass(</CODE><CODE=20
      class=3D"string">'expand'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>108</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.addClass(</CODE><CODE =
class=3D"string">'collapse'</CODE><CODE=20
      class=3D"plain">).text(</CODE><CODE =
class=3D"string">'Collapse'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>109</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>110</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"keyword">this</CODE><CODE =
class=3D"plain">).removeClass(</CODE><CODE=20
      class=3D"string">'collapsed'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>111</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>112</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">};</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                The Twitter container itself will have just two =
custom=20
events:              </P>
<DIV class=3D"variablelist">
<DL>
  <DT><SPAN class=3D"term">getResults</SPAN></DT>
  <DD>
  <P>                      Receives a search term and checks to =
determine=20
  whether there=E2=80=99s already a results container for the term; if =
not, adds a=20
  results container using the results template, set up the results =
container=20
  using the <CODE class=3D"code">$.fn.twitterResult</CODE> plugin =
discussed above,=20
  and then triggers the <CODE class=3D"code">refresh</CODE> event on the =
results=20
  container in order to actually load the results. Finally, it will =
store the=20
  search term so the application knows not to re-fetch the term.         =
       =20
     </P></DD>
  <DT><SPAN class=3D"term">getTrends</SPAN></DT>
  <DD>
  <P>                      Queries Twitter for the top 10 trending =
terms, then=20
  iterates over them and triggers the <CODE =
class=3D"code">getResults</CODE> event=20
  for each of them, thereby adding a results container for each term.    =
       =20
          </P></DD></DL></DIV>
<P>                Here's how the Twitter container bindings look:       =
      =20
</P>
<DIV id=3D"highlighter_228385" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>01</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#twitter'</CODE><CODE=20
class=3D"plain">)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>02</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.bind(</CODE><CODE =
class=3D"string">'getResults'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(e,=20
      term) {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>03</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"comments">// make sure we don't have a box for this term=20
      already</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>04</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">if</CODE> <CODE =
class=3D"plain">(!search_terms[term])=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>05</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$</CODE><CODE =
class=3D"keyword">this</CODE>=20
      <CODE class=3D"plain">=3D $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>06</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$template =3D =
$</CODE><CODE=20
      class=3D"keyword">this</CODE><CODE =
class=3D"plain">.find(</CODE><CODE =
class=3D"string">'div.template'</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>07</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>08</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// make a copy of the template=20
div</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>09</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// and insert it as the first results=20
  box</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>10</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$results =3D=20
$template.clone().</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>11</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">removeClass(</CODE><CODE=20
      class=3D"string">'template'</CODE><CODE=20
class=3D"plain">).</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>12</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">insertBefore($</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.find(</CODE><CODE =
class=3D"string">'div:first'</CODE><CODE=20
      class=3D"plain">)).</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>13</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">twitterResult({</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>14</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><C=
ODE=20
      class=3D"string">'term'</CODE> <CODE class=3D"plain">:=20
  term</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>15</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>16</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>17</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// load the content using the=20
  "refresh"</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>18</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"comments">// custom event that we bound to the results=20
      container</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>19</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$results.trigger(</CODE><CODE=20
      class=3D"string">'refresh'</CODE><CODE=20
class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>20</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">search_terms[term] =3D =
1;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>21</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>22</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">})</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>23</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">.bind(</CODE><CODE =
class=3D"string">'getTrends'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>24</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">$</CODE><CODE =
class=3D"keyword">this</CODE>=20
      <CODE class=3D"plain">=3D $(</CODE><CODE =
class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>25</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$.getJSON(</CODE><CODE class=3D"string">'<A =
href=3D"http://search.twitter.com/trends.json?callback=3D?">http://search=
.twitter.com/trends.json?callback=3D?</A>'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"keyword">function</CODE><CODE class=3D"plain">(json)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>26</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">trends =3D=20
    json.trends;</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>27</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$.each(trends, </CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(i, trend)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>28</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><C=
ODE=20
      class=3D"plain">$</CODE><CODE class=3D"keyword">this</CODE><CODE=20
      class=3D"plain">.trigger(</CODE><CODE=20
      class=3D"string">'getResults'</CODE><CODE class=3D"plain">, [ =
trend.name=20
      ]);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>29</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>30</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>31</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                So far, we=E2=80=99ve written a lot of code that does =
approximately=20
nothing, but that=E2=80=99s OK. By specifying all the behaviors that we =
want our core=20
objects to have, we=E2=80=99ve created a solid framework for rapidly =
building out the=20
interface.              </P>
<P>                Let=E2=80=99s start by hooking up our text input and =
the =E2=80=9CLoad=20
Trending Terms=E2=80=9D button. For the text input, we=E2=80=99ll =
capture the term that was=20
entered in the input and pass it as we trigger the Twitter =
container=E2=80=99s <CODE=20
class=3D"code">getResults</CODE> event. Clicking the =E2=80=9CLoad =
Trending Terms=E2=80=9D will=20
trigger the Twitter container=E2=80=99s <CODE =
class=3D"code">getTrends</CODE> event:      =20
       </P>
<DIV id=3D"highlighter_340285" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'form'</CODE><CODE =
class=3D"plain">).submit(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      =
class=3D"plain">e.preventDefault();</CODE></TD></TR></TBODY></TABLE></DIV=
>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">var</CODE> <CODE class=3D"plain">term =3D =
$(</CODE><CODE=20
      class=3D"string">'#search_term'</CODE><CODE=20
  class=3D"plain">).val();</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#twitter'</CODE><CODE =
class=3D"plain">).trigger(</CODE><CODE=20
      class=3D"string">'getResults'</CODE><CODE class=3D"plain">, [ term =

    ]);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#get_trends'</CODE><CODE=20
      class=3D"plain">).click(</CODE><CODE =
class=3D"keyword">function</CODE><CODE=20
      class=3D"plain">() {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE =
class=3D"string">'#twitter'</CODE><CODE =
class=3D"plain">).trigger(</CODE><CODE=20
      class=3D"string">'getTrends'</CODE><CODE=20
  class=3D"plain">);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>                By adding a few buttons with the appropriate IDs, we =
can make=20
it possible to remove, collapse, expand, and refresh all results =
containers at=20
once, as shown below. For the remove button, note how we=E2=80=99re =
passing a value of=20
true to the event handler as its second argument, telling the event =
handler that=20
we don=E2=80=99t want to verify the removal of individual containers.    =
          </P>
<DIV id=3D"highlighter_607293" class=3D"syntaxhighlighter  ">
<DIV class=3D"bar">
<DIV class=3D"toolbar"><A style=3D"width: 16px; height: 16px;" =
class=3D"item viewSource"=20
title=3D"view source"=20
href=3D"http://jqfundamentals.com/book/index.html#viewSource">view =
source</A><A=20
style=3D"width: 16px; height: 16px;" class=3D"item printSource" =
title=3D"print" =
href=3D"http://jqfundamentals.com/book/index.html#printSource">print</A><=
A=20
style=3D"width: 16px; height: 16px;" class=3D"item about" title=3D"?" =
href=3D"http://jqfundamentals.com/book/index.html#about">?</A></DIV></DIV=
>
<DIV class=3D"lines">
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>1</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$.each([</CODE><CODE =
class=3D"string">'refresh'</CODE><CODE=20
      class=3D"plain">, </CODE><CODE =
class=3D"string">'expand'</CODE><CODE class=3D"plain">,=20
      </CODE><CODE class=3D"string">'collapse'</CODE><CODE =
class=3D"plain">],=20
      </CODE><CODE class=3D"keyword">function</CODE><CODE =
class=3D"plain">(i, ev)=20
      {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>2</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"string">'#'</CODE> <CODE=20
      class=3D"plain">+ ev).click(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(e) { =
$(</CODE><CODE=20
      class=3D"string">'#twitter div.results'</CODE><CODE=20
      class=3D"plain">).trigger(ev); =
});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>3</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>4</CODE></TD>
    <TD class=3D"content">&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>5</CODE></TD>
    <TD class=3D"content"><CODE class=3D"plain">$(</CODE><CODE=20
      class=3D"string">'#remove'</CODE><CODE =
class=3D"plain">).click(</CODE><CODE=20
      class=3D"keyword">function</CODE><CODE class=3D"plain">(e)=20
  {</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>6</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
      class=3D"keyword">if</CODE> <CODE =
class=3D"plain">(confirm(</CODE><CODE class=3D"string">'Remove=20
      all results?'</CODE><CODE class=3D"plain">))=20
{</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>7</CODE></TD>
    <TD class=3D"content"><CODE=20
      =
class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><=
CODE=20
      class=3D"plain">$(</CODE><CODE class=3D"string">'#twitter=20
      div.results'</CODE><CODE class=3D"plain">).trigger(</CODE><CODE =
class=3D"string">'remove'</CODE><CODE=20
      class=3D"plain">, [ </CODE><CODE class=3D"keyword">true</CODE> =
<CODE class=3D"plain">]);</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt2">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>8</CODE></TD>
    <TD class=3D"content"><CODE=20
      class=3D"spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE=20
    class=3D"plain">}</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class=3D"line alt1">
<TABLE>
  <TBODY>
  <TR>
    <TD class=3D"number"><CODE>9</CODE></TD>
    <TD class=3D"content"><CODE=20
class=3D"plain">});</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV></D=
IV>
<DIV class=3D"section" title=3D"Conclusion">
<DIV class=3D"titlepage">
<H4 class=3D"title">                  Conclusion                =
</H4></DIV>
<P>                Custom events offer a new way of thinking about your =
code:=20
they put the emphasis on the target of a behavior, not on the element =
that=20
triggers it. If you take the time at the outset to spell out the pieces =
of your=20
application, as well as the behaviors those pieces need to exhibit, =
custom=20
events can provide a powerful way for you to =E2=80=9Ctalk=E2=80=9D to =
those pieces, either one=20
at a time or en masse. Once the behaviors of a piece have been =
described, it=20
becomes trivial to trigger those behaviors from anywhere, allowing for =
rapid=20
creation of and experimentation with interface options. Finally, custom =
events=20
can enhance code readability and maintainability, by making clear the=20
relationship between an element and its behaviors.              </P>
<P>                You can see the full application at <CODE=20
class=3D"filename">demos/custom-events.html</CODE> and <CODE=20
class=3D"filename">demos/js/custom-events.js</CODE> in the sample code.  =
         =20
  </P></DIV></DIV></DIV>
<SCRIPT type=3D"text/javascript" =
src=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/ga.js" async=3D""></SCRIPT>

<SCRIPT>=0A=
    var _gaq =3D _gaq || [];=0A=
    _gaq.push(['_setAccount', 'UA-143877-9']);=0A=
    _gaq.push(['_trackPageview']);=0A=
=0A=
    (function() {=0A=
      var ga =3D document.createElement('script'); ga.type =3D =
'text/javascript'; ga.async =3D true;=0A=
      ga.src =3D ('https:' =3D=3D document.location.protocol ? =
'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';=0A=
      var s =3D document.getElementsByTagName('script')[0]; =
s.parentNode.insertBefore(ga, s);=0A=
    })();=0A=
  </SCRIPT>

<SCRIPT src=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/jquery.js"></SCRIPT>

<SCRIPT src=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/shCore.js"></SCRIPT>

<SCRIPT src=3D"file:///D:/Project/javascript/WebContent/jQuery/jQuery =
Fundamentals_files/shBrushJScript.js"></SCRIPT>

<SCRIPT>=0A=
  $(function() {=0A=
=0A=
  var toc =3D $('#toc ul'),=0A=
      loe =3D $('#loe ul');=0A=
=0A=
  function makeLi(text, href) {=0A=
    return $('<li><a href=3D"' + href + '">' + text + '</a></li>');=0A=
  }=0A=
=0A=
  $('div.chapter').each(function(i) {=0A=
    var chapter =3D $(this),=0A=
        chapterNumber =3D i + 1;=0A=
=0A=
    toc.append(=0A=
      makeLi('Chapter ' + chapterNumber + ': ' + chapter.attr('title'), =
'#chapter-' + chapterNumber)=0A=
    );=0A=
=0A=
    chapter.attr('id', 'chapter-' + chapterNumber);=0A=
=0A=
    chapter.find('div.example').each(function(j) {=0A=
      var example =3D $(this),=0A=
          title =3D example.find('p.title'),=0A=
          exampleNumber =3D chapterNumber + '.' + (j+1),=0A=
          exampleName =3D title.text();=0A=
=0A=
      loe.append(=0A=
        makeLi('Example ' + exampleNumber + ': ' + exampleName, =
'#example-' + exampleNumber)=0A=
      );=0A=
=0A=
      example.attr('id', 'example-' + exampleNumber);=0A=
      title.html('Example ' + exampleNumber + ': ' + exampleName);=0A=
    });=0A=
=0A=
    chapter.prepend('<p class=3D"toc"><a title=3D"Back to top" =
href=3D"#toc">Back to top</a></p>');=0A=
  });=0A=
=0A=
  SyntaxHighlighter.all();=0A=
=0A=
  });=0A=
  </SCRIPT>
</BODY></HTML>

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery%20Fundamentals_files/70415e9fffab1c47953f5264ecf722fe.png

iVBORw0KGgoAAAANSUhEUgAAAmcAAAKyCAIAAAAfI+7aAAAKfWlDQ1BJQ0MgUHJvZmlsZQAAeAHV
lmdUFMkWx6t7ciLMkOOQc84gOQ5ZomCAYQaGIYzjEARERWRRgRVFRAQUQRcJCq4BkDUgoBgRUIJx
QRYFdV0MgIrKNnBwPee9/fa+vOpTVb/+39u3q+t2nXMBIF9n8vkJsAgAibxkQYC7E31VWDgd9xBg
ARUQgRUgMVlJfEd/f2/wr21mEEALxnt6C7H+1e2/G0TZ0UksACB/xBzFTmIlInwW6TCLL0gGAG5F
9N6NyXyEUTsRFhMgC0S4YoE5S3xqgaOWuGvRJyjAGfEZBgBPZjIFHABIfyA6PZXFQeKQ0Qgb8thc
HsKmCNuxYplshBEb0E1MXL/ARxDWjPohDucHZjKjvsdkMjnfeelbkCeRF7twk/gJzPTFm//lkJiQ
guzXYqMiI5mX4LuQGxmkT7CZLl7LzE9YzNmiHs0LDlzWeVG+fsscI3ALWGZ+stMP7B+0rGfEOvsu
c3SS6/c4cUzPhZwtxhekBAQvc1JqoOsyZ8QGhS4zO9rlux7DdWMs69xkxvd3xa/3+r4G4AJcgTdy
GQNTYAgsQChwA/7AAyCZTY5OW8gVcF7PTxdwObHJdEfkz4vWpTN4LH1durGhkeGC+f+mLZy5pcW+
H148S5AE/h/t0DMAfIaQM2H7j2bCBaCCCYB4xD+aWh5yfwOAC3tYKYLUpXgLvzrAICdZGIgBaaAA
VIAm0EP21BzYAAdkhz2BHwgCYWAdYIFYkAgEYCPIBNtALsgHe8B+UAYqwVFQC06C06AFXABXwDVw
C/SCAfAIjIBx8ApMgRkwB0EQDqJANEgaUoTUIB3IGLKE7CBXyBsKgMKgSIgD8aAUKBPaDuVDRVAZ
VAXVQb9C56Er0A2oD3oAjUKT0DvoM4yCybAYLA+rwwawJewIe8FB8FqYA2+AM+AceDdcClfDJ+Bm
+Ap8Cx6AR+BX8DQKoEgoCZQSSg9liXJG+aHCUTEoAWoLKg9VgqpGNaLaUN2oe6gR1GvUJzQWTUPT
0XpoG7QHOhjNQm9Ab0EXoMvQtehmdBf6HnoUPYX+hqFg5DA6GGsMA7MKw8FsxORiSjA1mHOYq5gB
zDhmBovFSmA1sBZYD2wYNg67CVuAPYRtwrZj+7Bj2GkcDieN08HZ4vxwTFwyLhd3EHcCdxnXjxvH
fcST8Ip4Y7wbPhzPw2fjS/D1+Ev4fvwL/BxBhKBGsCb4EdiEdEIh4RihjXCXME6YI4oSNYi2xCBi
HHEbsZTYSLxKfEx8TyKRlElWpJUkLimLVEo6RbpOGiV9IlPJ2mRn8hpyCnk3+Ti5nfyA/J5CoahT
HCjhlGTKbkodpZPylPJRiCakL8QQYgttFSoXahbqF3ojTBBWE3YUXiecIVwifEb4rvBrEYKIuoiz
CFNki0i5yHmRIZFpUZqokaifaKJogWi96A3RCSqOqk51pbKpOdSj1E7qGA1FU6E501i07bRjtKu0
cTGsmIYYQyxOLF/spFiP2JQ4VdxUPEQ8Tbxc/KL4iARKQl2CIZEgUShxWmJQ4rOkvKSjZLTkLslG
yX7JWSlZKQepaKk8qSapAanP0nRpV+l46b3SLdJPZNAy2jIrZTbKHJa5KvNaVkzWRpYlmyd7Wvah
HCynLRcgt0nuqNxtuWl5BXl3eb78QflO+dcKEgoOCnEKxQqXFCYVaYp2ilzFYsXLii/p4nRHegK9
lN5Fn1KSU/JQSlGqUupRmlPWUA5WzlZuUn6iQlSxVIlRKVbpUJlSVVT1Uc1UbVB9qEZQs1SLVTug
1q02q66hHqq+Q71FfUJDSoOhkaHRoPFYk6Jpr7lBs1rzvhZWy1IrXuuQVq82rG2mHatdrn1XB9Yx
1+HqHNLp08XoWunydKt1h/TIeo56qXoNeqP6Evre+tn6LfpvDFQNwg32GnQbfDM0M0wwPGb4yIhq
5GmUbdRm9M5Y25hlXG5834Ri4may1aTV5K2pjmm06WHTYTOamY/ZDrMOs6/mFuYC80bzSQtVi0iL
CoshSzFLf8sCy+tWGCsnq61WF6w+WZtbJ1uftv7LRs8m3qbeZmKFxoroFcdWjNkq2zJtq2xH7Oh2
kXZH7EbsleyZ9tX2zxxUHNgONQ4vHLUc4xxPOL5xMnQSOJ1zmnW2dt7s3O6CcnF3yXPpcaW6BruW
uT51U3bjuDW4TbmbuW9yb/fAeHh57PUYYsgzWIw6xpSnhedmzy4vslegV5nXM29tb4F3mw/s4+mz
z+exr5ovz7fFD/gx/Pb5PfHX8N/g/9tK7Er/leUrnwcYBWQGdAfSAiMC6wNngpyCCoMeBWsGpwR3
hAiHrAmpC5kNdQktCh1ZZbBq86pbYTJh3LDWcFx4SHhN+PRq19X7V4+vMVuTu2ZwrcbatLU31sms
S1h3MUI4ghlxJhITGRpZH/mF6cesZk5HMaIqoqZYzqwDrFdsB3YxezLaNroo+kWMbUxRzATHlrOP
MxlrH1sS+5rrzC3jvo3ziKuMm433iz8eP58QmtCUiE+MTDzPo/LieV3rFdanre/j6/Bz+SMbrDfs
3zAl8BLUJEFJa5Nak8WQ4uZ2imbKTymjqXap5akfN4ZsPJMmmsZLu52unb4r/UWGW8Yvm9CbWJs6
MpUyt2WObnbcXLUF2hK1pWOrytacreNZ7lm124jb4rfdyTbMLsr+sD10e1uOfE5WzthP7j815Arl
CnKHdtjsqNyJ3snd2bPLZNfBXd/y2Hk38w3zS/K/FLAKbv5s9HPpz/O7Y3b3FJoXHt6D3cPbM7jX
fm9tkWhRRtHYPp99zcX04rziD/sj9t8oMS2pPEA8kHJgpNS7tPWg6sE9B7+UxZYNlDuVN1XIVeyq
mD3EPtR/2OFwY6V8ZX7l5yPcI8NV7lXN1erVJUexR1OPPj8Wcqz7F8tf6mpkavJrvh7nHR+pDajt
qrOoq6uXqy9sgBtSGiZPrDnRe9LlZGujXmNVk0RT/ilwKuXUy18jfx087XW644zlmcazamcrztHO
5TVDzenNUy2xLSOtYa195z3Pd7TZtJ37Tf+34xeULpRfFL9YeIl4KefS/OWMy9Pt/PbXVzhXxjoi
Oh51ruq837Wyq+eq19Xr19yudXY7dl++bnv9wg3rG+dvWt5suWV+q/m22e1zd8zunOsx72m+a3G3
tdeqt61vRd+lfvv+K/dc7l27z7h/a8B3oG8weHB4aM3QyDB7eOJBwoO3D1Mfzj3Keox5nPdE5EnJ
U7mn1b9r/d40Yj5ycdRl9PazwGePxlhjr/5I+uPLeM5zyvOSF4ov6iaMJy5Muk32vlz9cvwV/9Xc
69w/Rf+seKP55uxfDn/dnlo1Nf5W8Hb+XcF76ffHP5h+6Jj2n346kzgzN5v3Ufpj7SfLT92fQz+/
mNv4Bfel9KvW17ZvXt8ezyfOz/OZAqROQBoK6XBMDADvjgNACQOA1gsAsX2pJl70gJbqeIQX6vnF
mv4/ealuXvQ3B6AuC4AgBwBMkbmxHQA1ZKYhs7/Dog6bmIDlDpZaUoyJ8SJBpBakNCmZn3+P1Ig4
LQC+Ds3Pz7XMz3+tQRb7EID2maVafMFb5AQAR9SNHL0DO++EZi0+/8PwN/Ze6qC76EBHAAAACXBI
WXMAAAsTAAALEwEAmpwYAAAgAElEQVR4AeydCdxXw/fHlZASaSVEq1RKi5KkZC9tKlkqpcW+hCzh
J/uaImtoQUUq+5KlX9mSLEloL2mlRLRo/b97zt+Y38y993u/y9PT8zzn8vo298yZM2c+c585c87M
nVtg+/btu+mlCCgCioAioAgoAjEQKBiDR1kUAUVAEVAEFAFFYAcCajX1OVAEFAFFQBFQBOIioFYz
LlLKpwgoAoqAIqAIqNXUZ0ARUAQUAUVAEYiLgFrNuEgpnyKgCCgCioAioFZTnwFFQBFQBBQBRSAu
Amo14yKlfIqAIqAIKAKKgFpNfQYUAUVAEVAEFIG4CKjVjIuU8ikCioAioAgoAoVyLwSzsi5b/yOP
PLJSpUo2RdOKgIPA0qVLp02bZhOPPfbYMmXK2BRNKwKKgCIQhkCw1VyxYsXMmTPDyiSkN2rUqGjR
ognZ0mR46aWX+vfvbwsZNGjQlVdeaVPyZ3rLli0YhkWLFv3000/8/vHHH2XLlj0w6ypXrlyDBg32
3Xff/IkMrf7kk0/OPvtsu/nvvvvuqaeealM0rQgoAopAGALBVvPDDz/s3LlzWJmEdCxujRo1ErJl
N8O2bduuvvpquxbMeadOnWyKSSfFbErtaol169Y9/fTTDz300M8//xym2+67796kSZPTTz+9bdu2
VatWDWNTuiKgCCgCioCPQLDV9PlyI4WD6R9++GFbc4xKmNVMitmWueukR40ademll/7+++/RKm3d
unVS1vXFF1+MHTs2mllzFQFFQBFQBGwEcrHV3HPPPYsUKWI3Zo899rBv81X6tddeIzygX7DJV52u
jVUEFIGdj0Autpo3Zl07H7JdsMbPPvusY8eOvsmsXbt2tWrV9tprrx9++IGw+caNG3dB5VUlRUAR
UARyEQLBVvOUU05h04TTjNWrV7dp08Ym7r///m+88YZNkXSFChV8Yn6gYLf++uuvYsWK7eTGPvPM
M5s3b7YrPeaYY0aOHFmxYkVDZOF27ty5RGXvvvtudh8besJEOo1Cq0KFChUoUCBhLRlkQOE0a0xf
Qgabo6IUAUVgl0Ig2GqWzrocRVeuXOlQiJE2btzYIcotu1GcNcVatWp17drVYWbryuzZsw2xXbt2
jkBfTtOmTVu1akWR6dOnv/DCC6YsiV69eh1++OEkvvvuuxEjRjD22bmkP//882uvvdYQS5Qo0a9f
v6SYTVmTYL/xU0899eOPP2KKaAv+HJOJKlWqsNEG/69169aG0yQiNP/tt99Qkh2wy5cv79Gjx9FH
H21KRSRYpnRyAdY2meQWLFgQcLjOPffcoUOH/uc//3GK2LcpNAoD+c4773z11Vc4tUuWLPk162IO
weYj3utgEy/XySeffP7555cqVcquS9LpYMKeYaYIH3300YIFC+bPn88zQxeUL1/+0EMPPeGEE9gx
e8ABB/g1OhSQHzJkCMhz0Xy6D0/9pptuql69usOpt4qAIpCvEcC0xLwYShykGAfDyv7999/OyyeH
HXaYwwzPPvvsY8tkgHN4GMhsBtKvvPKK8Lz44otOFq8QSFbMTS6MqvAnxSzy5ZfBmnddnCY4KrVs
2ZJx3C5FOlDztWvXXnPNNUxEjIRhw4Y5BQNv/X5BAo0KZDZE7BmW3tyaRMqN4hUXo3lEAteTyRNd
b2qURGqYbNq0ifkBj1ZEjfidl1xyianOrwhjzxyrZMmSvhC0HTBggCmrCUVAEVAEgn1Nf/hIlsLo
36JFi5dfftkUZFRdvHgxHoCh4CExdptbEpg9dnjinRji5MmTTZoES3REj21KTqVxpU488UT81GgF
3nrrLZowZ84c3paM4ETOFVdcAVsET1hWYEC4T58+eL045WGvZjKnYcnTkZnZRjnC5Rar/Nxzz2HJ
hg8fHshgiAkxwfQef/zxxJxNkcAEf+Q4soFZQrzwwgt5MgMZ0JapTLNmzerWrRvIoERFQBHIbwhk
44l6fnDSMYFs+3Tg5q0JNrbYRKcIJtPZN2sz78w073jYJhNLj6N811133XLLLc2bN7c1YWaADbMp
frpv376pmUxEAchBBx3kyCRKyZba4sWLE+O9/PLLn3/++TDDYBfMYKMAhDA13rwTcpDq8O3GjRtn
V+2nE2Jy1VVXJTSZvlifkhAZDKdfSimKgCKQTxGI7277kcCICC1iWShiLc2GlYU6Ux2bUzinxs6V
9HXXXWd4WKZyGJ599lmT64faTISWJdgPPvhgwoQJTnFe7YduLnY8IS0pZql9zJgxtmRW0ZxoJztu
bAbS//3vfyM0d5jlFm/MFIlO3HzzzYESHCJrdZginP5AaWk2CrEEGM4880xcye+//57Yqanlm2++
cfaRoRgHUBgGEn5vOsrLrcEEu+szXHDBBZ9++imx7jVr1mBQMasyx+LMPFNXYEX465z5wOSGpWg/
VMsMAKfTSNCEIqAI5GcEdovf+GStJpIJbdlDG/tTTHXsubCzTJrNF4bHD+Jh4UyuP/wZqyk8jHRG
rCR69uxpijuJ+MzEkNksZUt+8sknHWlsjWFKYfOwr8Tw+JrDyR4ZYtpslrnsssu6d+/OpqfXX3/d
FIlO4KM71dlVO2mio2wIwq7YMtNvFNMgYsK2TDuNfCdGzbNhMySFCfAyU3HaNXjwYFugpLHlxx13
XLTV5BRGDh00ZZmr+YYTomHQhCKgCORnBLJrXVNGNDwMe3snQw+7Kw8++GByX331VTPq1atXj72X
csubhYx0sr/DCc/uIqds0wrW/4zyJDioz38VkjMF7V3H0QFYtrTgiKf8vsR+++03ZcoUjG6cV0p4
3DlF6Msvv2SSYd4RSr9RKM+qsw0LwQa6m8kWOHAVLlzYziWGbN/66QhM2C6L1beLHHXUUYSXbYqk
CRFPnDgRNfwsQyECYa/+ggkLAaNHjzYMJBYuXGiwsumaVgQUgfyGwP9EUDPe+IilTdtqEs+0XQd2
0IgmjtXkvZSMa5iCQMKPTileUdjbuxisbbZoe3bIIYekbDKlFsb0qVOn3nHHHTGdTqz4xRdfbDTM
VKOIjtKz7Gxi0oDHBjIcjM6mWSLDGB5THQmMt33rpyMwweQ7/N26dQsDkBOjkjV4vCXlyCfg7FD0
VhFQBPInAtlrNQnJOse4iyHEszHDNG9u8FIdb2iYDhCryRedYDNEEv7amJ2709KpfQ0moWuVvv44
TCxwsreFFcrevXtXrlw5WibrvniowpORRvGm6RFHHMHkhmApMYPo2tPJxXN1imf2C3G26+lUpLeK
gCKQzxHIXqsJuGyysCFmUwy3tqNJfAxvQA4uEE6+uLJ+/XqicHZBXpNgT6ZNyam0v74bRxMW9uKw
pc/Dlhy2tHDwAicBoSqLoyyphjlbX3/9tdSYfqM4n4hPqSxbtsxvAlty2IgU+IaMzxyHwrqmw8aB
FQ4lndtdZJ92Ok3QsoqAIpBNCGTvuiZK4yDyPobRft68eQys9jsnZ5xxBrmnnXYaOxXFtBANw3A6
4VnH+hqBSSUSRgVtaWHM/mExHLVDONEu66dz5GR5orVMR7huv/12Ts/xz2YyUdM0G8WHPHnrkQ1B
dsMvuugittSy4iibp+hie1dzWEDVlhCW5vPjThZr4Sx7O8SUb33dfErKwrWgIqAI5GoEst1q1q9f
n82TnA9nYOJFvY8//tjc4muSJibGpkqMpdDlcADDQyIjVtMZ1m35fjqM2V/04gWbk046yZewcyhs
6uEVizvvvLNDhw5hNaJhly5deFvDICycxn1Ps1HsgHXgIkjLZuAwfdKkY4kdCbzcwsZgh6i3ioAi
oAhkHIFsj9AySXf2BOH3GDeOQ8bNWxz2siWHCtnbZzhHtEGDBsk2nqq57FL+epjJjc/sOzocuuYc
cmTESgK/mUipQ8zULQ46598SlWUrL28rRohlqdjJ5a0MoaTZKGcFGplOpzv1pnlbs2ZNp2cfe+wx
v3VSCwfmcdpwmjVqcUVAEVAEBIFst5pU4wygq1atMugTPAxM89KCoYsEZ5S0c8PSOFjOCaX4uITy
DL8x3lDiM+MWS1TZyOGQIEz+jBkzDEUSuF9st+E1Btzo7LOaplI242AFqe62227jtF45/5ZcVgF5
5R9n3Z6IQOcNUROYTbNR/mG89qH81EVknsuommaCDcs00xayYcMGOsXpAr7Sg71ko5kT7bcLaloR
UAQUgaQQyPYILdpwXivbK9jg42tmmx8sHBtuzd5amznl8CybUMzSHQL//PNPHDK+vMGxRJxNil1h
y4ypKD4z56rjnNk7aHjPhLcsGjZsSMyTF1J5m5CYIYO4/x6nqS6bEu9nXSIc2DnQjimIvxeJVWTe
2rTnIuk0qk6dOk5zCBfzAiVo0O/YbF5/dLbw2FMWp2ycW07AAPBffvnFMNOhnBbLu788RbQL9xfP
26nUMGtCEVAEFIHUENgZVpOX31m89M8dZQeNs5yGx+ZbTYZ+52TX+E1FoL0DhYKYOg5lFQn2UfJQ
4jPjpWFyfK14Y5IrvnrZzYnF4gqshR1MzB7srHQaxU4fdh7ZAXBe3Lznnnts+ZlNE7SnC5zlZCYH
WGiuzNal0hQBRUARMAjsjAgtlTlBWqnedjSFYgdsjYoceeMcOmOyEibYxsnRdAnZhCEpZt4x5S0a
1mVjCs8+NuyHY/6j62JRkO+I+ftpKZVyo7C4gQfDGk3oxJjfCjVFEiaIYfAKk//lloQFlUERUAQU
gZQR2ElWk7UlOxgo6vpWkwgnXzB2GpNyeBY5VPrmm2/ee++9DOuOWG7tA4mSZYaf1UqWLZGPPSDg
6cuHQoCUfTp8PfuBBx4IZEifSEySFz84Loc1PA4ZYIE2UCavvvBdLbQlbty+fftAHogpN4ozgFhY
JWrqSOb8Ac5zZ1O080ql/zw4BePcSnACeMNsJx4wG4zZKxRHmvIoAoqAIpAQgQJpLi8lrGAXYSB2
x3uinJtDFJG9JLxxz4v//ge2RNukmKUIG3/Yw8lWI5ZRWUdkYzAuIEM2C3spO8qpQYcmHJNLY7kI
R7PNh7NYuZiOJGuoUmgU0HEqEGF2cKZGlhidIHxqjYpTilg04HPRC3Qx/jdLAOAfNqGJI1N5FAFF
QBFwEMgvVtNptt4qAoqAIqAIKAIpIBAczUtBkBZRBBQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKG
gFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sD
FQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATy
PAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGp
ghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQ
BDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8
F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUAR
UATyPAJqNfN8F2sDFQFFQBFQBDKGgFrNjEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGgFrN
jEGpghQBRUARUATyPAJqNfN8F2sDFQFFQBFQBDKGQKH4krZnXVuzrvillDM+ArtnXQWyrvilHE7t
JgeQOLeKfByUsoknI+Bnk24qVhHwEYhlNbdt2/b777+///77M2bMWLVq1YYNGxjYfVlKSQcBrN3e
e+9dqlSpWrVqnXzyycWLFy9YMLlIgHZTavgr8qnhlpFS6YOfETVUiCIQH4ECPLXR3Js3b/7ggw/e
fffdOnXq1KtX76CDDtpnn32YHkaX0txkEcCH/+uvv5YsWfLVV199/fXXLVq0OOmkk/bYY4+YcrSb
YgLlsynyPiY7jZIm+DtNT61IETAIRFlNDOqmTZvGjBnz008/denS5cADDzTFNJF9CAD7smXLnn/+
+UMPPfTss8/ec889oz177aZM9YUinykkU5CTLPgpVKFFFIGMIBBlNTGZ77333vfff3/++efvu+++
0WN3RrRRITsQ2L7jvzVr1owYMYJo7SmnnILhjEBGuykCnOSyFPnk8Mood5LgZ7RuFaYIJIHA7v37
9w9kZ5EMj+ftt99u3bo1a2yFCrECmiCWGygnjDhy5EiCMwcccEAYQ6bod911F7Znr732ypTA7JbD
pFuusgeUnfjhxKpVqxYrVixsypKRbvrzzz+HZV0HH3xw2bJlk2rgqFGjUujHKVOmEIg+/PDDly9f
/swzzxxzzDFJVRqf2VQUp8g/wG/facjH0SrjPAaT3At+xjFRgYpAfARC95ts3Ljx448/rlSpUsmS
JbZs2brp77+3bdvOGM21fdt2XM9Zs2bJbWq/r7zyCl6sXfbEE0+sXbt2zZo1ixYteuSRR5Ju2bKl
zZBaetCgQX/88QdlO3bsiKlOTUg26RamDO4j65SlSpaqUqXKRx99RF+E9WjCbjriiCOwhbR9zpw5
YdUNGTLkm2++ueCCC5gehfGE0f1+9DnZPoYO1113ncmaNm3aO++8w+2KFSuo3dAlwdMVR22nVOCt
qYjcLVu2BPLYxJ2MvF11NqXzJPhhfw5KVwR2AgLBe2iZdMvOlGbNmmElt2/fvHXrFgZyNqeYfUD8
kTMMkYeWWTtqQ4O9gbkUx0fBNphc/FpEsUcX72ry5MnYTm63bNmMeKnFh8OU9bOgSC4JauF66qmn
CHWSEOY4ZU29jm777INuBYwop/akJONEGj+S6oCFgZvfLP0LYDUnTZpEX7C91rCZ6uBP2E2vvvpq
uXLlLrzwwocffnjgwIcCwQTtzp0716xZI4VG0Ylc0d306quvgDxe6S233CLRZorQRgCUR8g8SKZp
48ePZ9/ZRRddlKX2QNMRhkESCaGmFqmICdPEiROfffZZIyEL+P/fCp5TyMdsRWCvxSzLAxAGPv1G
w/3H2Ab/oYd4ZgKuhMijs+llB3wpa57nZMEP0EZJisBORCDY1+Q5Zjjmj61kyZK8/4CllLcgGN3+
zrrQkMGdiz85Lv7FpTsq67rkkkvw7SDypgobQY899tj27Tv89ttvUHh9pXv37jiRRH2JDvFHJWWN
HG65EC4Jfr/7bubpp58+YMAATCkq4TDxVkbjxo3vueceJtHUO3z48Jtuuqlv376E+3r27CmiZs+e
jXd41FF1LrvssqwxfQuibrzxxrfeeosE64UUufbavsg0RX788cesIkddfvnlDRo0+PnnJY5WopLo
Rr2Se9999x199NF4cvg0woBuI0Y8x35jmi8VXXXVVXhOwDJ9+nRmIWhFFswAiTFr2rQpsP3666/c
ikxGE9CWMR386QUaTo/4T0XMbkIUFogwrKjt6IxZ+uyzz2699daLL74EBdD/ueeeq1u3LkrSXz16
9AANYFyyZCm5ojOtgGH16tW0Aq1++eWXdu3OrFat2iOPPCIgOL/Dh4+49957acibb74pWWY85YlC
gjTclIICHRD+UXvHY+aoDYXqmjc/sX79+oLno48++sADD4iQc845h0bRXuRgNX/++WceGLaCgzbP
xi6CPKqCNibq+OObsoiAwv369eNRwemXVsydO5e/lNq1j2rYsKG0kcdVEjAMHDhw6NChtBFsnYdQ
ivNLLn8gYeAzaQFqwywJB3wh+uA//DDgN6feQPA//RTwN0kv++D37p3WY4+GeikCOYhAsNVkoFm3
bt1+++1XuHBhMZlmHJcxHY0lAZ2LPwxWpxgTCequXbuW6S1EhtEXXngBCpz8aUEhmscfEqMDf4Tr
16+3JeyQ8s+F8H+SBfmj/eKLL/C0vvvuO37vv//+Sy+9FPeLVTGCirBhDBgXGjVqBAXTJURGzzZt
2nDbtm1bGX/hxDJhaMOKIPm000778ssvzzzzzIULF4KA0cFO2LotWLCAMCOO2jXXXMPqqbCx35h1
I9waxhR0Gz16NJrQhNdeew2txo0bh/lkDRFm2H744YcPP/yQXKAGDQFEfoGdC/zJoi/Qx39K4nQT
wplzoGevXr2o1NcZi4iNv/322wcPHgyDrT/9hdlGzwoVKuAp+jpDQSvGblbH6XQwNGiTJRcC582b
x9QHd5bnQYhZbf3/yYENqeRCoe+i1cby8RQB7+eff44VpyAPHmZeJDAng4G0VIS3TR8xK6JfKleu
vIsgj3qAwztdb7zxBmb+3HPPxTry0pGoRy4IHH/88UDBlLRPnz60BSsrHQFEPPannnqq36GCgPzm
SfBpu16KQA4iEGo1mSoyamPkzCDOhqCskfz//U77j5M/+xNOOAHPgFc5MVRYCHJZykII7h1jGRuL
oGAhWKosUqQIBpUVU5Fsy5E0cNhEhryLL74YTwULyhCDGSbQxxZTFvxgQ0irVq3atWtHRLdixYqs
k1GcwRHjh7aYLvYBGbFSo18EPdktfN5551GEIdgUsdUwQgyRWQLeHvYG68LYjRCyEI5Ti6mTNN42
AoGldOnS1157bYkSJQ477DCcM3Jr1KhBOBpjhs4CrPwKzlILdhEiksOsJlkwRHQT8xXiY71798Yt
QGagzqKq1GjrT7cyH8Iv//bbb5kcwODoDAW0r776atahcdyZlDAZEjnml9rpHbJwm5juyJNALVzC
43S3yKQ7otWmu7ExZ511FhMdEKMUAo2oLPH/uuxOrtMKA/7ORx49eZjZ7cVTQXOAiHkSDzwPBvMP
/nZ49QityIKOQeWp5o+I2RhIVq9eHc6wDhVs8yT49LJeikAOIhC8rsmfHJaDkY7NJoz4MgbJqMSv
RAvlz1JUh5O/aijckqAUaYJ+M2fOxLXivUNKQWHmy0YPYYNTiE7jJZdfOyFpGZSJ0O6///4MxGXK
lMniKshqqzCIQMYU7LRfETzCQMIpQosYpAwxpm4rV66kaWgCP8OZjN2kGYVFH1OjtFHo6CBqoD+2
lgAp/gT2iW1QwsYvNlLYpAvEiptck0B+wm7CC2QI7tChA/a7fPnyYTojikskG/3x2Nq3b9+kSRPo
0r++zpRiQiNlpV1GDqVAFXeQ6RT4cMvJR9xef/31wsOvSUjV5jeO2mPHjiWYzGtRN998M+8TC2Ii
EDlZsv+Vb+f6rTD15hTyDnTozUwI9JhiSovoaLxntmvx/DNL++9//9u1a1eywjqUFuVV8E1naUIR
yBEEgn1N/hqZyxPyEtdBJuMQzYWuJk0Cy4Hnh9/DHz9eArcQCdmxbZKVJP7axQ/D88P1oez8+fOJ
uNoS7LQt3Ax2MDDmsibKuhRrpVyE2iDaDBTklqAiK4WoQS6+KYZHhBuxfhEm+5guQpTEu+644w6K
iAWVgvavEQKR8Quzx5Rf9DHzBsNvV2SnRQjYYv5vu+02YMGNMKVIGKcHHhaJ6QuIlHIuiAm7iXp5
r6Nbt244tUwOwnSGTRSgCknwCzPhQZxUGshCJhRfZ5vfTouQCRMmgA+OkVzEqAnSwmbQMAlTKQlh
iFYbk4BdYdn1hhtuIPxAKfodE0KCB4+jH6VFRj5evuTC4LcColw7H/l/at7RakmLzjyTBGBZi4WI
x8/6AtMX0kRE2NfGGjkLCtwGdqjIyavgA5ReikAOIhAwFqMNf7e4mIzp7OIRg8ffIbZTxhQS8OA9
cMAeFwuNBOiwjuxoYOfIokWLCCvBw1YXButmzZoRjGVfDBt52OZALvsdiEoRpBWZxiSbBMIlLb/c
Gk6W0PAw2ADCYMGqDwwyxJiywol8Bmj0IbTIaqjkwim5dhEjnL0kRIDZCkQ0jGYyBFPK1Gvk27rh
vRH5JNxHiBi7wiQDNsNAWaciI0Q0YUAEN1Y98QU7depEroGXslzoQyCaXhB3H8nOhZyE3SSV4vfT
leyHJEKO+XR0luqEkyokwS+xWdCjv2ighK99naUtpiyiTHES9Hv37t2FQhaNZY2WCZaPjF3Q6GDU
9qEmyo0hRzGCkPQaVbA0QLSWedXUqVPpehFoKsICASbNx4H2W5FTyJuWoq0oTEMMkUnn3XffzaSK
P64777wTn55cnnwawp8Y3ie3tMh/CKFzGfBFchj4pl4pZWoX8Pkr86uwwb/iiisouDPBR0O9FIEc
RCD0pQ78LeazTFcJBPHmO38YDEA4K/yirgRp7QR0ikgQydDZ/CkhJhwmgkvSTiKojPWSll+RaShG
eFguuzeZiTOIwBBWFiG4FE5FCSUj8JNPPiHcx4agMMmOVtg2WoeVFbqTK7dh9RIPxNYaZGwJOFKM
TQx8DPe4zlgvO9ekU+gmyorO+O5hiol8yZUdvAAugBid45Q1esYE067XL+tDzZNAKwwnKqGt3elO
vXhswk8reA53ceSlXTwGLIpj2+xmmjQJ2mg6lNts6heqYOHDRpt5mP3YAylTIgO+gzxaMTvMFPh2
8zWtCOxkBEKtJn8DDDHEOZmb4yMyvkT83e5kpbOjOrbqEDTmrxp7SVrW4bKjIl8mA4oZYkhwy8UI
hWPN2b+cqOcMmraE/NZNdtvTT4OzIp8+jKlJSAf81GrUUopARhAItZpIZ3bJ/h1WIvkQB4bzkEMO
IZDFKGMGmoxosIsI4W+YxuIr895nTqmEDlys2LGOhclkEzLhODYcscgaoVK+6qYIHNLJUuTTQS/N
sqmBn2alWlwRSBmBKKuJUBY1Fy9ezJ4X3oNkPwUbNDAqOEAEbFOuUgsGIkBIFreevU6gTeyLdyhB
m12vEogOLGKI2k0GihQSinwKoGWqSDrgZ0oHlaMIJIVAAquJLFwZBnHilhwbizfGGh7OENPDpKpR
5oQI4MHjyvOiJ84lu3UqVKjANCXay7RlajfZaCSVVuSTgiuzzGmCn1llVJoiEAeBxFYTKSyeEbpk
nwUXW2x4Hf2my7AAACAASURBVJMZYhzpyhMfAdx33l1h8xT7KbjC3tGMEKjdFAFORJYiHwFOdmel
D352a6jyFQEHgVhWU8qIf4m9ZHRWX9PBMf1bJt3yDgCiSKcsULspWegU+WQRyyB/psDPoEoqShGI
RiAJqxktSHMVAUVAEVAEFIE8j8C/L4Hl+aZqAxUBRUARUAQUgTQRCD6HNlAooT8uIrRcgQxKTIgA
qzhcRKW4EjKHMWhHhCETRs8I7GHCla4IKAL5CoFYVpOFTF6658VNjvfkgA/Oo0ln0M9X+NqNxdpx
xA8HKXDeGy9iOgdH2Jxhae2IMGQi6OnDHiFcsxQBRSC/IZB4XZNXGji3k2PQeYOQU2flc2BM3vMb
Uum3Fx+dTcgcGcGnQDmunbNVTzrppKTeLdGOSKEX0oQ9hRq1iCKgCORhBKKsJpN0Xp8fM2YMr2ly
NCuHG+RhIHZm0wCWz0w+//zzvJrJMdycYxDtu2tHZKR3koU9I5WqEEVAEchjCERZTUwm59ByuAGf
MORzldEjex7DJXubs303/uPLFRzOTrSWk2ajDwDSjshMdyQJe2YqVSmKgCKQtxAI3UPLEtqKFSuI
JRJIJIrIPH379h2vadoXnziYNWsWpwXZRCfNh5w4jQ/iZ599xocPndzsvjWV4tsNHDgw+6ozFcWp
Ytt20N2GpTy9xel8wBKcuQ17ruJ0RJxK0+fh05jSlQlFGTRyL+xh3aF0RUARyOcIhFpNDgDiY798
GrNkyRJ8AHjT339ztsGOwX7HP9uXL1vWoUOHRo0a3XjjjXy1mEijZPm/fHcebxU65uGdd97xGTJI
YZsSJ57zVUIj01SKZRoyZIihSwIHmo9HUqRjx458/tPJTerWVEQpThxMWBb3kQXjUiVLValShe9N
gnbYgxjdEdIEPirJ9eyzzyasNx0G05WOkDwJe1h3KF0RUATyOQLBe2hxJmTfCt+UzjoIaPPWrVsY
5nE6ZR9Q5y5dqlativMhYdsVK5aHHU674z0VCmN4sw4VwlQ4iGe9ghEaKE4ql2EdB27UqFF8lZoE
ZWV8p1JRz65dXv0YP348+5suuuiihx9+mI82G92SqpdSpnX41hMnTuSLJWAo0oBIUOIWIiphMvnl
FjpWc9KkSaDN9lrDJgWFP7oj4Bk3blzlypWlui1bgDczYBodJCFg0kwbQ8lyYIdo0BDYfa1s2AcO
BPYUdd62bcdJVagksDNvMGrvAF36OHnYjRBNKAKKgCLgIBDsa4rVxPDw1Vk55k0+rskgyIG0U6ZM
4bscLHZyy4DFVbJkKSwBodpLL72UTyhzYYQki/oYQ8k1IylvsBD1PfbYY/FWWdvD6eLDllAeeeSR
6tWrd+7ceebMmZRduHAhDI0bH8eviMId5IWNxo0b33PPPfg3ECkrTpswsEx47733ovabb74puWgo
oyoJNBE2+aUsFOg0DcPJN4qFft999+E9d+jQ8YsvvhAKip144okQ0RzKo48+ev/9D0i955xzDtFI
iNI6vvCFbux0Pf744/l6CVhdeOGFTZs2BRA+VsqtlGI0p9KsUb0ACKMwptFYWbuHojsCgTAjU8Si
xtix49q0aUPknPTgwYOlF4ClX79+aFK16uE44mhCrtMLUIYP38HWt29fPmvTs2dPkckbR927d8eR
bdWqNZ9koZlwOpcDO7mmrwV2p5sc2CVXYMfpx2sX+QJ7/fpHs7gOBdgfeOAByTKwMxmjfw3sQJ0R
2O0u0LQioAgoAjYCwVaTkYiRl+9vcJ44ziVDvBnlGevnz59fpkyZmjVrCt38vv7663wdhXjjW2+9
NWzYMHbekkVltpGAUq1aNZxUwr/QGbuhMBSyYLb//vszYhITxvJBxGXED5s8eTIJbrnuv/9+rDKe
Gaut8AvR/FLdvHnzTj/9dOwu8oUulok0CTQxzJKAQo0DBgwgdNyrVy+ICxYsIE2l11xzzV133QUF
y8SAPnr0aCYKeN5Q1q5diy0RCRgSGEhLReXKlaMgJhZ3E/+P6cUPP/zw4YcfYoAB01aGIvLqPQiT
BdpgbneMpKM7AiGwof8NN9xw++23c9u2bVtitv3798d4oDNfRYXIhIBpRLdu3TDw0MeOHQvR7wXY
hg8fTtQdeIFFEMaPxARSEBA4uJ8mUNa+8iTsfkcoRRFQBBQBQSDUauJqMKwzYspASZrvWMlALyVJ
26Mnaawmo3axYsUwHhgYbiHCLBKMzWAdEeFYVmwPu0VESNmyZbF2fPHj3HPPxS5iLY477rjnnnsO
9wJmeLCsvDOKrSX6ioeKbZaC5pcYXbt27fBBW7dujQSRbCqFDU0MsySg4MdQsHfv3riSELEuuHdY
IKwFZpKqixYt2rBhw7POOuvLL78EAXiQaUQZ+XbC5PLBLw6FwB6zqirQya8gKTrQUohUFGY1yYIh
sCOQQF0YafxLnHURiIuJneaFlkGDBvHtFFEYJ4yvdfLpMcDBokP0e4EmtGrVCgxpcsWKFdEZNkS1
bNmSfsHKMqGBR2oxv3kSdlDVSxFQBBSBQASCrSZjIl+qwgKxFYUh2wyRJLhlRfOXX37hPX2bThp+
FueEiAslThi3ZqhFA25vu+22yy67jAGdPUROljBjdwlaYnfx+fCNmjRpQqAP4fg6RGgZ1u++++5O
nTpJRfKLyRF38Mwzz7zqqqs4f4dbyZJKSZuEKQgFt4w1SARy+AD0lStXohVVIOe1114TM4lzhqNG
RBoLAQ86+2ob+XYuHjmm97DDDiNgi9Np6hUh/AKmgBz2XTB4IjqCXJqAvccoEvHmVigsPyNWouuG
aBJyJlFgL1BQ2EwDcSVxXk1ZQxdKXoUdVPVSBBQBRSAQgVCricNBKBJDxfjI4M4lAyW/+F7169dn
nQn/j1ucs6lTp5LA0WRJj4EVe4m3xy1EauWXy5gT3j9hdY2BHjbxI8liYW/p0qWwYSlPPfVUElBY
YMPdJHpJFoaQ1TWMKOaBi/jnDqH/XBMmTGBNlErlwkMlSEvVplKT+KfEjn+FAScMo4hHSEOwytg5
REkt2H4MNn5ejx49iILi6VIKa4RxJUFDOGIQyaSNfPw5yYUIeoSdsU/Nmzd3JhnG3YSH9WDQht/v
IYgRHSFF+LWvK664gnkDswHMvIkeAyAVoSQ+usAb2AvSFqQJMiTQnCg6t4TlWX62KyKdV2H3O0Ip
ioAioAgIAgEjNRmMnviCjPisU4phY4jEcMpYTwKvC2PG0iYRP4wZS2sQ8f8WLVqETT3yyCPxrqBD
lIFYEqRJsC0FK9WsWbNKlSqxkWTu3LmSy7Il7/sTYMQThcK2mgYNGhAeJPzIAicUnELcPgw2tk1q
hMiFbsjp3r273PIrO2KwENQolUKkXYZBElCkXbfeeistZQ8t1RGtJbJKrBLDiT3Dq65bty63NBmD
REFmA0RraR32lTMKRIKpCJtEABk5hIiZQwAFyhCnBRzKGgApxcW0A2ZwBm0kSJfYvxCjOwJm3GJO
OuS6+uqrgQhL37VrV8w8urG1h0oRwhTk4osvpmto5hlnnAHR7wVpAlqRm6XdjgQro/Qp7+cQGCdI
Cw9Eczmw8zDwVITBLpIpi84iwYadWYuBnemaAztlDexM0RzYyTWws9KcPux2F2haEVAEFAEbgdAd
/4T4pk+fjjPBEMyiI8McIybeGL+UJ8EvYzGDVMWKFRm2hA4RM0Cclrji/1TzvyaBjScslVGKpU0C
ht9++y3rcByYwHBJeNYUJD5MDBBny1BIYIEkhCtEU6/cimKGP7VcjBn2snTp0kbO6tWrcSLNLbXg
umHPbIpJk4Af55gE+tMo2mjnShoXFtuA4WHEZ5MtoPk8UOJ0BGym4X6T2YxKfPjJJ5+kUbYmdJ9E
1KUXEOKXFZXoLzAPyxWe9HMFdnAzbQFGPHsjGTpW2XkeTC5q8GzATwLY0dlurCjJb0zYDb8mFAFF
QBGwEQh+XxMOzB7mEHcQ9w6HgwEII2dKyriGk8RliJJgMc+h+LfGAgkzHhhjH4tqMuQZflY3Tdok
dsJxuNTrDM0HHHCAUUASzrTAybWVxPoClxncSXDLhdF6+eWXQRicI6TF6QinducWeOk7GmXPA+Ax
fZewy5x+ceRn6pYHgLmULc2GUeiBj4QpYvPjcwNyyrAbmZpQBBQBRcBGINTXhIm5P5tBWNZipwyG
85BDDhHzZkYiW1A6aSriJUJ23qYjJFeUzTKX21kr5RVDoqlsZCXazP4jDEaE/ml2BF4XYfadY/ki
WpGDWanBnoMKa9WKgCKwyyIQZTVRmtF28eLFLODx9h4OIhtn2KHDjF5Wp3bZVu2aihEbJKDNhibw
ZH2RL6+BZ/ny5aP9J2mLdkTKfZoO7ClXqgUVAUUgryKQwGrSbBwdhnhO6uE4WVxP1sZwlZi851VE
sq9d+Og465xpgHPJzpcKFSowEYn2Mm1ltCNsNOKn04Q9fkXKqQgoAvkBgcRWExTYW8E7DKzDcbEL
hk06zN/zAzqZbSMOOottLN2xjYiLBUt7qThOXdoRcVByeNKH3RGot4qAIpCfEYhlNQUg8S+xl4zd
6mum8NDg9GAmJbidztqwdkRS4GcK9qQqVWZFQBHIqwgkYTXzKgTaLkVAEVAEFAFFICYC/75MErOA
sikCioAioAgoAvkWAbWa+bbrteGKgCKgCCgCSSOgVjNpyLSAIqAIKAKKQL5FQK1mvu16bbgioAgo
AopA0gio1UwaMi2gCCgCioAikG8RUKuZb7teG64IKAKKgCKQNAJqNZOGTAsoAoqAIqAI5FsE1Grm
267XhisCioAioAgkjYBazaQh0wKKgCKgCCgC+RYBtZr5tuu14YqAIqAIKAJJI6BWM2nItIAioAgo
AopAvkVArWa+7XptuCKgCCgCikDSCKjVTBoyLaAIKAKKgCKQbxFQq5lvu14brggoAoqAIpA0Amo1
k4ZMCygCioAioAjkWwTUaubbrteGKwKKgCKgCCSNgFrNpCHTAoqAIqAIKAL5FgG1mvm267XhioAi
oAgoAkkjoFYzaci0gCKgCCgCikC+RUCtZr7tem24IqAIKAKKQNIIqNVMGjItoAgoAoqAIpBvESgU
0fJLLrlk33333WOPPSJ4NCuDCGzevHnt2rWPP/54fJnbs66tWVf8UvmEc/esq0DWlU+arM1UBBSB
7EYgymrWqVPn0EMPLVKkSHYrofIFgfXr1//0008x0di2bdvvv//+/vvvz5gxY9WqVRs2bMA6xCyb
H9iYTuy9996lSpWqVavWySefXLx48YIFNbKSH3pe26gIZC8CUVbziCOOOPLII/fbb7/sVUGl/4PA
H3/8EXOOglf6wQcfvPvuu8xszj777IMOOmifffbBs/pHkv67G+73X3/9tWTJkq+++urWW29t0aLF
SSedpIETfTIUAUUgTQSirGaaorV4diCAC7Vp06YxY8bglV599dUHHnigqQU7YdKaAAFmEtWqVTv8
8MObNWv2/PPP//LLL8ww9txzT3XK9fFQBBSBlBFQq5kydDlTEC+TqOyyZct69uzJqrNaysTdsH23
smXL9ujRY8SIEUB3yimnYDgTl1IORUARUASCEMj8Ss/y5csffPDBoLqUli4CrGWuWLGCkCPxRoKN
WTuBtmX9xvp54YUXvvnmG4c1kAjPmjVrli5d6jCnczty5Ei/9nQExiy7bTuwbcNSnt7i9GnTpgEg
t+n2hJZXBBSB/IpAclaTHZ7dunVj0Gnfvn0YYoxKSe0CDZOjdB+BjRs3fvzxx5UqVSpZssSWLVs3
/f33NrEJO/7ZjnVgT9DBBx983XXX7TAU3vXKK698//33DjmQiGfWqlWrc845p27dug5/yreBFRlp
J554Yu3atWvWrFm0aFFW00m3bNnS5KaZIKaNj16qZKkqVap89NFHwOhjqxRFQBFQBOIgkFyEliH7
uOOO+/bbbxnU4khXngwigGsl21tYpcNKbt++eevWLVgDnE6zD+i1117DqRo1atQtt9yy117EIQvA
Z3TA9hDRxX5AydpvuyPXJgrn559/PnPmTPqaXLb1Cr8RYpe1iSZtJBuKJKiaa8sWav8frST37bff
JrF69aoqVapOnjwZ28mtU3WYZJEguaTNsqW0DpNJG4WO1Zw0aRIwsr3WsElx/VUEFAFFIA4CcX1N
QlsXXnjhbbfd9tZbb7EJ5ZNPPrnjjjuooH///occcki9evUuuOCC66+/3lQ5dOjQihUrNm7c+Oef
f4bIehJjPT4EocU///zTsGkiPgLYAIZ7jGLJkiV5iQJLKa9SbNmy5e9/rmHDht17773wvPnmm/hX
GAzeTunevTuznNatWxM8x25hiiB269adVzJsInS5qGjx4sW80MItJlmI991339FHH92xY0eeBJF8
0UUX4SA2atSIGK/w0N3PPfdcnTp133vvPfYDX3nllWzDbtiw4aBBg2CgpezHadfuTHboPPLII1LE
+UUybDbRr1dqwQnmoWKp8qabbrrqqquo6OKLLyEC3LRpUxqLAkAiLibWEaD45QI6wAFG2hgfeeVU
BBQBRcAgENdqMhIxfpUpU4Zxef/992eg7NOnz48//oh1xDVh/GIk4q1BkcuYO3fuXPyVww47jNUs
iAxqr7766nfffcfI9cYbb5jqNREfARymdevW8SJQ4cKFxWQaYwCqpNlVO2/evNNPP71z5850EBQu
4qJYys8++4zuw3EUzkCi8PPboEGDXr16sWsG24Z6UBYsWPDOO+/gAl5zzTV33XWXcF522WUTJkwY
PHjwwIEDhYICU6ZMmThxYvPmzTHbrL/CQNUXX3wxDIjiaWGaxZNw//33Y+yllPMrNQoxsF67FmZg
o0ePbtOmzRdffIGf/cADD4wbN47TOXhKaak0Vn5BjAvoABAYxfuMD75yKgKKgCIgCMSN0DJzxy7y
NiHDDa4ALghz9vHjx5922mm8LIisY445hjUzEcrrEPfccw/p6tWrs6OEBIttrHfCv3r1avE+hVN/
4yMA8jhPDP1YQcDHrmTZhX9PNmCC0q5dO5Y28SAHDBjAPltg//DDD1mhpOPw8FgQFRMSSLQ16dev
X5MmTbCLWMEXX3wRE4hzdvvtt/PLJAk1MD9Vq1YlVk/UgXciUYbiCL/xxhvlBV+s11lnnUUcAjra
inCiFMQbSKMkJhwhQje/IkdMJsTAeu1aSBO9IIwBc+nSpa+99toSJUowV8OpBSgjFrW5uAVD6Oiv
VtOAowlFQBFICoG4VhNP5dNPP2XE6dq1K7srCcYypLKrolChAAnYVFGCQU0S8DPC4p5WqFAhKf2U
2SCALdlrr72wN8DOm4hgKxcMJJjK4HUxgznzzDOhcCYOt8COZ8YLKmKNhJN0INFUJAlCnSxtsj0H
N27lypWcEoVJJgv5dDqWkgkTrieRUohGPk+IpHElMYqGLjxi7EmjMFl2LkQuoWTl7DDDfr3CYGrh
VkRlld5N6AKLcAodGylEQQ8Y7Vzh0V9FQBFQBOIgsGNsinPdeeedBO7YHMvhZMTohgwZwqrYGWec
gTdACI4I7bPPPsuYFSaKt/JvvvnmE044gREftzWMTekRCDDQs0eGbcx4aaRBm4uEXMRC8ezZ6iIX
sUqCtEgjWErvkJg/fz4RcmEOJP4jqeCvv/5KH3HLlhkuXDc6HRcT+cdmXZhDfFB8TQK5mGQMJJ4c
/NRihHTq1IlOJ4IKBaPl5Nqcpogk7Cy/XkeOMZDQ7bQthCzMvGAFdCy4AqPIgU0vRUARUASSQiCu
1UTonDlzGCgZPQnGSh3YURaoCMq99NJLuCCsd4bVfemllzKMsp2kcuXKTz/9NAuiYZxKD0MAq4CL
Cci//fYbMUbGfS6MgZgE9sV07959hyHNuljqY/WOtywgLlq0iHVldtUSpJUibN3yif8U3Z0NX+zk
QgLeJB2H1eQlkN69e9eoUYNgL3YTy83qKe4mO32efPJJgq4cWUdxNDdCOnTowNYb6mXzzt133w0d
/aV24TRpU4QERISYLL9eKWuKiKWUW1M7xaFDFGRIQOHCHSdMAoDiqYfhrHRFQBFQBCIQCHgHwHCz
ZMWAGPMcWvxIXu9jbDXFnYQsizJ4sYGTo7SdXL0FAdwg3EHe7QlDgwDj9OnTcSuJk3PeDfYA84Cf
xy9FZOnOTggdCj5fsWLFDIPIp0cgStouRRpfkwVpwun0lzBQFquDhsR+oYhkzCe+JnT45V0RYTb1
0tc4pkREhe7kyq2jlSlrcv16jbTosoaNBIvBLHYytzj11FOPOuoofGg7V9OKgCKgCMREIGBVMmZJ
2HiTgY0YOB9s3SxXrlyXLl0iyjLBl1w1mREoRWdhfvAC2dQzduxY/EXnOx6OCbFFsUfGvpV0IFGy
WIDEMXWKQLRNI7l4k/yyjB126Dw7dBwhKdz69UYLAQdjeklwy8UU4eWXXwY6AHSseLQ0zVUEFAFF
wEYgLavJXtnZs2fb4jSdrQjg+WHqeEWSpUre98BwskmVOCS2gStbq86NwsVe4mWybZuXXthRDHQA
aBzo3Ngo1VkRUARyFoHEVpOhJ2dV1NptBHDsypcvL9tk2JyFDWCZmc96MIMhYGtz5vM0xpJYCLM6
VuJZCeaTagAFdGaDdz7HR5uvCCgCqSEQta7JASsca8DCVWqitVSyCLBMyNobxwskLMhSH5Zg4cKF
vCPLayQsN8pG1oQF8w8DzjdeOKvyvDPDPibWaJlhqMnMPw+AtlQRyCYEoqxmNlWpYjOCAK9zsAeH
5TouXqjglR68q4xIzhtC8LzZiMSCKwvqXPqOZt7oVm2FIpDjCKjVzPEuSEsBiZ9jLzGiGku3ocTX
ZP1Sota66Gsjo2lFQBFIBwG1mumgp2UVAUVAEVAE8hcCSZxykL+A0dYqAoqAIqAIKAIeAmo1PUiU
oAgoAoqAIqAIhCCgVjMEGCUrAoqAIqAIKAIeAmo1PUiUoAgoAoqAIqAIhCCgVjMEGCUrAoqAIqAI
KAIeAmo1PUiUoAgoAoqAIqAIhCCgVjMEGCUrAoqAIqAIKAIeAmo1PUiUoAgoAoqAIqAIhCCgVjME
GCUrAoqAIqAIKAIeAmo1PUiUoAgoAoqAIqAIhCCgVjMEGCUrAoqAIqAIKAIeAmo1PUiUoAgoAoqA
IqAIhCCgVjMEGCUrAoqAIqAIKAIeAmo1PUiUoAgoAoqAIqAIhCCgVjMEGCUrAoqAIqAIKAIeAmo1
PUiUoAgoAoqAIqAIhCCgVjMEGCUrAoqAIqAIKAIeAmo1PUiUoAgoAoqAIqAIhCCgVjMEGCUrAoqA
IqAIKAIeAoU8yg7CV199FUhXoiKgCCgCioAikB8QqFevXmAzg60mrGEFAqUoURFQBBQBRUARyDMI
RLiOGqHNM72sDVEEFAFFQBHIdgTUamY7xFqBIqAIKAKKQJ5BQK1mnulKbYgioAgoAopAtiOgVjPb
IdYKFAFFQBFQBPIMAqG7gfJMC7UhioAioAhkHIE1a9ZkXGZqAvfff3+74K6jmNFq19cQVR0ljfJ+
Qn1NHxOlKAKKgCKgCCgCwQio1QzGRamKgCKgCMREYPv27XOzrkWLFm3YsCGi1OrVqydMmPD+++9H
8PhZGzdu/PDDD316Qkp8xRKKylaGdevWzZo1a/r06StXrgys6O+///7ggw/IMolAtp1DVKu5c3DW
WhQBRSDPIrBt27bhw4fLuP/0009///33YU0dOXLkIYccUrNmzTCGQPrmzZu/++67wKxoYnzFouVk
a+63334LLIsXL2ZKwXxi0qRJfnUgMGPGDOgm4fPsNIqua+40qLUiRUARyLMIFCpUqFWrVjQPk4nP
VKNGDdKYuvfee2/PPfesW7du48aN33jjDXypd999t1GjRvvuu+/YsWMrV678zTfftGjRAmfL5tyy
Zcu4ceMwJAg54YQTDj/88E2bNr388ssY5qpVq7Zv357qYkIZRzFqHz16dLFixWbPno1KGHWUoWDr
1q0rVqxIRdOmTZs4cSKe63FZ10cffVS0aFE5Cefzzz/ffffdjz76aKexMdX79ddfcb779Omzxx57
2EWcGu0sSaPMww8/jGdP7WDLRStGjRq1zz77zJkzp3z58uedd17BggVtGOvXr5+akk7tcaF3iumt
IqAIKAKKgIMA1o5xuUqVKtC3bt06efLk3r17Fy5ceNiwYdjRU0455Ycffrj66qvJ/fPPP4npYpM6
dOiABXr77bdtzgULFlC8b9++BCRXrFgBP+YBK4W9xC376aefKlWq5FQdfRutGIZn6dKl559/PsoM
GTIE23nZZZctWbLks88+Q0PcOxrSq1cv2IYOHVqnTh2Ir7/+uljNqVOndu3a1W9s8eLFo1WS3GXL
lh188MGOyfRr9EUVKFAAu1i6dGnC1w899BAWEcd6+fLl3bp1a9OmzZgxY7CdTDVsGFNW0qldraYD
iN4qAoqAIpA0Api3++67D1vYsGHDBg0aUH7+/Pn8fvzxx/wyXmOKjjrqKFtuqVKlmjRpAoXx3eE8
8MADWSKlLJ7loYceitj99ttP3D4CvFi4+FYzjmLVq1dH/mGHHYYaVF2hQgUs/UEHHYQRgjJv3jyy
SpQoQRp9aAiuMwaJgCrmrUiRIuw+9ZsADvAnvJDjmEyK+DVSry8KBfCA+WVKAUR77bUXHjxeJpy1
atVi5gHgNowpK+lUrVbTAURvFQFFQBFIGgGG7Ouvv57hfvz48cRUiRMSMCxbtqwsYfIb4Xv5nIz+
eH4Eb1kuJfZYu3ZtoxBRR4KT5jZhIlnF8OFEJgmpCJuEECGS4JY0jibq4cLi5HHrN0H4E/4ydZgy
ZYrDFlijw8OkhNAuzjcgs5bs5KI8QrCgNoz49DF7xJHm3OpuIAcQvVUEFAFFIEUEWBQ85phjCKLi
XB5xxBEs2pUrV46xm98IU+dz4j8dcMABZ5xxRseOHRcuXJiiNlax1BQTAayqSsSYECjTgmrVqkHH
jWN7ZKi+dgAAIABJREFUDuusMi3wm2BVHpUEHBxWc1T62rVrERtYoyMFiHC+ie4CrBhyw4CeRMLx
0R0YU1bSSJaE+poOIHqrCCgCikDqCBx//PGsCLLxp23btjhk7E/BKvz222/t2rUjuBool3Cow/nX
X3+xglimTBnKnnzyyYGlkiVGKIYHFiENFw0b+eSTT+LAYX1LliwJM1uHSOBSS3zVbwIh3wiZJou1
0s6dO7Nn59NPPyWNz0p7/RoBxBSRBNaaZdfHH38c55swrxAxk0888QSmlzgzTvDMmTNtGFNW0qn6
/31wh4rll5Veh663ioAioAgoAiAQ/wgeLMHee+/N4J4QN5sTb5V9LtiPhKWcQ22yQzF0QB98OH8N
0lHPboLJiqMhlo8lWIyxKRWnxj/++INotkSVWdp89tlnL7/8cuLGJqQcCGMcJSOMoPqapo80oQgo
AopA5hGIY/mkVpsTx8u+zbxau+2WlHz04UqoRlIybWm8n8NlU+LU6Hu0TilufZV8il1vwrRazYQQ
KYMioAgoAi4Cjv/kZufc/S6rmIEkmzRE7G233WZqyb5E4qBB9tWtkhUBRUARUAQUgdyFgFrN3NVf
qq0ioAgoAopATiKgVjMn0de6FQFFQBFQBHIXAmo1c1d/qbaKgCKgCCgCOYmAWs2cRF/rVgQUAUVA
EchdCKjVzF39pdoqAoqAIqAI5CQCajVzEn2tWxFQBBQBRSB3IaBWM3f1l2qrCCgCioAikJMIqNXM
SfS1bkVAEVAEFIHchYBazdzVX6qtIqAIKAKKQE4ioFYzJ9HXuhUBRUARUARyFwJqNXNXf6m2ioAi
oAgoAjmJgFrNnERf61YEFAFFQBHIXQgk/c2T5cuX8/3uVatWlS5dulKlSmHfWc0OFG644YalS5fy
bdVevXollL9o0SI+tyZsfH2Nr6fynVLz0bWExVNgSEq9aPko/9prr3300Ud8lm/QoEGlSpWK5o+f
u379+vnz5wMFMvk+Ox/wq169epziGWxdnOqURxFQBBSBXRSB7UHXl19+6ZP5HPnZZ58t3/80jalW
rRojr8+cHRTqot5u3brFEX7GGWcYJSXBN9Wuu+46PlIap3gKPI56mPZDDz20Y8eOyYpiZmCDPG/e
vGQlRPAPGzYMNPjQPDzYzmOOOSaC2c5yWmdnaVoRUAQUgTyGQKARlDYm4Wtihz777DO8H+xWmTJl
5s6dO3nyZPxO+8PZjqHK8Vs+c3rWWWfxifBPP/102bJl999//0EHHXTFFVfsBMVWrlz5008/UV2y
dY0cOZK+AeGvv/4aS8+VrIQI/okTJ2KS8dd//PFHwgY9evSIYNYsRUARUAQUAQeBuOuaOECYTAp3
6tTp8ccf79+/P4M7sb6HH354jz32EKHjx49v3LhxiRIliP6deOKJU6dOFfrtt99eq1YtIroYgAoV
Kpx77rk//PCDZHXt2rVJkyb33nvvtGnToPfp00fob7311imnnILJQVSjRo2GDx8udH4x0gMGDDjy
yCOrVKmC5LVr15osP1G8ePHnn39+zJgxyJfcKVOmGLYwhVesWDF48OB27dqhM/5iixYtPv74Y0qd
eeaZaEuTRcIdd9zBbaDhIZ4pRWbMmAEPF+HiMLFGHxIUxLST2LBhA579E088AbwY0WeffbZ+/frE
mcGkdevWM2fONKXCMDQMJFDjgKxr1KhRSKtateqxxx4LnbZAxsCTZm5x0003gSqtbpN1ofY999xj
ywkDP6KL7eKaVgQUAUUg1yMgLqfz6zunDKkM2bS2YMGCWBEW27766qtt27aZgnfffTe58ODbYdJI
4+dJdLF58+bYywYNGjBYS+yR2CBWgbIS92PgFvrJJ58MceDAgQIrdbF0Spoh3jBLlvnFrhgd7IRE
aPHYhPjdd99JkQcffFAoYQqvW7dOKi1ZsiS2XzTEQFIKPRFy2WWXiYRzzjmH29q1a8utHcNkbrH7
7ruTSxOw3FxMO8LESnH5pWChQjsCAABCqUsuuQQ6gWUoXHXr1hUd4MEQ2vU6GNoySc+ePbtp06ZH
HXUUQrCLtIvvnqMhRC5WqeE577zzsirZobPUwu35558voqR1wmB+DfgRXSzF9VcRUAQUgVyEgG8E
jfK7mZSdCCxgxm4zaDKI48NREC9KxnqJLuKRyAYWipD7/fffb968WeQbiyhVyFiMbbvwwgtxdB55
5JFff/1V7E2zZs1+/vlnShEEvvHGG0kIc8OGDaGwk+Wwww5DEzG0Itz+FauJ5Sae3L59+3333Rdm
9i4RNYUtQmH24EgDcTdFII7dpEmTSMe3mjDjESJH7D23EWKlFvOLi0lBLJxQAEGmFLihUP7666/y
5cvDwNxFGHwMjSgnMXToUAq+++670PFZidMaBuY3ZHEhlsgtdBHrWM0w8CO62FShCUVAEVAEcgsC
gUZQlE/CalKAAffoo4+W4VV+MZa///77O++8I7cHH3wwIU0uzBWUtm3bUgpDdemllx5xxBEmlkvW
f//7X7JkaLY3+Lz33nsiavTo0TDYl8PcuXNnOKnL5jFpfzcQthmTLAwRChPyNVttsf2nnnrqq6++
KqXSsZoRYo3OknCs5ptvvimAECEXhp49e0IxbrQDiyNNbjGEXLKZiw26rJgigfVdiOL0v/LKK1LL
66+/LkXoLyiO1TQ95YAf0cWB+ihREVAEFIFdGYEIqxl3XRP3kRZiQr744os//vgD8ykLY9CxQOYd
D9YgcVa4WO27+OKLiQSy87ZevXqPPfYYm1evueaafv36yegc9otwycIqhPEInX1J0QzkEuRkfVHc
vl9++YWFTCkSoXCxYsXefvtt4q5wErqcMGECtp+4rqmLJpt0/ERCsWGiiBhLlmmvGHVDDyto0/Es
iYq/+OKLdCI+OkECcvHsIbKf1uaUmIFNCUwbZchNtosDBSpREVAEFIFcgUBcq4ntYTcKDiKtItqJ
+bzgggukhayQyUImt2z2Ya+QXCwcUoR9ttgesnBi2FrCmxhSKuyXfUOSxRYeSWBueXnR55e4pU+3
Kbi8xx13HJuJ5L1SliRZjoUhQuE5c+bgvU2fPp3Q6NixY7E38ItpkbCzbGXC/BgDb9do0hJnNrYt
QqwpEpgw71My9xEGaUKNGjUC+QOJV111FZutyGKuc+WVVxLjxTqS4GKZE7r8khgyZAiOIzHwNWvW
BIoSog1+sl0cIVazFAFFQBHYxRFI4s0Twnps+sBkYtjwt3A6aRsBW7aTFC5cmK0xxFTZ/8n2VwwV
C4eY2C5duvTt25cRFhvDGidrdSYSGIYLO4bYT4TJfOqppzDVbMplRZCNOWzqDCuSkI5dx81iRyjL
q6xx0hDsYpjC1Ni9e3eqw91kEVGMB+afWmTzKvqwr4fjAmhjRNWy9+fbb78FBAz/SSedxNaeQLER
QsiqWbNmy5YtQZUNxrKg+/nnn0NnmTO6oJ3LruMRI0awgZYVYmLXwMubmmzpMjzYYFaI33//fcLR
XIYeJ4HnmlQXx5GpPIqAIqAI7KIIYM/8yw/p4nixlEXA0zSDbbF4MLL9EgkYmJtvvpk4pGEg+sf2
E7J4TUUKYnHx9oQhbF0TfsKn1157LZZYONnSybIodGcBr3fv3jBEr2uaxT+Ky6ZZihBAZvdvmMK8
2YnHLFXzi0nAPrGFGAn4i+xRkizCtswhSAfuoYWZTbNYuyJFigg/Me0wsTDbl7OuSRYgyzqiiGIS
gEdoijiwGLqTYEmS4ixC0woSt956q8PAyisdSnNoMnuGy5UrBxsUYXNqccCP6GKnFr1VBBQBRWDX
R8A3gkbnHV4gg6NzEQNkMdIhyi1hSXwsBm7e6rPDdIaZl/9YQSSYad6FIAurw8udlStXll1Chjki
gWFbsmQJEU7CiZl909+pNFBh1urYKcPmpv3228/hxxyijz2BcBjsW7xb+OVdVegRYu1SgWmgYKcr
Mw8mCswkAnnSIRKURnjFihUR8uGHH+Ick3j66adl81FCySl0cUKZyqAIKAKKQI4gEGEEk7aaOdIA
rXQnIIBbyaEHTAiYDOGIUyOLnUSz5T3dnaCAVqEIKAKKwC6CQITVTGJdcxdpjKqRTQiw0skqLIEE
vEaWrnmbEzuqJjOb0FaxioAikEsRUKuZSzsu82qznipLqpkXrRIVAUVAEcgrCGR+eSyvIKPtUAQU
AUVAEVAEXATUarqI6L0ioAgoAoqAIhCGgFrNMGSUrggoAoqAIqAIuAio1XQR0XtFQBFQBBQBRSAM
AbWaYcgoXRFQBBQBRUARcBFQq+kioveKgCKgCCgCikAYAmo1w5BRuiKgCCgCioAi4CKgVtNFRO8V
AUVAEVAEFIEwBNRqhiGjdEVAEVAEFAFFwEVAraaLiN4rAoqAIqAIKAJhCKjVDENG6YqAIqAIKAKK
gIuAWk0XEb1XBBQBRUARUATCEIhtNbdvX/3h++vmzRVBG5cvWzd/XpjQZOlb161b9d67yZZKip+P
aL7xxhsvvfTSrFmzYhbke5Z8ShpmvpJ92223kdi4ceMtt9ySsDifLP3888/Hjh3Lt0gNM0L4aOWw
YcMQAjGQ57XXXhs1apQpwmeiP/jgg+eee44vePOdTkMPS1CWD3vZuaYJNtFOS5FANl+aKbhlyxaT
TieRmhxg4aPZKdebZvFk612wYAFfa+cb4E5B0/aU9eErtnyufNmyZWvWrDHC/WcmZflGZsKEaYvD
6VcN5ZprruFvweHMyO3q1avff/99vtjjS4t4mH3mdCh+k31pZjwxCZsn8I/RZshgOqzjMliFLSrm
+GmKpANFtjYtrtXctmXLqr6dl1zQblvW8L3mg/dWvTDcNC/NxJb16/76ZHKaQsKKA9+dWRcP9F57
7TVy5Mg+ffrYA01YQfps0qRJ5G7YsGHMmDEkNm3axJ9fGL/QqY7vOWMgqa5Zs2aYT+gTJ0487bTT
MIp8Z5tHJ5Dnhx9+eOihh8444wyR89Zbb5166qkvv/wy9p5fRFF7dNUff/zxwoULbR7TBJtop6VI
IJsvTQoyNtWsWdMWklo6ZTnr16+X7kit3jSLJ1tphw4dGjRo0L59e7ug3faU9XnkkUd4lh544AHz
YfnAZyZl+bbCEWm7LQ6bXzWfPT/22GMvvPBChzMjt3wd9qyzznr11Vd9aWEPs8+ZJsVvsi/QjCcm
YfME/jHaDJlKR3Rcpqpw5MQZP+0iKUOR7U3jT86/vvzyS4e4ddOmWcdUWtDnkiVPPkbWsueGLep/
E4mV48fOalJz9skNlzz2CLd/r/p1zpmnzr+4+6z6h8zr1WXr33/7PIsHPbjshRHQuZYMeWLZiKF/
/7Z67jltheII9Jlhc3igYKWwMSLB+b3uuuumTp06ffr01q1bn3zyyYximK7zzz8ftl9//RVKly5d
SpQowUeyGIurVq2KSZg8eTK5QE8REtit6tWrk8B3rFixIgke97Zt23700UcPPvjg0KFDoXA9+uij
uJLLly8vVaoUZaH0799/8ODBfOH5gAMOmDdvXhbXjh+fB2K7du0+/fRT4Vm0aFGRIkX41KXc2r/P
PvvsoYceesghhwwcOFDozAPKlSsHkQsH12Y2TbCJpJ0iNpuTJRB169atdOnSnTt3ZiLPkFeoUKEj
jjjiggsucMSOGDECTYDouOOOmzBhArm+tqaIIyeCkyLjxo2rVq0araazQK9ChQq2SosXL6b7RPLj
jz9OE1CbvsOuHH300fRmdHGjkiRsZiiOYiAADpWyLrrbKeswX3nllYLVY4/t+Ksxl912vzmwMU86
/PDD69WrhyUwpUzivffeu/zyy2Ewv3i0Yc+ML3/btm1HHnnkwQcfDIy+/Og/Cr+s3RY0tNHzq5Ym
8LczZcoU0xw/4T91fr1OKRgABNxatGhhspyHmRnG8OHDJZfnhM7yxfpVw283ituI3glsssNvxhOT
MAqTsP8YbXpSf1y+kn67nI5zlITf/guyNTFpkRk2fvrY+uOnr6cRTiIMCl9VhnF7QEi/adTuG0Gj
245QoX/5BcRqbli+bFajqlv++kusJsTZpxyzceWKLRs2zGlz4vqfF29csXxW3XKrP5qEbzq3c/vV
kyb6PL9//eXs04+TSmc3r7f+p0Ubf1k5u2ltKHGYfR4KfvHFF4wgfkOg8CfKb/PmzefMmcOQV7du
XW4ZZLdu3cojvv/++zMPJf7JFBjcf//9d4KiWFZ4zDNtEtLrFDzzzDMZkeHhM85HHXUUCS4MCQJJ
3H333RiPm266CUNIEGbatGllypTBkGDVTj/9dKJqPg8UPBKeMxJcRJLhl7T9y0wWu84QieGvUaMG
Ty1j5UEHHUQVlD3nnHMcq2k0t4X4RQybnyUQ4XPjH9McnGb0Z3iyBUp67ty5DMTfffed0cTX1i5l
y4nmpNeqVKnyzTffoAPI+CrNnz8f9EQ4sXRmKvDsueeeAwYMmDFjBpOP6OK2Vk5dvmLPP/98p06d
KEIswcxyRILPTO8fdthhtnxJ2233m8OUvH79+qjN5IwYA3MCR8Jvv/1Gj/fo0eOzzz677LLLQB7O
sGfGl4+02bNn88vzzMNDQ2z5wh/2R+GXtdvioBdYNRKeeeaZp556yq7USQcWjNCZ4ijMny3PHpM2
nmco/sPMsMan16Wu2rVrw0DaEetX7TQqunf84j6/+XMzCVFJfgOJyf5x+ZX6itkdF8hv/oJ43mwN
TVpkxn9U/PHTr9cIJxEIhV8kO5pG7b4RNLrFjdCK41z4gAMLn9x+6aOD5HbN5P+SWP7IQz/feev2
zZvXZK1NFtivbIkmTQvsvvtedRqsm/61z7NfnXq7bVy3fsH8P7+fWWDfEnuXP9R45XGYfR6K41Jg
xowckwD3smXL8nwUKFCAoZPnYPfddycXIstCJBg1sE84BPwVEUTdb7/9mODjmBoJfgLzjMXil6xa
tWpRFn78TvxRfEr+xphHMyhQF3RMNcMffhJLpIRPcWT79evn8zDqYYxRUqojNIE5l3Tjxo1Rkgse
XGq0xUXgFgP8zjvvsOTJwMogS1mU97X1KRFFArOoq2nTpuDWsGHDr776yhcoFFw6QtM00GjiaxtW
NpqTXAY7ZifoQAgOIXFUYnpx9dVX41Sx1hu/uFOXrxhP0SeffIKj//PPPzPTslvkM9u5EWmnOfQC
zJj8//znP4wR9LJTlmeDafgpp5zCeEGIpXLlyoULFw57ZijryIfCKIyLwCPEgMjfiCMf/og/ioiy
DnqBVUNkJsF6hFOpc5uszsxmzjvvPKa/zGlGjx6NNP9h5k+bwA9zrJkzZxIQYhYLm98cp2qnUQl7
xymekN9peOBtsn9cgZU6itkVBfKbvyAzFtlFJI3MZB8Ve/wMrNevxaYEFsmOptmVOulCzn3C23JX
X7fgtKMLnH0RnJtXrSpUuXrx1u12lGrdrvAh5f+nOPZp27ZAniLtuqx6adT2jRuKdepmF4nDHMhj
C7HThF5ZwixevDizfqEzXyDB/Jo/G6ypYRZrym3BggWZsRq6k8DP408O64gcMXK9evUiSMs06qKL
dmBCp+6xxx4sT3Lhe7FUyVMCpWjRouS2adOGvSE+D1aWek1dOHNE4fBdiNPCTF08FvziCrMyJGzF
ihWjafwyAzAF4ySQE1YkIgvJQBSBzN57740ytgK+tnaunY7mJLgd9ndrVEJzW6CdjlPc8DvMvmJM
HdhWxhhNJJAFcmKwpqzPbLJiJqQ5hBAw9sQzKMVv+fL/82fFWiZEPCQmTzyNuFY8kDfccEPYM2NX
LfKJHDB146Fl8nfiiSfaDE4afqGYP4rosg56tjTTUxBJEzawcyPScXRmGspyJhNT6Q7+tEkEPszd
u3cnbMsElASVRjdHqnYaFd07dkOkeHx+u6yTTvaPK7pSUcyuIprf5gxLI1Oyoh8VZ/xMod7oItnR
NL/J/47Ufl4gZY/9ihfp2Gv9qEfJLdXijC2L5u57VN3iDY7Zt3Ydor1+kUCe0p3O3TBh7N8fv1u6
TZbF/adYHOZAHjqDuP8/Yv79F3PFKMMfCRE8hjmitUzSmYpCx0f8ly92iqGKvzSejOuvv14KERd9
5ZVXcCtlAILBzKOxaniZ+KDMZ8VCE81gtcDnwabaVpOhmVLiPeOzsolJ6sIbxogyocZ6sV0Qw4yj
iZuLRwKF7ZRx2hFRJCLLSMZs4xb7VormY+nxp/GtiYvC72trhJCw5URz4iIwIDKHoBRRNVuIpJlS
YLFAAK14EhyGhMVtfofZVwz5+NNMhnje8ADssj6znWun7bbbdEm3atUKo8hSAi5ynTp1HKhxK99+
+20m+CwlNGnShF9MJgXDnhlfPk/jCSecQEtBjD8HnyGC4pe12+KgFyaHmDMYSi5rVET1/bRT1q/X
ZnjzzTcB7ad/Lv4cfvzxx8CHGX/0xRdfhF8mJdFipQqnUdG9Y2sl6WT5fQlQkv3jilOp3XEJ+VkC
C9xmFaitEAOxdcbPhPX68uMUSappfhUJKalYjnIXXz7vxcexkYX23Xef9l0WdD97+6aN21YsKnX7
4H2q13Cq9HkKlztorzJldy9XoWCpsrvvvbfNH4c5kIc/PN5GYI+PLU3SmDfWfp588kn+pvCx+CWW
xT4dnzMOBf+Siz0FRCPZUHDJJZfgYDF4McZBRwJTfuwif7H4o5g3nEgY7rrrLoY5XE+8XjRhLuzw
UBDdiKQTayXNjIkVSoQzNLMFBnPInw2WnoL82SMKE8sCOH4GzIytLKkSnqU6bhNePLhhRSKyjFjU
4MFFB0YTOyqO/kDN2hJ+ITzoE6htmBy/XYaTQCjTHXTDA8OrYJw1WZJgVoFKdAGwkBYMDU/C4oaT
hMPMLMdRjCkXQVHmNEzF5H0kU9xvL/FAk2snbAxx++ws0vzN8yQTi2bCRziRB4Zpgc1DRzOXQrjt
3Ic9M3ZBSbOhl44j8g9c/C34DBEUv6zdFsRG95RIxmgZH50ixIrpWbLstKODX6/NgOvPH4uhAB0U
thf4zzlPKQFt/jbx3uCPFisC/UciuneMGpLwe1Ma67BF3yb7x+VXSlzBqcLpOKdRDv99993HgONI
iL4NxDZr+Pyf8dOp13nU/Soy3jS/isQUZrL+FbEQ6jND+Xv1qm1Z/kdgrhDj8JjicZjj8IhAdm10
7NiRmMwVV1xx4403mloyksDxYgwlbmBLY1zD0bQpjIDOorrDwwDNc2YXIY2RWLp0qfh2JoupNEO2
uSVBXUizKQnTEUUisoxYIt6oYW4lgbYkCL5hV2ivEH1t7VK2nGhOhOMY2WWdNPBGgJCwuC3NYXYU
oxanu+2yDrOd5aTttjtZckt8wun6QDaHiPL+M+PwcMuGMvHO/ayEFL+s3RYHPUeaeIGpVe3X6wj3
b+M8zHHE+o1KtneS5XfaggJQkvrjgj9hpXbHhfHzELIUzSzNUSnObRxsw+qNlp+RpkVUEWEEC1DM
N61s+sCTsOmzasXaaWIX2WnpajP+PUwgolIGO+J4JUuWtGOhEfwxswjP4heyWBKTP4KtZ8+ebGti
23QEz66chZPHHxjOMZ4fy727sqqqW44gwBhN1IQlVROhzRE1cmOlOfjHxcouYW02ZORG3FLW2TeC
RlRcq2kKaMJBQKYdEp51slK4ZQ6eWaOegg7pFMEJlthXOkK0bB5GILc/4TnYNfrHtTPBj7Caqaxr
7kzVd/26MmUvpaW52mTSBDWZu/4Tm7Ma5vYnPAfR0z+uHATfrjrpPbR24VyRZr+DHCebgrZmfzxv
qqRz9qmpOlNyjEB2i/D6v7mNn0i5aZwRSCtMRbz2ylasCJBNRaaIJhQBRUARyL0I5AurybsiKfQQ
e0/M6guvPaRz9qmpPVNyjEC2BH///ffmNmYinaaxrZeT5ExFbK4DXqxmIMh2RaaIJhQBRUARyL0I
xLWabFjiDX3OKuPFR14QZD2fXVW8fz1o0P+fE+RQ4Ofskq5du7L7hjca5eRAtlxTNiZYSODtjnPP
PZc3GVq2bClb5Nl3wxuQLIyzSV3kOBS/FO9lsm0PZlGJnbScb8dmd/Y6QuSLIux15lRR3h7hdUNb
N47Ew5NjfyxHl0FHAaes02QOi6GlIuGJJ56Qc959+b4cu1I77TcNSG0d6A5equH9SEo5ynCyjLFt
HILKqzK25IRNc6q2ywId2/qFwhoVPcvxhAZk6OPHj+dNGJ4Net+pyFGSHjEPFW8ORChsK6BpRUAR
UARyEoHArbf+plvO7uIVMTnYk33tzmmouFAOJeERhYH12kQkYHE5nY43CrCaHKCMncNe2udz+hS/
lDnMUFTCJSJmKEeq8h6uc3SqrQBjOi9fCsUv6zcZE+uchurL9+XYNdrpwKYxgbD1hx9zeO211/rK
BB6Qa+RHN82v2hSUBO+JyumdctICRAMy++PtQ1/tinwlQcM8VLx445/o69Srt4qAIqAI7BwEfCNo
6k1iN5AcS4iF5yVlXnLnrXPSchoqo7lD4ZVYfDiI8HDEKweZxjni1Zk+HHjggbynDJGzJTmHZZ99
9iGN5eaXkZ3zOfF3HQqnBzilRAfYuFAJTUjIkaqc8yJHp0JJeIirUxaX0Wkyr43vqMO6zOmR0Ix8
Rw6ntFgl/k1yBhA3dmNpWlhZcwIqRaRH8AjlgFzWIHGXea37X9FeyhHLKzpO1b1797YLIZw3bXjH
n1/SdpY5tBMiL5sToTW5vpI8JOahgi2+wkamJhQBRUAR2MkIJGE1jWb+eZvsI+XIBmHgvBLeLDbM
JPwjCu3cOGn23SHTP4EQ00LUN+zETikVKF+OK2RPmn26SiCnT5SyPghwMhmx+aPlixyb3077jbVz
nbKByjgH5NrFw9IiNrpqymIpOceAg9w4zo1YtC3NObTTzgpU0mZIQWG7uKYVAUVAEdgJCMRd17RV
8c/b9Ck2f2A67PxJmy4FeXGe7zk3atTIP4HQp5i6TClD8RP+6Y42D/MAhDiG0DD4TcZjwzDIoSeH
ICgEAAAgAElEQVRyGmq0fCPKbrJJRzTNFDQJXxmynANyDTOJ6KYlrJplYI744q1n6uVYVFuyc2in
XVGgknbZCIVtNk0rAoqAIpCDCKRiNc15m8QkCTCyyuVTEjaJ7TysWQpbWJqVQqpgjCYey5YchmA5
tJDxl92ts2bN8ikIdEpFaGJOd+Q7w3J0qs1szmnkHD6bLmm/yeY0VCwHy36wRcs3MgObH9g0U8Qk
xKj7ysCAG80WJ/xC/43S6KbFqRqxnGDOr9FEEubQTkLf5NoVBSppF49Q2GbTtCKgCCgCOYmAWeG0
ExELoYYNS+achupTDHMKCbaKYBqRycqcU5w9JuIFGrqhRJQyzHYi8HRHm8E5p9HOIu032TkNNaF8
R6B/a5rmZ0G599572SIrWY4yQOQfkGsLiW4anNFV26KcNK1mRdMQ7YocJQ0PiYQK28yaVgQUAUUg
+xCIMIKprGuKkceN4LINvk+xc1NLB8pkb60jzaEElnKKyC2+EYM1R6dycrr5IJfNKVuQbIqd9iti
Y5TNkFC+zRyYdppmeNhcwzdGUM+8SOooQ1ibXal4eKaIk4huGsxhVTty/Ft2xvJlU0O3K3KUNDwk
EipsM2taEVAEFIEcQWCXPoc2tSMrky2V3ac7Zp98XLpASy9PErMwEn54NkeesziV5jqF4zRKeRQB
RSA3IpBbz6FN7cjKZEtl9+mO2Sc/wmTymOYieyl/VLlO4dw4FqjOioAikCYCSUdo+coaS1bsnCT0
x4sKgdXH8fZ4k+SPP/4oWrQoYUBj51j0go4LxckyjmReh0AsdoIPOztZcW796pAmMtmzYxTA3WEx
r3Tp0iIzkMdU58sky5FgmCXBCh+lwI0qCGNCDBRilwrUIboWu7hJ+3JSoxiBmlAEFAFFIB8isHv/
/v39ZrOnply5cg4dY8kCKfFGfALsDRfnCTg83EKfMWMGK4V+lqFw5DcHqPJWO8cMcRAdNpLzembO
nLlw4ULhsVfFhMLXTRctWgQb5+EZOTETfnUY5qlTp1Kcwwo4x5VtwKTRhH25MIvNDuQxNfoyfQmG
WRJMODjbD5PJ/ibO7qFSLLSDg1MkUAdHT6cIt6zUsimpSJEiJsuXkxrFCNSEIqAIKAJ5GIFAIyjt
TcLX/OGHHw7NumyksGRYAnw14pC8UsmxMlgjPCHOWqtTp07YVhQsnxg/NJszZw4CEc6vf7yOqYvD
7bAxIhA7RwIfkYo4Ya5Zs2a86YE5x65v3LiRFz8cc+5XN336dEyjWMc33ngDE4IXi6XH2JhDfAJ5
jD6+TLIcCVBAg/mHzCHYFMORexB5rROji/kMFGIXCdTBr8VoJQlcdsy/fSiSLyc1SnRM2FFDbxUB
RUARyHsIJPG+JkM834TCvOFNGiAgckwMF7FWHEf8G9724zVBDksLM5mmLC4Rg3vlypWxtZwpQ8CW
Q/I4Qh2jYnhMAgOJUZRdndha2ZaJ9wYd3xcKZpuXR3lZxTispqwkTHVEJjnMViwrafxXCZbCZqqI
4LHFGpmGaCQIBd2MGYZC0zhwlXnG8ccfb4o4QkyRCB2cWoyowIQvBy/fQSAOxaAUWIsSFQFFQBHI
Dwgk4Wvi7fFaBZHSadOmYR050JXxXaKO/BJ15CR0bBjGD8OZEDuGck45wHRxpA5re5gWjpxl7MYq
Y5uxu44EVgRZTOW9BWwMDiVGGgZcQ+wolaIA6qEPEgL9Ibs6IwoJFEQUBUnDQyskOEzkVqpzeLg1
ly1TiLYEoYhzaYpg2jm/l1g0OoievhBTJEwHvxYjnxA6YAIIZXH3oTONYIbhtIWD1FOgCEqmLk0o
AoqAIpAPEUjCaoKORBQZtYlqYm/weBYvXsxJsJhJxmjsDUTGaLO5JgxQQoh83BhpfPYLHqwgpbCI
pDHMti9rJJjwLO6a2RCE1cSjFTstY7rYUVNKEk51oqRkLVu2DGMvaeRwPI1scQrjMZIdmb4Ew2kn
sJRUh58HdGgeKMTwh+lg62mYJUFUHJMJnl9//TWvikKkL/ggCfAKg7TXlxyH4tSlt4qAIqAI5EME
4kZoGW1ZOBSAsFuYFlw0TCZfUsTOMeZitDB7ZIkXKJxsdWGId2DFn+Mrm5yTJyaTXPxFiMKGLxv4
gQ4UkK+sUJeEClmMxB5Q1g5XknZ2EvnV4fBhrqiO2CxNELHcig0WNcJ4JNeXKXRbAhTixugjWTh/
2DPSVE1b2EMbKMQuEqaDU4vIl1/6BW+bX4wlCS5Zcnba60uOQ7Er0rQioAgoAvkTgbi+JkM8b33i
shAgxUCybYfhmP04hAQxk3ifYqv4ZXcoS3cEBmEgFMmHlB1k2YeCASYSy0UWgVk8PCzlJ598QuSQ
UC1fjzJF2DXD3h9Gf8yMHLuDi0YVfO2EGCMLosSKsSKEeSmCGthUpJniJPzqcFWxK3zGC6uJ1cdg
UC+tI2oKHdvGkTo+T7RMCjoS4GcvMWfayVosq63sfQUrJhY1atQAKKYOPg52EV8HX09bK5Omg+ww
tS+HJjsIxKEY+ZpQBBQBRSDfIpDE2UCYE9y7LAfmX1sLhfEXokEQ04Vlxe8kBsv3LwMdR8NsJ7Bh
3NqiJBc/CWkSgBUKVdhbeGwh8dO+WL9sHB6/VBgFnRGIfbLbEsZs6JnSwZeTGsUopglFQBFQBPIq
Apk5G4ixHvfOwcj2aSQLF5MLa4p5iG8yKevbSxHob91Evk90FEt4G0dCHJ6EFRkGZ8Jh6NGJTOng
y0mNEq2t5ioCioAikLcRiLuumSwKWNPatWsnW0r5FQFFQBFQBBSBXRmB7LKau3KbVTdFQBFQBBQB
RSA1BNRqpoabllIEFAFFQBHIjwio1cyPva5tVgQUAUVAEUgNAbWaqeGmpRQBRUARUATyIwJqNfNj
r2ubFQFFQBFQBFJDQK1marhpKUVAEVAEFIH8iEASVnP9gvlrv/0mBZC2rlu36r13Yxbcsnbt4nvv
tJl9ip0bluawPQ7Lfemll/isiuHhoAbOy+Xi+2Lz588XOmfdvftuXPWMqEwl/No//fRTI5zzHPgI
zIsvvsgZSYYYneAUpzvuuCOah1w5UyKCbdSoURxm66tHEcmKKJtallHJb0KgGlILh+7ecsstSdW4
YMGCm2+++dZbbw0sBdQcesyph5yDH8iwE4gJdfAhym6t0qkx4w9MCp0eEx/zpHFS2G233UYpk4gj
wRTPOHOgwITPSWAphxjYwIx3mVNparc2vGa4SE1UOqWSsJobF/+0PusMvGTr27J+3V+fTI5ZauuG
9RvfG28z+xQ710+D5p1ZF3/nvDY6cuTIPn36yAhIVosWLbCRr776as+ePfv160dxegIj6svZORS7
duxl3759L730UlP1BRdcgKqcxteqVSvGcUOPSHDq3pgxYyIYyOJ0XI48jObhWETqtdUz/JJlbjOS
sFXymxCohtTLCUf8hSelQ4cOHfiwTPv27QNLPfLIIwzKDzzwgJwbHMiT3cSEOvgQZbdK6dSY8Qcm
hU6PiY950jjtUv6OTCKOBFM848yBAhM+J4GlHGJgAzPeZU6lqd0aeO3hIjVR6ZSKazWXPvHor/37
bP5lxW7bt89pXm/2MZVnN6629PHBUveKkc/PblhxduMj5pzRbPUH723btGl+766zj6vO/8tfGMHn
u7bM2+HwbVq9am770xZccsHso8vDABtEpyyU7X+vd3i2b1w3v8d5s+uVm3d2663r18MzceLE0047
jYR/3XTTTRx+i1HkoX/88cfxNa+99loMp3ByvNGAAQMGDRqEgyIH4XJkDx+8JJdRslatWnzzuWLF
ijyOUPA5ENW9e3c+z9KlSxf+ViGOHz+e02v5onXXrl25HTp0KAcHcovMsCJjx47lqPr69esbsW3a
tBk8eDBj9xdffCG1U5bTfTGZ5ry9uXPncgYvTbjxxhs7d+785JNPwmOuIUOGPPPMM9yiD00mwZnA
11xzDQmeLVtnv13w42pzRm6PHj2MQElggTjUlxbxrVMoBhzSTpZdEEiHDRsmlMcee2z48OGkHWQ4
hvecc84RnieeeMIxdY5KThOMGoE9IjIxde3ateOvXW7Nr6PGVVddxafobrjhBs49NjySIAhxxRVX
0Fn3338/ze/fv7+cHuyozWPAw8B3YbloqQ+vLfbBBx8cMWKEUGg1yjjFbWbSgTpAf+655+gXvnnA
R/QIP0BxIIpWw6kl4jb+c4UQB1tHrP/ARPDTs+aPgiOanT8ZJDt/d1KX3emO8IhHhbJhzTRPmtMW
5zZhcb92n2Lq8rOozu9xW4fA5yRMKwr64Bi0+WKjkex3mQ27/yeM5ieddNK5557LIeEtW7bkmTSi
Yib85zbiD8Qg5gwXMevKGBtK+xfjr09c9sKIhf36Qv9rzmx+N//xx6yGFTevXfvXvLmzGlZaO/O7
7du2zetx3spXxi4f9cK87ufs4Fm7ds2UTzf+snJ209rcblyxfFbdcqs/msQxsnM7t189aaJf1ufZ
Qal38JqpUzat+W1up1YrX38FURibyy+/nIR/tW3bFmLz5s3nzJnDwX5169bl9uyzz+Z0XPqDU3MZ
8jp16sRpf5w0SBaxXOyHyJk9e0fT+E4LIxSuKl8g4WnAE8VJZUTGVCOwSpUq33zzDRTCv0zAOWue
iB+fauFMdr5x5hehUuwlXwdjTtesWTO+sgIPp9lhaTirnRpN7VTNMM3Z8aLMhAkTeLIlPW7cuPPO
O0/S8sv59fhMpGkaVpxYLmZ74MCBvgLwOO3iWedzpLY0SS9atIiG8/1UpGEqGLkMOH6WXZzz9I3a
KIMOPjLYaWYJUorYF5MGW4Ktkt8Eo4afRWcxy/k/9s4DXqvi6P8UiagIaMBCbEGMNSIgAkaxd1QQ
xd5Fo6IGo2KL9f0bK/beNaJRrFFsQASDiua1xUIPUVCJCAJKL/8vTDLuu3PO3vM8917KvfN8+Fzm
zJmdnf2dc3bO7O6Z5eIedNBBvJSEOqGtGYxH8U4Qickh2wDQdt4k3nrrrV69evHWwiWzZj/66KPc
PxThDmF4ACKCN1TOo8T+BMIhWxYw2uKhfKYNWMIGczh7vS4Wh7QZYRVpuvh9ZbENNdsbJi1Pi/Sh
4HJHj0z03NmLbpVnQqQW5jVT7zRLaFmICovb2i1Hq7Cn7BUPa4fOvE/yrMoER9HWLshesgh2+yxg
ObtT4HexB69JNxXZWeQwenwSD4giFnYXRaooQybTCYqeorFm6KVnjR1NpDju8C515syY8+9J0/82
tEHbzqtvuVUdoqTVF+9H3bBVq/mfDZ9w202zJ3zZtOP2Ydm6TdZec8ed6tavv3Kb7X788H1bFuFI
ZjGncfOm23Vs0HSNRgf0mDlsKJz27dtL3BYqhwZWdmIBU2zBvXFn4Cbhw5SpQRLB0y3+9re/vfrq
q/E60bAnNys+dZ999uEmQBUF8SLsv42SDh064GUHDRpEJ4iHgNOjRw8Od9hhB/YaQ4xSEp9FRbiV
0YOPvOSSS/CgIoOvPfvss9malA1JOJv5Q5h3KzlFdRyGYpjBvCPOm8EK4g+uMT0+piITGQDHtitU
pTSm4tfpsECPzWeUD5E4xVlidExlexmiBF4CeCPJRCZUmKZtE1Q+8xSvULy18FfFhCjJDN6QAJPR
BfqCvfbai1DSJl5GLfcVcSovKLx6yyamCXjbtWvHPjx0N+z/w3Y9G264oS0e2pxpA/vz8EbPoHp4
XSwOCTOGDx9OvfxkXDo6DA0ofl+lsbU3TFoeG/Sh4EbiMHxkKBs+d2JweNEzlVuItKWJZqpMgihS
3NZuOVpFdCrziqswROZ9kmdVJjiKtnZBmZfMwh6aAb3uuusigz28SmJ2dLbIYXTfcpdGz1cRJUtT
5qe9SgrWOmXoG1Ouu2Tt6+9ptPmWY7vvSam6DVepu9r/2ZyrafsO9e7uP+WJP008setqR/Zq3uOw
DOU4s4ULbdn/I7lEJuTUXan+gimTQ05EswMXU5jcB4QUcoq3AwjCAvosaDp3cS0weUUinuMVSSSJ
KZnpZCiD/ne33XYTpv7Fb/GmP2bMGO4PZbLtFztyyyE7lEXrR6QIASjekUgIMf4ylqvF0wSbo6Ff
ZCA4DOXp0Fu0aMFCoV122QUv/vzzz/PKRjQjLwciKQak2xXqBB9eL0KO0olTItOzZ0+gIwjgjQRO
JjJyLVRnEUKakCmpp4j18Um4avTjV0LhTDNCAaUZ6+PqgCHvQCgkfkUnA7kIRGbz/sRCM96ImSNn
5B/ME7cNxRktZ3KdsBWCw6j4WWedVaENbIQQ7X+nRSCKXGW2K5cejfdIikSHobbi91UaW3vDpOVD
G+wjQxATPncIRxc9rVxvFa0lr5m8cKtMgiipuK3dcrQuOZW+4nn3ap5VTPQkuimt2l6yqLtDMnoW
tCwEm2pEHWB4No+2vVPiAclTspT5Jceas8eOabBt5yZt2uHzFs1YvMhwjV12nTt88Mzx/5wz6Zv5
oz6FM/Of4xptsdVGf7yh+TX3zn5ncWiY97Nl8yQX8xkcHvhywzbbQfLM6HRRWIRQkluKHorBQDo1
RmuJHh5//HH4GreJPEPwDPOGPoxXHjwQwQHekVKhWqU5y2IiRjzgMKDB3CovaGzzSRFmGrp06aKS
SrCQh76YgWLeyOitEredFhGCAI6C+CEOeVtk1jMSIC5kISijuAxH04/jNrhxIxkObbt4hBjStJag
kGCRoJbmRFF44pTUyIjus88+S5QgLxwWGd6m6drQTL1cvsjOPJMiscxD/BzPHm3v06dPJGDNiAT0
kB5nwIABjBwMHDiQ2J2/4jKt2RhP2Ne3b1/uQFyRhVd1CsHQOi83L774orw5RcVD4TwbgJS5TEbv
GednVD8sonSmGU899RTjusjgLHnH4se7oz1UJUIUvK/S2NobJi0f2mAfmei5Qzi66MWVa0UFm6ny
EVHJ4pG26DB9xfPuE5RkWlUQHMpGj38Eu30W1Gz6E17cO3XqpBwh9A7kMKRVzN63iQdES1Wmu1Al
ZROlxJpLgrZmXQ8a3/2OUft1rlO3Xp25s6h45bXWbtzz9xNOPqzuak3q1l+pfuMmM94b/uUxXeqv
v+miObOan3dpwjhbNlN40fdfje62x8Ipk+qtuc46x5+EDH0B31cce+yxVp6uk0kp1s7861//InLi
Lw6SlR0iyXAZXR59N5f5uOOO4+7U4IzBK0Z9ZcPtvGltRuTwxDyxhI8M+rP2hD6RrpYue4899iBA
oV+LTOICYyfDubhzRuowjFg2kpHDq666CufHdCzOmwFk3rmY9MbX4g5ZDCx9bliQoJnumBFRmKw2
4hYPzypt28U7BB0TZlMkHOimXVTHxCTDs7wKqAaIxCkRIxjC2fByINEevXOEDGJUigBY0RzGgUP9
oUmytjk8m6apkR8LcxjGZPHUaaedpvLWDG4APRsRNBnvEm1sjqmR2QxvMn4L7LycMUHLDHH6tuEm
ZLCXi0gAQY1R8SI2oIG7mgkF4i2AigbPRYO9yvAxjBkH7tWolvRhwfvKYhuqtTdMWj4sax8ZntPw
uXvppZfsRY/uN/skhlVAF2xmVEoPK1lc9WQSFV7xzHsVVZlWWeQzwbGXzHZ30bNAjfRp9JkTJ05k
xMuuLgzvwJDWVtv7Nv2ASMGwu0CtaltKBC/+9pc5EfrFDddMuPsOEZ41cQJrf7TggjlzoFnjM+rg
fRbMnr2YnjdvzuRvVSBB2LKZwvNnzmRZUOYpy2SNxiGHHMKAGEsiWYBqBRIc1vVIPJSQwV8SjKoA
wRkdqB7mEQz+SISXJ5DJRzMDVpmnSmLadjGIjeVWCcMsPJOWDydxiqbhSCJTLTJMGOcpR3+eSZnG
FGdaM4qXFcnIbJoQtdTCm6jCFk8IyyluOQimsXHYvH7lyZdkRp6SkvhpbO0Nk5aPqo4emei5i4Q5
LEm5Lb5ccQpe8eI2FwTHXrII9vBZYAUAQQiamQIrbomVjO7bgg9INXUXYl6mE5RTdfnP+udoG+vv
/jro27MWT8stJ7/NPl48aFnhD+gZEmSJV+a4ZYXFXaAkBBieZc0tE3gllXLhgggQmvNewmdRvOwz
hVywlIutuAisEFecmJUxNpkFWHGhzrQ8coKhTCGvSYGFc+YwrBaWjOgFs2bVXzIAFfGLHFambBH9
LrMUEJDXL8bNlkJdtbMKRh1kjLd2Nr8WtnqFuOKMzNXIsCThNYvOa6ZdJjd02S6zkmVr4bO0fDbZ
/WV1Xxd3mdWN8PKmf4W44jXSZabvhIwll+kCepYpFqVLIkg/wYeGURFGU8khwIIOVo1yKjqMhP3Q
EXAEHAFHwBFYJgiU6TVZC8MkcHkWZ2Y45MMgUu2wnJXP18jFGh2WV5GXcgQcAUfAEXAEqhgBWRQU
/bXLh1hGRSpU0mDyI+PoKaecwuePfKJAenHGtVnaTsYvFi7ffPPNqGJ5IVPEfNfBh/mUksVgrBPh
czFyo/Bj2UikUA3gczT8cd6h8p1wBBwBR8ARcASqCQHrBLWiorEmmdAZNSUEJAUrqZj+3//7f7hP
sp/ff//9TGjhBckuxhfupL1mNTCDt1SJ12RdMh8+8h0IH02ed955fAbLl9qShCxSKO8CLHnlWxFS
zWUeVvH7gqtzBBwBR8ARcARKRKCo10znBiS/Qzp9q81wmKmQ7LJEsZJ4jIZEhyU2zcUdAUfAEXAE
HIEqRqCo15TcgASUpKljGDa0QhIJsgETWd/IGBeegpa0isS2ZLsIT2UqJOMDO3ioWHSofCccAUfA
EXAEHIFlgkBRrxnlBgzTANpEgrYlNsNhpFCKsGtHWDY6DE857Qg4Ao6AI+AILH0Ein6vGeUGDNMA
kuKVTIDp9K02w2GkkJYzG0qCTf2gJTpc+tB4jY6AI+AIOAKOQIRA0dxAFMONsVqHRMCqgjzX5LbG
g8Ihey9LZNOfulO8UaNGuveIVaianXAEHAFHwBFwBJYVAlWQGwjT8Xahy4SDC9QmsYmM0nmEbn8q
AlZhXkHnOwKOgCPgCDgCywMCRec1lwdb3QZHwBFwBBwBR2DZIuBec9ni77U7Ao6AI+AIrEgIFF0N
pG1iLpN0emwmzmgtX5UoPySKZMFnF7dp06atttpq4U5e7NMGn7RBG2ywQagQmnxDqGUaNRrmjcTy
Dm11aBOdfBKjCYj5QoYt/UhpJHoyZbQKq5NTkQYVFoIUEJQCN6pgA2SYmUrCUtYGywnl82hbqjxO
nn7nOwKOgCNQGxCozwpY205y+rC0J+LjLMn4w+Y1LPnB3/Bbd911IxkO4ZMVj40A7SnlkG+WbEHM
a7KGiG9A8ZGsDPrkk0/IHCQya665pgoLwbal48ePR2yttdaKTlV4aKvDMbOIl4KkLvr0009btmwJ
jSUjRoxAWHx2pozWZXVaDSosBC8cn3/+OS6THVw/+ugjKsVDRzhERawNlhMV4ZCNGNk5dtVVV9VT
tlR5HFXohCPgCDgCNRiBTCco7S0h1iR/nmSRDZHCk+EJiNXY1KZTp05k3cMbEW+9/vrrZDyIVg9p
QTyfOD8sGzVqFHyU85fPV1QmIjbddFN8jCjEz0EQI1IRORb4GJSdUnDn+HW2uW/Xrl3kzm11JP/D
NYp3/Mtf/oILIYrF0+Ns+PpFqs6UUausTk5FGuCABu8f8g7B4qntttsOJmuJcbq4z0wlYRFrg+Vg
uVolBCE77n+HHXZQvi1VHsfWpVU44Qg4Ao5AbUCghHlNunj27Ma9EU0qNDD3WvJjrJXAkfiGBAg7
7rgj2dvzXKaWJSSic2/VqpVkuGXA9uWXX37ttddwKiqjBA4Sp8hwLhx8rSzfJXqDT+wLB7e9yy67
kPldA1YtK4RWx8gkW5CLZ4UmfpXBUsS0ioRMqFZ1KlM1CAfb1A3DoWls+cJ7RufOnbVIpESLWBuI
zvMsV22WKKLHarYcRclW4RxHwBFwBGoJAiXEmkR7a6yxBiOlpOzBO+6000707zLqyF9GHdn2BB+G
88NxVggfXfnbb7+N6+KTFeb2cC0dO3akp8Yr45vxu5EGZgSZTOXbUHwMASVOGgFCQ/wolWIA5mEP
GjLjobA6VYUGCqKKgtDI0AoZHGbkVqqLZDjUX6hTmKEG4UhwqUVw7SR8YCwaG8ROq0SLWBtmzpyZ
toohdMAEEMoS7lMvrxG8YUSlrJ4iHEFJ2+KEI+AIOAK1EIESvCboyIgiHT2jmvgb4qovvviCbcJw
k/TR+BuY9NG6uCYPUIYQ33nnHbRtttlmyOAFKSXZEnDMYSyrGnR4lnBNFwThNYloxU9Lny5+VEsJ
EVUnRsqpr776CmcvNHpWX311WeKUJ6OaI51Wg0qGBJ6S6ogXgQ7LM5WovLXBclRYCEbFcZngyb7f
srcM12LSpEnAKwLSXqunCCeqyw8dAUfAEaiFCBQdoaW3ZeJQAMJv4VoI0XCZbLGJn6PPxWnh9jgl
UaBIstQFVxTBSjw3dOhQNhoTl8lZ4kWYIkYsu84660RFOMQAojQI6pKhQiYj8QeUDQdFoaOVRLY6
Aj7cFaoYm6UJopZD8cEQ/PJk5KzVKfxQAxzGjbFHThH84c+gqZq2sIY2U0lYxNpgOaJc/3JdiLb5
i7OE4CdTzlF7rZ4iHK3FCUfAEXAEai0CRWNNungyDBGyMECKg5Sss6zHYUgQN0n0Kb6Kv6wOZeqO
gUH6a4Yi99xzzwhc1qHggBmJ5ccpBmaJ8PCUf/vb3xgnZKiW/Tu1CKtmWPtD74+bwT3DJ0SjCrYe
Y9SRCVHGivFVkpkIM/CpaNPiELY6QlX8ypAhQ/CaeH0cBvXSOkZN4ePbttlmGyuT1knBSAPyrCXe
YostZC6W2VbW6IIVLxZbbrklQPHqYHEIi1gbMDWyPLRKaS5QOExdRI/VbDmq3wlHwBFwBGotAiXk
ocWdEN4tCWB+8rVw6MdhKoK4LjwrcSdjsBtttFFm4KjCIYEP4zBUJWeJk9AmA7DCoYpwCdGwHU0A
ACAASURBVE+opDht1dqyRWRsqTwONqMQbxS2JU9Y+dYGy1HhBGFLlcdJVOGnHAFHwBGoGQhUTR5a
+nrCuwiRMKaRU4SY/PCmuIfiLpOy1l+KQrt0E/2WGRlW4WERDUVkKqxIBaIXDuWnCWuD5aQ1yFlb
qjxOkbpcxhFwBByBmopA0XnNUtuPN23dunWppVzeEXAEHAFHwBFYnhGoLq+5PLfZbXMEHAFHwBFw
BMpDwL1mebh5KUfAEXAEHIHaiIB7zdp41b3NjoAj4Ag4AuUh4F6zPNy8lCPgCDgCjkBtRMC9Zm28
6t5mR8ARcAQcgfIQcK9ZHm5eyhFwBJYNAuTPImHIsqnba3UE6tQpwWtOeWOwIjbj009+HDtGD5X4
/t135v83Nx7MOd/+e8Yn/1jw44+TX3uFw/kzZnxx1RUhoQWVUBnlFCHIwEAiXH7Dhg0j+Y4UEU74
l7R2Vhtp+Uir++c//5kNWOzZ6uCQhOjyyy/P0yzZHvLOFuSHrRY6s+152hB+5ZXFl6wyv1BJlTSq
PGNIL0USY7IYktceDeRjYtsAVTV27FjyPsoh29499thjbLyjtxB8ciICIN8fa5FKEgpFiE8ldVa+
OBC99NJL/fr1IxVX5bVFGuTxxNspf/DgwQq7MosQqNpvv/14ZosIJ2RC8PWKJOQ5lX5s02UrX7xC
/ctEoCB0alup8lpwuSJK8Jrf9j5UTJ/8yoCvz/ltgyX57aLGTHn8kW8efUiZX9947fQ3h8yf+eMP
fxsCc8HsWbNfeyYkVFIJlVFOEYKLse+++w4YMIDHnv3CnnvuOUq9sOR31VVXnXPOOUKTby/URqn/
WfIjXyAfmNJj9u7dW/rWUKzKaTruJ598MlMtfTTJCDNPlcSssO1pbfQpbFyalqnwrCqpqkZVWGOm
wC233EI6++uuu44OFwFS55944okq+eCDD/bv359TBx544BVXXEEQw120//77q8DNN9/co0cPuaOU
WTYRQqH4lK2tqgo+8cQThxxyCMm8xo0bd+mll1599dVVpVn0yON5+umny+HAgQP33ntvYC+jFjJT
nnvuudtuu20ZZcMiCn54RUIBSyceWytsOZUsbhUuc05x6MTUUuWXeQNzDaC/sD+yy1rmiG2awSRq
HNVl57nfL96OatHChSN3aTuiw8Yjtt90wu23wJj69rCRe3RYfIqTbJ/ZcWPCzTlTvht9eFc4s/89
aeROrUMCetIz/UfsuBWlRIPKWOUIDxo0iN08IaIfyeHIkStMOji6ORW4++67zzrrLD0MifPOO48t
oElUe8ABB7Ah6MEHH0zu+GOPPRYZ9l2Bc/TRR5Mw9rDDDsPJkR0Xf0b2Ws6S0o+dXti9hMzv9Koi
jxI66Pbt2yPz9NNPk5uezajRwNmnnnqKjczYLluEeVMmPy18fvfffz97fSN54403cnjKKaeQQojs
uCeccIKthYjnqKOOIvE9P7p75PMA4RS/qO1RXbQxz2bub06JEv2bxoQ8+AAlwnfccQevIKokbBQC
kRmqH4Iqdtttt8MPP5zcubwG8ZYTGRmVtYCE2tir9YwzzgB5/YtX4Ae8KnbRRRddf/31H3zwARdU
mUpwCSjO5cMYZYZEdKEj8wSx4447jizKXDisDaFQfKyYBdPeDBEyapXVZsuqMARDLNzG9OkhE9q2
Jbo0abWhNh5P7nCeXHCGz5MFJsBuNaQvaPQchVVIq/MeWIungh9eEdvqsIrwsbWWPPzww+w/37Jl
S3aDf/XVV23TwuKqlpe5hx56SA55asAcOlKeuNDh82tLRdcr0hPJW+QjAXtfhdDZ9qblbTMVk+WE
yHSCYludTBMzC+A1Jw98bdQBu86bNk1L/TBqJDScER1azps+HXrE9psJc/Kg10cftrjnVUdoiQVz
547cs+PsSd/MnzVr1IG7zfzyC5WhoFX+7rvv0gNyKvqp1ySqOOKII+69914ViDyH8iG6dl3sy3fd
dddRo0Zx07Rt25ZDun7y6DKaRLJ40tCTIJ4tt3jIGbXjHRnPKhpGjlzccHZ0IXE8oSryJKi74YYb
SL9ONLPJJpvQQfCKzcAvtvFqDJOOaeedd+YB1ueHrPE4Y/pxvDUp3bnPGCijm5Yq+BvV8uijjx56
6KHwqZGxaIg8QERD2HZbV8JmtVD0yN80Jgx1sjOoSDL+fOutt6qSsFHWjKgKkt0zgkpGfgbi8Emh
kWx7HsFlAQm1oYS9YIks33rrrV69eo0ePZpLkOk1eeZ5j+FO6Nu3b3jzcwNwxTlLb0hzQuXQ3DPh
hbZNE8SI2rkTunXrxrBkCIXiY8UsmFQX3QwhMrRUbbPabFkVhnj88cf1dUf5mW2JLk1araqCEK8J
DgT0bFpw0kknXXzxxXhNqyFxQe1zFFYhrc57YC2eCn54RWyrwyq0iLWEW4t3aDYG5lbhnU9GL6Lr
pcVDndxsbF8hHJKpMUdglScutPY5KI86GUpF1yvUY+Uj5DPNoEvMu5lpQtReuSJ58lZ/CMvyQIf9
QGRPCSO0ixbO/+7qixZO+ZooUkPXWWNHjz35mHGHd6kzZ8acfy+ebFhl38MmP9kPYlr/fqsffJRK
ZhJTh/wV/te39P3yfy5dNG/e1CXTnypplRPJEc+pQEgQl5Asni1T2LaTxzI8lUlz37BnC88M+XXp
+7j/SEOPJExmwiBwh7w2EvlxNzOghGaCRQJT0cZzwovtPvvsQ4eFKph06GeffTYhC3tb8iSwcQoK
iXrZnoWzONRLLrmEe4VpM9HAXyJFquBNn7pQFZ4SmagW7GRnGKJSBhJl+8wEIFqLEJl15dkcldXD
NCYqliAyzQjl2agc9Hg+eT8gaudUaGQElwUkVIUSQgp23eEBJtBp1aqVTaQs8twDXNkjjzySa9el
SxeumvDpSmDy5oQxeJdQOTRtCS90ZtNAjP3buRM6dOhAPuhIgx4WEYtuBsoqMrRUVUFYbbasyuMq
LCyZbbGXJqFW9SsBDrwXnnrqqX369FFmpCFxQRPPkWhbCjenVGQt4UbdfffdGYviRqKjELGoadrk
kKBLoePCqbM9FLs5MexklSOfd6GVL/1S1MnY65WQj5DPNMPeV2FbbHsT8pn6Q23LM/3TXiUVWlm3
br2WTw+c2Pea8Scc1urJl+qutNKUoW9Mue6Sta+/p9HmW47tvqdoaHb4UV8es/+Cs/vMe39os753
pNXOmzx5pVZbND2g22KxA7o1XH8Dlc9UrmctwQgtb2o87T179rzwwgsZE7MyIYehV6YwGQlkkl/4
vFBAEMZx++JNVVi8KYdkjeddEoIXKKp44IEHCBAZBlFJIcaMGRP2YvQUuNKDDjqIs/zdYIOf2kj8
yobeUooNzqIpVVsLPS8Ll+jKGTBkCpaR56jqxGG6rsjmhB45ZTGBLwCmy6bNCMuCdgSILZsAhFEH
0Ob9l5cS4kuCRTqm888/n0vDnJZWBM1wN4fsq8OoOD8K4l8ZfqALY7SfVVGCM3dFBHgEmjVPa4EA
Mbl5QqalVSwC094MtqzliLZ0WbrL2267LSqbbotcmrTaSKEc8tQ8++yzwCuHVkPigiaeo6iu6r45
rSU0JNqg0DYtMlIPjz/+eKYzGAWBgGmVq2SCSJeyj5KVZ3g57Fu42/N6LczQu1RNSrfXylsDVNXy
T5QQa9apW2+lxo03vPR/6q62+vg+vWnb7LFjGmzbuUmbdnUWLlw0Y/ECRX6rtty4bpNmX175hwbt
d61v9kgRGf3bbN8u88ePbrxN26bbdWzcug39rp7KVE73x/yBylgCH3baaacxqkZ8YM+GHHpJ+kdu
VsYVcUKM1hKXEE/Az9t9RYvzVsWaI94T6QcppXwh4NPV8grPIY6cpSX03Qz/Epe0adMm7A0JYXnn
wlT0sFCTKAcnyviwyNhaaD7vs4wiAoLEYRUCorbZuvQURGRzeKogzXslXS0NwXisCkuFjUqboaUA
4fnnn+/UqZNyIGxZC4jKEz+xrofYlHH1HXfckb+4TM7KbqMMpENzAwA7F4UhXN63pCzv/rhSdkJ9
8cUXuXYs9ZQf4wSff/656oeIQLPmhcJCh1DYs8qxYNqbQYUrJNJlAZmnQB8rFhszi59oi16aTLVM
hjFQmWcSo+733XefnrUaEhc08RypwjzC4qmS4RVJtFrlIawldDtMorNSiYkYubVs00INIc1gBqux
uNnkxdoqD4Xz6EQpvV5hWSsfIW8FwuJCh9AVaW8oX0S/rXE54ZQQa/7H4rp1f3nXw2MP3Pmr++5u
1v2Q8d3vGLVfZxxqnbmztEmNuh05/dY+a9/+gnLyCNxwo+5Hjzv+sEVzZy/8ZnyzK25ttNWvRbhZ
14Osch7IK6+8kgU7eQrhs2KWIWnCAmbXE2KcYqSI6a677rqLbpGBWf7SXV522WXpUpzt3r07A8Wy
NXcYuEhBxk7xwYQ4vKwx9cVcCwYz6EcfzVAM1cEXSV7oeGbo2XkZZIkE8RB87ic49MhYEtXC2iVG
GpmBo5uTb1eKAJJXF0+4nOJvZDMTinqqIMEiZCzn5YC2QIerHHkR0UbRItvksAogAlimMBniZkqS
AXA9a+HiLScCRIUheB1h4B0vGMUBTPcyy0iISU/BlB4VyfQnF4tBLfo+ptzoZ4npeQNThVxBOCzJ
Vk4EGhc6alqIsJQKoWBuT1VFhAUzfctFxaPDdFneEZmHO/nkk2+66SbgIgjgEbNQ05bo0gBsdH9S
LxxmLvQOjyyJDq1h9g7XIvS50XPENdKzacLiqfLhFanw5pRS1hK8Jp0JL+uMZKCQQVreqi04WmlI
0PMQfLOpIlsrwrfKGdAK5TPpzFLR9QofJSvPtFT4KFkBa0YIne2srJ2hPOCUfTWt5qXNITKwv8RE
qBWeNXECi0otvyTOnO8ms+bWFqkS5VatclhTw5p7xkbOPPPMCy64QPlFCJbwSGiVKUwXTBganmLU
V+LIkAlNEIMXDJkMGsMUTlQLnoB+LRQuibZ1hcWtzeHZIjRPJhZmSoaNyjODCUiCac4yTp6pBGZU
tjxAuBDMDTMeENaCG8CAxDUNhZWOQIvMU7GQCKEI+RFtwYxuhkg+fVhhWd7/aH6oJGxL3qWpUG2o
MJOONFR4QfOeo0zlIdPiqWfDKxK2WgUyidASbgNkWPaF7+H9WOSjpmUqyWOGyvNkLF9L5V2vqIjK
w89EPhSIysphCF2R9obyaKhQf2alS4GZcIJ1qd46aruN9Yit/zPFbYWXGmezj6dVU13cLowusuSM
OKmaqnC1RRAgoCHmTgzxFVHiMtWBgF+aNKoMrvAqxgc2DKuwtCItvBTO+vWqJMjWCarCol5TCzjh
CFQrAoR6/u5SrQiXrdwvTRo6RoxklDUtttTO+vWqDNQJr+mhVWWA9bJVj4C7zKrHtIo0+qVJA7lc
uUxM9euVvl5ln62U12QxBSsaSMEVVs/sSOVTmIYKl0+aCYyqMqyqEMu8HFVlJHrIVsjnjAUVRtlf
pRSzlaxlfeSRR2TlMEwmCKBVJ3ONLMbTQyaGqzYHrGp2whFwBByB8hColNdkzRifbbAQLqwbH8C3
OyGn5tH05ixaqap2VRVimZejqoxED2tEWV9aUCFr5FgTodlfKUVycBZK8GUCSSH4S5okll3w8kFW
MNXJ95HhlwlVmwNWa3HCEXAEHIGyESjqNYkJtt56a+a6+TqCDpH6fve737Fqg2/gyFbDOihyZZFE
DSdKjjf9rO2ZZ54h5yff9R9zzDFWA6XI28L6VbL5sFqdPhS1pA4gxQ9FWAdvWxUqtMKikLpY10Ne
K8mjyCJ4knhFqqwxkUBYkRUmeSmruvkChE8jKMjCfbLOshxAkIFDOMWyeL5t4EtBPuSCE7UrEzFb
UWSVrUgFwsuRrg400q1TnUIQYtIWLoqmLkqYQRGiQxYkI3PttddShCXp+Fq+6uHLDZwiX32QfZuP
gli9zHcOUV3hIWjw4SDJEQEz5DvtCDgCjsCyRIC+yf4yF91GaQZZQExPKmVZ5UwPKFlYEZPU5CzF
Ju2IpmNFMtJAKT5vIjDVLJ3pPJCRQissCvNyUUbNjIwJz0YVWcvxeZotFmcfZYBkjDFKSplpqkXM
VhRaZSsKz4aXI10di+vS1yVUS5YGXCafM7KyQBJsps2gLOv7bfZX8vHyEWqoWWi0MftCDCo/Xj5I
qS+nuI5Ez9SbmQPWqnKOI+AIOAJVhUCmExTlJWQ5wBnw+TOTZ3SLDLLxWW7o7SXDIRxJ4gpBshXJ
0gktiT0jDeTAo0cmOyUCkqWTsUr6VvIDwJG8rMSg0PKLFJJNIxLmowUUwkSe5LFojpLH/lfT4v8j
Y8IP4aOKrHCYME+m5XhjQAwfQHRF+ihJSglHklKi0JpqEbMVhVbZivgynSL2l64OC9PXJaqUoVRJ
WSBtqdAMwGEEO8z+ioVcWQWNJAY4Y5hkpOMTe75A191Gww3UohywUTY722rnOAKOgCOwFBAo6jXT
aQYzDY2ydKY1SKLCdPbLSGFaGIViFaEM8UpkYdqYqKK0sE2oiHzoeKg6baraVmpFWjAi0tWV1Dre
rchdEuq37Q3PMpeZmf2V0JyRaoLgVVddFb+LWt5v+EtZrhTvTKKE4X0+lIYm3E/ngA0rddoRcAQc
gaWGQNF5TSKzRObVTHOjLJ1FNKTzQEYK08KZJikzbUxUkRUm3ZRk+UEhHzUz2BummbVJKQuaaitS
gzMrCs+GdLq6ClsXqiLQZB6UGJo3DzKUVmhGXvZX/CLj9jLvy9A08WVYi6UrzAFrizjHEXAEHIGl
gEDRWNNmjKzQuChLJ8m46TTzcreKNpv9MqwlUlgk7WdYPKTTzYkqspanEyrapJS2XUwuhvYInbbK
ZoYkXLNK4KSrC1vHwClLWxPXhdFyhnNZ0sXwLBmUUF6hGYjhF6PsrwSUrA8irStZwllThgMGJWDM
tB9mhTlg8wo63xFwBByBakWgtNxA5NRmQxn2kCtuE2EKHSjbckmRIhrodonk7J5/oiFSmBZO25k2
JqrICtMuYibt+pnMY+pOviymLJ6DVrDJA05XQquCptqKolaEFUWnwsN0dVhI3l1GU3mPoVS6UoZ8
mYSOtoIpaEZoEjT1spaKSXH/BDtCxg8dAUdg+UEgkRuoNK+5/DRpObdkeUtKGcHF9CEfhODL2dvE
vVcEjh86Ao6AI5DwmkVHaB3EkhBg1fLylpQytJ/PatkcuMLJxbCI046AI+AIOAIgUHQ1kINVKgLL
W1LKyH53mREgfugIOAKOQBEESo41mcxjQotJR5ac6NcdUU2st6xw3G/q1KnTpk1bbbXVwv25mPSC
z1cH5AaKdPLBA2rp65s2bRqdKnJoq0Ob6OTLCrWWbyGYdWvevLnozJTR6qxOTkUaVFgIchFQCtyo
golPmJlKwlLWBssJ5fNoW6o8Tp5+5zsCjoAjUBsQqM/8lm0nSXZY9RPxcZYy8MhqIPwNPza+j2Q4
hP/xxx+zTtKeUg6ZEEixxuoSFqGQsBsfSXqgTz75RNOc6uohLcJnfHwajxjp95RZkLDV4ZjZNZ7i
LCL99NNPyT4DjSUjRoxAWHx2pozWaHVaDSosBC8c5BrEZZLE/KOPPqJSPHSEQ1TE2mA5UREOWYVE
Jgq+jNRTtlR5HFXohCPgCDgCNRiBTCco7S0h1vzss882XPILkcKT4QmI1RiQ7NSpE+s28UbEWyQj
bdOmDfFoKKw0nk+cH5aNGjUKPsr5K+s5VSwk+EweHyMK8XMQxIhURGYAvinki0nmEfHrfGXP94iR
O7fVffjhh7hG8Y5/+ctfcCFEsXh6nI1kwKHqTBk1yerkVKQBDmjw/iHvECxDZUIRJktScbq4z0wl
YRFrg+XYsVZCdty/5EgSg22p8ji2LtHvfx0BR8ARqCUIlDCvSRdPunbcG9GkogNTMogy1krgSHzD
93ykLCe5XZ7L1LKERHTurVq1wteSsIYBW5K9kUEGp6IySuAgcYoM58LB1+KBIIje4BP7wsFtk4eB
rUg0YNWyQmh1jEzyuaR4VmjiVxksRUyrSMiEalWnMlWDcLBN3TAcmsZnprxndO7cWYtESrSItYHo
PM9y1WaJInqsZstRlGwVznEEHAFHoJYgUEKsSbTH94iMlJKbG+9Illf6dxl15C+jjqQsx4fh/HCc
FcJHV/7222/juvhUn7k9XAtf09NT45XxzfjdSAMzgkym8nEkPoaAEieNAKEhfpRKMQDzsAcNmfFQ
WJ2qQgMFUUVBaGRohQwOM3Ir1UUyHOov1CnMUINwJLjUIrh28gYwFo0NYqdVokWsDWSkS1vFEDpg
AghlCfepl9cI3jCiUlZPEY6gpG1xwhFwBByBWohACV4TdGREkY6eUU38DXHVF198wVZcuEn6aPwN
TPpoXVyTByhDiO+88w7a2OMCGbwgpSRdAI45jGVVgw7PEq7pgiC8JhGt+Gnp08WPaikhourESDlF
khqcvdDoIX+sLHHKk1HNkU6rQSVDAk9JdcSLQIflmUpU3tpgOSosBKPiuEzwZPtocgDB5FqQah94
RUDaa/UU4UR1+aEj4Ag4ArUQgaIjtPS2TBwKQPgtXAshGi6TXGv4OfpcnBZuj1MSBYokS11wRRGs
xHOkNmXvSXGZnCVehClixLLRbirCxwDZC4W6ZKiQyUj8AWXDQVHoaCWRrY6AD3eFWsZmaYKo5VB8
sFSXJyNnrU7hhxrgMG6MPXKK4A9/Bk3VtIU1tJlKwiLWBssR5fqX60K0zV+cJQQ/mXKO2mv1FOFo
LU44Ao6AI1BrESgaa9LFkyuBkIUBUhykpJNlPQ5DgrhJok/xVfxldShTdwwM0l8zFMmOURG4rEPB
ATMSy49TDMwS4eEp2d2acUKGatlCS4uwaoa1P/T+uBncM3xCNKpg3wxGHZkQZawYXyUZWTEDnxrt
N2KrI1TFrwwZMgSvidfHYVAvrWPUFD6+bZtttrEyahKE1UnBSANirCUmZbnMxTLbyhpdsOLFYsst
twQoXh0sDmERawOmRpaHVinNBQqHqYvosZotR/U74Qg4Ao5ArUWghIx6uBPCuyUBzE++Fg79OExF
ENeFZyXuZAyWbaszA0cVDgl8GIehKjlLnIQ2GYAVDlWES3hCJcVpq9aWLSJjS+VxsBmFeKOwLXnC
yrc2WI4KJwhbqjxOogo/5Qg4Ao5AzUCgajLq0dcT3kWIhDGNnCLE5Ic3xT0Ud5mUtf5SFNqlm+i3
zMiwCg+LaCgiU2FFKhC9cCg/TVgbLCetQc7aUuVxitTlMo6AI+AI1FQEis5rltp+vGnr1q1LLeXy
joAj4Ag4Ao7A8oxAdXnN5bnNbpsj4Ag4Ao6AI1AeAu41y8PNSzkCjoAj4AjURgTca9bGq+5tdgQc
AUfAESgPAfea5eHmpRwBR8ARcARqIwLuNWvjVfc2OwKOgCPgCJSHgHvN8nDzUo6AI+AIOAK1EYHC
XpMtRwa9/uOY0QLS7K+/+nHsmGoCbP706V9c/T8lKWfDsscee4wtU8i8k1mQhHavvPJK5qmISTIH
Eg+FzERZycwQCls6UkiGoNGj/wOjFR43btzFF1986aWXckrphAFWA5wiVmlBzCOHMD92KCNHkvLT
RElVkOCJNMLkESSzPGrJiETiftU/duxYMi/KYeZ1JCsh5vEFsBaxRFSFCJDQauDAgY888ggXlDRS
MNPXIlFRqZfAWhhySkJPC2qpqjVG9ecREWiIgfaSW+Z17mSSmYCzluUUuy/oTSVi7PegAhDIX3nl
lSGHtFyXX355yCmPVojKK66lKq/HtlGVh0TlKwq1Ob10ECjqNUnGM/ncoyac0G3hkt5n6sDXJv/p
oWoyccGsmbNfe6agcp7PAw888IorrsAbDRgwYP/9988sSEfDTpyZpyIm9/EBBxwQMvPK0smSODCU
zKQjhc8999x9992XKQnz4IMPZs+T7t27h3SeAZlKClqlZTFv3333BboHH3yQrWaiNwYVC4lSq7jl
lltIKH/ddddxsdBD8voTTzxRFVJv//79E9fx5ptv7tGjB7hpEUtEVSDw0ksvsYfdU089RbJi/rIJ
K7mQ0tciUVFJl8CaF3JKRU/KhqWq0JjQsDw6Ag0x3n7uueceXu/IGv3www9zBbXsNddcw4MmN9UL
//2RLFMFIHg5e/LJJ0MOL1IRJzxbkA4hKlgkU6xK9Ng22roqXxFvopKX1Cp3TjUiQG9lf2SXjZgL
2Oi448bjep824a7bOfXVIw+Ov+wiiEnP9B+x41Yj9+gw4fZbOJx4/z0TH7xvMf+5p0Xg+/99758X
/H7BnDljeh494jeb8++rRx+aM/nb0Yd3nXDHrSP36oSGMSccQRF+E+658+sn+s3+5usRnX4Fc0Tb
dUcfuv/8JXnPBw0aRCcoYuHfDz74gE1XQg40u6bstttuhx9+OClYcQkkp+UGxReKGH0o24qxeTW9
JByCmKOOOops8vx4/ulbSbcbKtSykeQpp5xCuh8y2Z5wwgnI51kYKaR/P++885Ancfxhhx0mFd1x
xx3EymeddZYovP3220NaDaBdbFx63HHHkZUXm7GH4nRbbHzdsmVLtqF+9dVXI6vuv/9+thJnW+wb
b7wRYashNO/pp5/GYSMWlSqv4ehht9QzzjgDtPUvATQ/QOOs/C666KLrr78+8zoiQPZEinPJuI7/
LfF//s+sgpiVBMW45/8jumhR2FhO6bWATleUvgRhLdHdxQvBMcccIwLcJ8S+4QXicnBbYkb79u1x
NtzJbInDdgJyZ4Zqw1KRMUcffTRpjbmXcDzkcOZNjhzLUjYyJlRYnI5Ak4I8Kaeeeir0sGHDeJSE
SSpN7jTCzcwiWiNbFJBrE4N5PPfbbz9eAnizIWOzCET3HszoDlc9ERFCdPfdd997770IcEtfeOGF
EMS7Z599NoTFJOKEeqI7P6pRD22HQxu5jtGjGjUtrAhV0dkiVT/77LOXXXaZmhESpY7jjwAAIABJ
REFU8qQn7o2ouvBW5P6JMAk11xLaOkFt+OIxK/uzBcRrzvr6K/zZ/B9+EK8Jc+SeHWdP+mb+rFmj
Dtxt5pdffDfkr6OP6YHCxT5vp63pir687eYvb73p635/GnP84fDnTZ8+9e1hi/3iNs2+vKXv9H98
PO3D90futb3Y8K+rrphw522Lz7Zbb+rwt+dOnYLXnPTCs5x999136XlFLPxLZ8fztuuuu/bt21fN
5pYlZzrDgCR257HkydHHkud52223pT/l9Zb4A9f16KOPHnrooehkUIUuwD7wWjaSZNSRDl2NybMQ
haQAlL27+ctOL+I1GZkkrJTiDE/deuutjFPRmwgnpNUA2kUKe3mX79at2+DBgxkio59lTAwceEug
jw6t4oWXbhQvRUxAyngeDKshbC8IX3DBBbZUeQ2nIeBPb0Vk+dZbb/Xq1QtrgT3Ta2ZeRzSwEwDx
N2d5LQAHASf8m1nFn//8Z94hQjGh864FZ9MVJS5BWAv6o7sLy3nRoQd/6KGHeNFBOLxAXA7yGt5w
ww1k7achI0eORIBtgtiNgLsx1ByWiozBcsaf2RiOPpoZChwziFHWGhMqLE6Hd4iWUq8Jh0sjljMe
26VLFzgRzr///e+1IET0eNL1a4vsvWfv8FBVSIcQMWQiIOCbeUXjKtx00028OFpMLCfUE935YXUh
HbWIDsc+aLZpYUX2bJGqE15TDMi7N2x1yOutyOWIbuOwsbWEVm9i2/tT1vUi8WzDddZtuEf3ibfd
1KDFL5CfOmTx/N/Xt/Tl76J586a+9sraRxz97QWnLpo/f+G0KQ1ad5r2/t/nfPj35r16L5w7d9rN
wyfcdlPT3fZs2nH7OZO+qbvG+uud0ZuCM/85jr/Rr27j5k236wiz0QE9Zg4bWmf/rryM84vEOCQ7
LjuQcIfxnFx77bWMMcpQD/tds5sKAnhEXp3oQ6WsjEDST3HIA8NUKJn/GEHiicKl0fXIBJgIR383
2WSTUJJX/lAgz0JkyC+o0zaVHImiP2U/cHR26NCB/MJ4oN13310GitkuJrQHmvCXhstWaPvssw+N
pQePNCDAyz64MdpDA5944glbCtdbXsPx8aDEvjc8k8DbqlWryEI9zLuOXNkjjzySi8J1fPzxxwnB
tYgQmVXQItkhBxn25yH0hBgzZgyhfN61qLAiqY6/EYC77LKLnrJ318knn0yo1KlTJ/bqyZwjAFti
INHAuwUTflxTPCg9V7R7j9YSEhgj9za3MTcG9wCRH08EMpnGaFmmsfHiHG699db08tGhihUhCGgY
KeEO5y+0FAlxtg2JHk/ZC5aC9t7jIU3c4Xnm8ezzrsZAMbcf9zY9IG9vOG+LCe+pKAk7BJkfEc3R
I59XHXzboug+4Z6MHkaGT1ShbXj00KmkEDQQZHjBwv89//zzMJ955hlpi0om7g1bHT2D3oqM36Ak
xITbWNU6UZrXBK8WZ583bu/2dQ/7LfS8yZNXarVF0wO6LcbxgG4N19+gfsOG9dZcZ9JTf27YcadV
ft36+5deWPDF6NV/3bou0dbd/ac88aeJJ3Zd7chezQ/usbjIT7/F012Zv7or1V8wZXLmKWWyIwpj
X/yYPKNfHjVqFLtk61lqlkUowiHeYhzsoIMO4pC/G2ywAcObbLJNp8lN3Lt379NOO03LRgSOKpSU
TieSyTxkWxjKyilCUiI/oXmLyZQvwkQnb9CkyLddkhYn8lAoEAtxQEY0QKCEnp1932RvVFuqvIZz
OUCYKAS3jScgImHnuPPPPx9/Rg+iRkIzNs6hvY6MLTOdyTIucZY4nshr5lXBGABPPh0K47R0lOBM
DyJoZ14LRsPSFam1IaEAKtPeXZyivfxw2HbzAy0IgU9lLPGBBx5gVID5hfBUERpjRIwbnhsDOtMY
VcUG5rxNcihJ/KNDFStC4Cl5JeLKEubeeeedUiTEOaEEWAi5VMDee1z0xB2uBSMCqHmueQXknYaN
//Ar3Ie8WPDiFT3+3B4RJ1QV3fnR7RdKKh11OPDlPrFN0yIQ9my6atwepeiOeKYYH4LmVg8VhrS9
N2x1oXz6zgklaydddDWQotOgSdNVD+k5s99tcJrt22X++NGNt2lLXNi4dRtGe2H+bLsdp932P2vs
d8CaO+86Z8iAemuuhcskoGy0xVYb/fGG5tfcO/udoaoNomGLXyz6cRpjuRSf98X/jTsXLfph4MsN
22yHGN0uPXtYUGhez+UG4pD5S7rgcFtsJlp4YHjT14IsF+L5adu2LS9r9BT0pGgmVmOAF/3Sj6hw
RESSOCT0S1+MZJ6FkRI9pB/n3qWDExuUXxJB94p7YPNOxpwZ5aNsaNXee+9Np0CgRi0yepapnOcc
l6a42VLlNZyei0VGvF/TmfK+z186VgyQ/T7FWtwehnEhMq/jiy++yPViha38eLn+/PPPwybkVUGP
w7g984UI4xWIe8JSlq6wIlskk2PvLsR+97vfEfdwy11yySUchhcoVMJQJF08kSIXKxrGSJQKNUR0
pjEqAyz4FX64JZjRoYoVIXjp4ZWLxUHcOVyRIkVEhjufO4R5Ci1i7z17hyPMq6ddHRYBy/wLa9FZ
Ksj0Dd6F/Ze4zy0mlhPqie78vKrVftvh6CnbtLAie9ZWraogeFr5gTbvmkKXtP+grS5UbjEJzzpd
cqwJZC1OPWPME3fg5FZq3LhR96PHHX/YormzF34zvtkVt+ICG/2m8+zX+jfafAsk62/wq59t3RZi
xnvDvzymS/31N100Z1bz8y4Nca9Hl7bjPqP32K5OvXp1Gqxcp/W2nF30/Veju+2xcMokItd1jj8J
DlN3DF4de+yxYVlobhq6JGIFRkhwHqwrwRvhQpg1ZGhu4sSJvGkigH+SgtypKGFNJv01MnfddReL
F3hTppNlyk3GUfG+Ev1QhKUcrHqQsoxihZJUze2FV6Cno4POs1DK2r+0m+J0pjzM0EwkWJkKOfRW
ffr0YQqHaAZ7GKCLrGJ4EwupghEYXCPIVKiTbjQqxRt6eQ3HYdMd263CWazBvCwg0zUw88Q1kunP
6DoyABCG/lw1OFdddVXYhMwqeLlmipeyvAmxPoXBZzpfkAkLhnSRikL5PNreXcyUM3fObUbgy31C
D854o942BJeqioFB7iLZ7z2MxUUgvKz4Jy2VIKwxPBoJ+cSp6InAu7NWlplXLpyM3RFu8piEL51h
Ee5tZppD/TyqXBGuCyb17NkTVXLW3nvwozscDrVzP4cKoUOIQJLxamJNnmtOsZgA8CEsJpgRdQiY
pBeIF+7wzkdDZtXwow6HMXaY4S+zaVoRBqcfulCV0vhLHnw9LE5YY8KewaJU9p1T3KQVSZLXPftL
TIRaYThzvpvMVtSZp5TJJyssndXDiGDhDwIhc/7MmSwLCjkJmkeUmTOJ2xCDJnwkNImWVIQaGBeS
SBEmPS+DEuHZPNpKsmyHivLkK+TzdKGzQrGEAJ6Gs0zh8HjzKiCSoVWYxwtBQkPmqahUlTcc8PlY
CF8S1h5dx/BUeTTg8OakF7o8JWWUCu+uzOLhBQoFGL3X2zjkC51XykqGnAqNCYWXGs2l5znNrC66
96I7nKvJBB63SmbZghBZTCKO6gnv/Lyqi3Q4Ym3UNJhaEXR0Nqw6s7GVZEbVWW0RJlagBnMSTrBo
rDli63ilydJ8Ndjs42np6mSMIpLh3ZNfxNRDFtkqzeQKL196mCCsJJ+pJOQrPFXeq2KolpUUPMxE
VAQrOhQZWpXGIVQV0lGpKm844S+rf8MaoTOvYyRT0qEMPJZUpEqEw7srU2F4gUKB9Et9XqlQg6Ur
NMYWWQocZtP5ZVYU3XvRHc6qLkaPuFUyyxaEyGIScVRPeOczNJKoOjI70zwroxUhH50Nq87UVklm
VJ3VFmFiBWonpy4vC7blLM6UAQ17akXh8MJOv7yiWFtJOwkl8zqgSmr24o7A8oDA8n+H16oOZ3m4
JarbhoQTrLF+pfa4TO4ed5nV/Qi5/mWLwPJ/h9eqDmfZ3gzLvPaiXpMJwih1JKYzl6YNCGllpgk+
r2RMX2XkMLMilVGCoRKbr1XPClHEpMgG1UAIToJNVpTwRZQysY2FoGFeU5YAhKs6WQXOXJ3KC4Eq
loky86F8shOwKFQPLUER1r4qv4zUtVq2IJEJewhgSBfUGWGbd31Z+aIpgjNr4SbRr13zqo7qEjFg
j35cheg2TkPNvA6Z+fr16/fpp5+iUy4l9wBzHkyE5xnjfEfAEajBCBT1mkzdR5/nszhePq4HnZAu
CBb9F8vB9UssPbQVZSpk1ajN1xpKFjFJKw0LQtN3s9CRD1rwJaxfx33CzMxrysQA2QNYEIgA7pNF
nuEshahFG1+Cnn766XJIn8uyb/yxHGb+pUiYC5dF9qWmrs1Um2Ba2EMAQzqhJDwVYauHtiK8pnz+
n1cLo3PRvRdWBK3KI76kQWXN7TnnnCM0XjBSlYCaFZiHHHIIV59XNL5huPrqq+VScifwVSXzW1xu
FmBHlfqhI+AI1HAEeH22P7t8iI4pSqsYJlEMad7BWcwd5oBFPx6IFZ5hRfRBeALl6KGtqHi+VtUG
EZrEYZR0USS1Ug5Jj8LydNbUsIYeG1gcRCcOnzSP5LrLy2sqBfHffNnCKnxy+MEhsTXr3fmRyovV
5CxUQy3NJ9UqZ1kxT+YzvpCBtrDA5EcRvK/Q/GVVeqmpa7VsQcLCHgIY0pW/viyADHOQgrOkCA5r
Cc3WdGuAhruSU7fddhtJ3YTOu45ylq9c+DhdaNvMPKhHjBjBDR+tPY6EH3vsMb7qEc3+1xFwBGoS
AtYJausWDzrZny1Ad8NqT2ICXrclAyqv7ZqFNaSRZOVVmAMW/TZHK98pMvKmVeuhrYhRUNySSDJS
l8jXqtogQpOIb0gWRcSg6VhFUitlaTups/BqtI4PyzhLgMIH4CQWp7HYmZfXVPTQ3bMcVPb0EA5/
WR2AgyTNlXhNoOOD66FDh5500kmMLYvXtLBIcYowTYKjlV8ZqWvVjIKEhT0EMKQrf33D2yPMQRrW
EpqtXvOjjz7i1URO8UaCJUInriMCkdeMbuM8qPlEFdcemgEdeU2+82ElZyU/HIqq8ENHwBFYHhCw
TlCtKvrlCRE3a+LDDKikr8wLw6OUjKRVi3K08uk32a10MDM6jCoirVpeRQX5hHTEBGE6VgLKsFIE
SBVEj4xCht1wonh9etv333+flJ6k6GMUUT8RCfOayiIFnDrpuXW8WqwiAMJV43TpVeEAHZ+08yU4
w62a5CiCJWwO35DoZF40qBiKVSEdwV591ze6PTQHaYVtwSTW4nNFGDknlCfbC0US1zFTYdRMboxM
qHnTqjDNDZ+1kJCFuwWrMutypiPgCNQ8BMp52iWtYhEsCJii3KdSSqaFVEN0qHytCCevzDKIzKSL
YaV8AaZOEf2sxGHCkt0b+BFEkmyPLDN5eU3JqUG6EGYrSZJChy6fkeF0mbmkQw+txWsSWiUymIfC
tJ20cMKpqtS1of4ErbAnZORUJa8vzob4ssJaQgHyyHDhWKL1298uzoTML3EdRSDvrzYzE2rGHhgE
zisrfJYI8SqW9+FguqyfdQQcgRUUgaKrgWzzyLokKVc4FdIqyVnNAcvoqAZYJPXAuxCxiWR0qMWV
IDgonq+VbeHIbEfZ0CSbdDGqlI9TWcZJeEFBpjDpCnWvV7w+A6SJvKaEjwSF5BgjpP7DH/6ABqxl
qQiTXlGwwp5l0aKeEBZtb4IoDwoUKiwRnagrBDCktUglry9vQlEO0qiW0GatlPly3jy4f5g7h5m+
jlqqDIJUakxq6k1L7rco4ufaMWIhV7wM/V7EEXAEVlAEyveaRGOSRPHMM88MaYCQlIxkGWUeCP8B
R3K0Ckb0Puz6pHhFh8pXggE0KmLuCt9G4nXlZxIsnCHO41RokiZdxFXj3kjHGlXKIGHXrl1xliyd
pStkvpb1KayeZWaLrOKENYQjxI7MTTKdxr5XDMbSa1MF850MwCJGjSyz5C2BfKpsOsZU3PHHH0/P
y3hvpp3CDGFJiOmp8qCguMIS0arZEiGAIY1kJa+v5CBliJWJSWJHrTqqJbRZZVh0TSJ4rpHkqk5f
Ry1VBkEczBVnYReZ5XlnYiBXRtrx0+xJwo8ry9JcFtmWodyLOAKOwAqMgM5whkRiIjQUg2alDK5R
mELTFaZzwDLDp+s4KBgdRvr1sLx8raF52KlLIjMrZYJK1s1KpfSSBJpqgBDILJO8pqEZ5UERaihO
hwBW4fUlrA/vgdCesMaQLzQBLu5WkwYXuY5WSUkcprTzTC1Jjws7Ao7ACoRAwgmWM68ZviPoih6Y
IU3cwC+UFBqvww4Dso4DTnRo5ZUTzjsqs0Ii06S8Slncseaaa6pOog32tNJDIZZVXtPQjPKgCDUU
p0MAQ7qS15dVVLKQyloS1mLPEs2zaEuSBhe8jlZJSRy2LUzsXFiSKhd2BByBGoBAteSh9ZSMNeDO
SDRhGV5f3lUxrKStBBMN8VOOgCPgCGQikMhDW9lYM7M+T8mYCUuNYS7D6+v+ssbcRd4QR2AFRaBk
r8lqCCb/WB3KKBlrZDKbXSQWYcqQ7wdYtc8379oLM/UIn5G3DTbYINLMVBZqWQ5jR00jycxDWx3a
RCcbO6sBhDJ8C9G8eXNRkimj+q1OTkUaVFgIJu0oBW5UwWAvzEwlYSlrg+WE8nm0LVUeJ0+/8x0B
R8ARqA0I1CdjnG0nyx/IjBPxcZZMkLKghvd9/A0/PlePZDiE//HHH5NDzp5SDtk7SV/OxCEra0hN
jo8kKQ+pzyWhK2Lh/KKUIq0P34QgttZaa6megoStDsc8fPhwirPWg6/uWFULjSXkUUNYfHamjNZo
dVoNKiwELxzkqsVl8pE+aW6oFA8d4RAVsTZYTlSEQ5bMsGIonI2zpcrj2Lqc4wg4Ao5AzUMg0wlK
M0uINfmEkTQ9UaYePBmegFiNxR18aMG6U7wR8RZ7TbBkX1ZtWEDxfOL8sIzMOwjI95H6Eactwtcg
+BhRiJ+DIEakIr4G4RMRvkjBnePXSXLGByqRO7fV8cEfrlG8I0nkcSFEsXh6nE2TJv/ZfztTRg2z
OjkVaYADGrx/yDsE61zIIgSTDzpxurjPTCVhEWuD5WC5WiUEITvun48llG9LlcexdWkVTjgCjoAj
UBsQKOF7Tbp4vi/EvRFNKjQwJVcqY60EjsQ3fKvOF3WkYM1zmVqWkIjOnVw5+Fqy8zBg+/LLL5OC
B6eiMkrgIHGKDOfCwdfKSkuiN/jEvnBw23yLyUcvGrBqWSG0OkYmSegjnhWa+FUGSxHTKhIyoVrV
qUzVIBxsUzcMh6a9+eabvGd07txZi0RKtIi1geg8z3LVZokieqxmy1GUbBXOcQQcAUegliBQQqxJ
tMc3D4yU8iE/3pFP5ejfZdSRv4w6knwOH4bzw3FWCB9dOekIcF3ku2FuD9dCJlh6arwyvhm/G2lg
RpDJVD54wMdI1mwECA3xo1SKAZiHPWjIjIfC6lQVGiiIv6cgNDK0QgaHGbmV6iIZDvUX6hRmqEE4
ElxqEVw7uRQYi8YGsdMq0SLWBkmOKp/0hJarfobQARNAKEu4D5/XCN4worZYPUU4gpLW5YQj4Ag4
ArUQgRK8JujIiCIdPaOa9NrEVWzj9etf/xo3SR+Nv4FJH62La/IAZQiRbQvRRrI6ZPCClBJngGMO
Y1nVoMOzhGu6IAivSUQrflr6dPGjWkqIqDoxUk6RKQ1nLzR6SD0jS5zyZFRzpNNqUMmQwFNSHfEi
0GF5phKVtzZYjgoLwag4LhM8yTsvWdG5FiQqAl4RkPZaPUU4UV1+6Ag4Ao5ALUSg6AgtvS0ThwIQ
fgvXQoiGyyTDHH6OPhenhdvjFHzFkaUuuCI9FIJ4jg2zyLcnLhMm8SJMOUssqzkQwoIYQJQGh7pk
qJDJSPwBZcNBUehoJZGtjoAPd4UqxmZpgqjlUHywVJonI2etTuGHGuAwbow9corgD38GTdW0hTW0
mUrCItYGyxHl+pfrQrTNX5wlBD+Zco7aa/UU4WgtTjgCjoAjUGsRKBpr0sXz1SchCwOkOEiW7dAd
sx6HIUHcJNGn+Cr+sjqUqTsGBhFgKJKsrRG4rEPBATMSy49TDMwS4eEp//a3vzFOyFAtG2xpEVbN
sPaH3h83IzlxCNGogm1JGHVkQpSxYnwVw7wUwQx8Ktq0OIStjlAVvzJkyBC8Jl4fh0G9tI5RU/j4
NrLPWJm0TgpGGpBnLTHp32QultlW1uiCFS8WZDEFKF4dLA5hEWsDpkaWh1YpzQUKh6mL6LGaLUf1
O+EIOAKOQK1FoITcQLgTwrslAcxPvhYO/ThMRRDXhWcl7mQMdqONNsoMHFU4JPBhHIaq5CxxEtpk
AFY4VBEu4QmVFKetWlu2iIwtlcfBZhTijcK25Akr39pgOSqcIGyp8jiJKvyUI+AIOAI1A4GqyQ1E
X094FyESxjRyihCTH94U91DcZVLW+ktRaJduot8yI8MqPCyioYhMhRWpQPTCofw0YW2wnLQGOWtL
lccpUpfLOAKOgCNQUxEoOq9Zavvxpq1bty61lMs7Ao6AI+AIOALLMwLV5TWX5za7bY6AI+AIOAKO
QHkIuNcsDzcv5Qg4Ao6AI1AbEXCvWRuvurfZEXAEHAFHoDwE3GuWh5uXcgQcAUfAEaiNCLjXrI1X
3dvsCDgCjoAjUB4C7jXLw81LOQKOgCPgCNRGBAp7TbYcGfT6d4MHTnv/73Mn/7TnSdVituDHHye/
9kqGTql90Ovfvzd8wcyZCORKLim8aEnChArFpCKyN5BEl1R2csjfwYMHkwtQD5UgK94rr2SZpxJV
TZB77w9/+EMRrSRvuvLKK4tIikxxzcV1li3JRm9jx46NilcT2tWkVo2vQv233377fvvtR87n3/72
t5KOUWupKqLU24Z6uVIffPBB2QZkXmvVRi4wMk5zc7IJgTJDogyDw+JOOwKVR6Co1yQZz+TfHzbj
tQFT/vTgF2f2HHPcYXO+/Xflq480zJ/54w9/GxIxOfxP7a+/POWxh8Z23WXKkL/mSSI8d8p3o3Zt
I0oSYloLKXv23Xff008/XTgDBw7ce++9+/fvrwJK0CGynaceLgWCvrKgnyYp4JNPPlncpOKai+ss
W/Kuu+567LHHouLVhHY1qVXjq1A/qRD//Oc/k2Tx0EMPLSmflBpTIVHqbYNCXihJclmh5jyBzGut
wrfccgt7D1x33XV5bwllGKzKnXAEqgSBol5zcWX1Gmx0dd9f9r29Vb/nGu1z4BcnHLqYuWjRqF3b
jezYauRvNpt4x60w5n43eXT3vceectzIbdcbe+KRk555amTnrUbt2nbq34bmyY85otvEO28btff2
0//+7vwxIxBbOHfu2JOPGbnDFvz7+k8PLy64pPaWN93Z9PQ+Ux64ky3BRNIaMOGKi+tM/2rkzq3H
nX7ST2JLIkjc4WJV5seGZTyNZKzlzLXXXnvkkUdC8NxuvfXWbCjdsmVLHmY4JPdha0wIctEdffTR
7AzK76GHHoKjP5LNHn744XJ455139uvXj3dnkvEec8wxJKTl1FNPPcWmZmwUQx5axGwtqgqC7LsI
Q9x7771kr+VHYtujjjoKDn6d9Pfbbrut2AaHHLzoJ1tvly5daA71Hnjggbfeeitbj5F0N2qLaqag
/sTU448/nu1oaCDNTJtHwWeeeYZcvuzvTQM5fOCBB0ijyOFNN93EIQp33333I444AqsIm/AomQrJ
iWETFeWhbcGPKtXmQNjqVG0oFtFho6yG9AVV/ZGdVk9YaSby11xzDdjef//97J0nwomWIvDII4+Q
kJl9Edhoj31qbY22FkpxUYpfcW6nXr16sWkPBa0xkQGZMpnXGknGe84880zuah5A9tm97LLLZKNc
q7Mkg9HsP0egihHg0bI/crJHzAVz545os7Yy2eKSw4Xz5sH5YdRI/s6bNm1Eh5bzpk+f/c3XI9q2
mDLsTc6O3Lfz2FOPn/v995MHDxx9TA8pniG/TbMvb+k7/R8fc2rkTq0R+7rfn8Ycf/hitdOnT317
WFj7uHPOHH/phbP/PUkkkYkUzvlu8ogdt5K6QrF33333jDPOEH74l94N10gQiY/Bk5100kkXX3zx
9ddfjwyjSfxl2xY6I4aG2GIFpwXn0Ucf5fUfAuawYcMg9Mf4FV5KDi+//HJ6GcZ+8RlktCfXPLt3
HXfccSRwJ6I9+OCDRSyqRVVZggS8bPdNn47N+Es6L/K/77zzzuzcQi14ZbYsJZc9/unZZ5+Fgyu6
4YYbCFZgFqlFTAUK4u9u3boxUo0NiYLkTdxkk00Yr0OeqAhXTeb9cePGsXENDp4d3yKrnn766UyF
l1xyCXZG7c1DOwLfVhrpiexXtZGYHkaNgh9pEJTyLqjqj+y0erRGiCLIp1s6evRoNqHDv3KT8PKE
+7E12losx5YK7YTmNfGcc86xxlgDrAzFM681fG5RNu498cQT33rrLRwz2ri3rc4yDI7s90NHoAgC
1glqqVJizcBfkweWo4Vz5vB31tjRxIXjDu9SZ86MOf+eBKduk7XX2H4H4rwGm2612q57N2jSpHHb
dgvG/ed9OUN+jfXXO6P36lv9eqWmTaWShq1azf9s+ITbbpo94cumHbdfzFwwZ1SXnUf+ZvP548e0
6H2uiMlfqzA8q3T79u01LFOmEmyyTS9/6qmn9unTR5k8tIRc++yzD480vaHycRXs0HLjjTcSWco2
lnoqk8Dp7rDDDkQhZBkk3mVfl3bt2kloi3xeLVbV1VdfjVvCn7HlC2fxNPRBeFDezTkkYmYDGTw0
Hp3gEg7CZ599NnEtzIK1YCpQkJG/Q4cO5C9GSaLgoEGDqJEtYpDv0aMHhzSTnddQAmh5VlmFefEH
tfOL0I4OMyuVgvLXVheetXTUKASshvQFFZ2RnZl6wtorRD7dUq44YT17DTFQJy0mAAAgAElEQVSW
yw0mmjMtj65vhfWGRiptjbEGWBmK511rblG21WNUBr+41157MYpD1murEw3lGayWO+EIVBKBn/Yq
KUnRjM8+rdv0F+yxOWXoG1Ouu2Tt6+9ptPmWY7vHm4LVqVdf1NatW6/OwsW7S1Yg/18jmrbvUO/u
/lOe+NPEE7uudmSvFiefWqf+z9a79YGV11qbSpHSWdWCCv+rOPX/hRdeSIjG4ypChFxwGIYibNpt
t93CkngU1mgQTDAh2rt377POOis8yytJeBjSeBc5JAE9MQF0opawIDRxJAEEoS00Dh5feNBBB0Hz
lxHRUBj3zFhcyClei5bCVCxMFxwzZgydnRYhhmZ/cjlkv7ZoQQdNhpOpkH3TdN9s1aaERTsEnwg7
UWlmdao5k4galdZgL6jqjMzmhSnvdtIiQuQhn4aXzRKiPfIqtFzuQK09r14VCAlrDFv4RQZYGTRk
XmvmMrmNiel55WKsgjkRNhk8//zzbaNCG0oyOCzotCNQGQTKiTVn/nPc12cd36TX+VQ8e+yYBtt2
btKmHZtbLpqRvewttK+gPFU02mKrjf54Q/Nr7p39zpIJ0Tp1V/1lS3GZaYUrrd64zqIFzGiFYtA8
jQ8/vGSKNDrx30MGNu+7777/Hi2OMHbZZReCQjoX3VxazqKKl/q+ffuikNdhLQLBizCdBUXwnYiF
pzLpRC2hPDoZvGLJjGw7s//++9PFtG3bllCvTZs2oZ+GHjBgAKPEYfGCtYRFhE4XBBwWKzEQh/D4
8eMJowmCGYim+UxTMb2qCtk87vnnn+/UqVOmwhNOOIH4WIUjIkI7OkxUip7M6lQ/g/bPPfecHgoR
NSqtISobHkZ2lqrHyqdbyosdc5nMBTJuz5g8llgNoXl5dMFS1hhrgJWh0sxrzV3NTctABTMXTMry
F5eJsNVpzS5osC3oHEegPARKiDUXMUa68zaLq/lZw8Yn9V77oEMgm3U9aHz3O0bt17kO0eTcWRUa
UVB+xnvDvzymS/31N100Z1bz8y5NqLUK6zVosPIO+4zqslODLdq0OO8iLcuUD99mHHvsscpJE927
d2dEV/bfZgFCKDx8+HAGkZjjZOqFycvwFANQuDT8GaEVNLOP4VlLJ2oJhRkNZoiYVRswmYVluSwN
YVCUl3RmUlmXSEBMj0kvw6p9PHfPnj1xtKqhYC0qr0S6IKPTXbt2JT4g8GU6kKk+FlLR99F25l+J
GOjBMQ8MJ06cyEAujp8lSxbVSy+9lPWi4di4GgARoR0dEuJElYZl0/az3AY7Q3noqFE4e2twVCTz
MLKTVV0l6bGWp1vKFvEAyGQ50T/70TJIyztfSTVKK2y9UevkFS3TmMiATJm8a83LFtPw0a7ytlGR
MRxWaLAt4hxHoFII8AzYX2Ii1ArDmTVxwqIl0VXmWcssIs9iojmTv7VlMzlW4bwZM1hDlClcEpOF
LRI4RqV4yBkmjZh6yDwoAnpYIZFXS4UFGYkljFMxwj6mhfQwIsquJV0Qf0ksrnUxz8rLhBxiDEE5
HJZNqQBEWmEoKXSEdnSITFipLZ5ZHbix3Jdu2srDiRqVqSGzYMi0dpaqx8onWorN1M7KLF7peJ0S
S6yG0MI8OlGKyXU+JJWCkTGZBkQyeTXm8TN1WuGEwVbYOY5AhQgknGDRWHPE1v9ZX1ApF73sCm/2
8bTyKiduyyzI3CGv0pmnYIazfXkyIT+vllAmk2ZWL+QzD8Qv5IR02bWkCxIiMFmlFRHo8NNDCMtJ
KwzLCh2hHR1mVhEqyayOEVRi39WWTJOHwkJHjcrUYEtFHGtnqXqsvAVTKyVK5lWAoQjCL8Y5hG81
qHyCyCzF6h6iSWag9cvgyJhMAyKZRKWZpzJ1WslMg62YcxyByiNQF5drtbB4ktkdy3eOI1AqAkTq
DNiWWsrly0OAKD/x2lSezrAUkZ/645CvdHUYUB061WAnHIFMBBJO0LuzTMScWWUIuMusMigLKKpW
l0n9aZeJQHUYUB06C2DpIo5ANgJFR2i1NPNATGKx5o3xSV12r2eFKBJe8BEC2QMYH2OMUTtWpkDg
8z4bfUqBWiYRUctDy7KRqLoih7Y6tIlOVhyoAUTezBSSN0cbYmW0OquTU5EGFRZixowZlAI3qmAM
UJjpIjJFKpKrrroqi/t59cYqcNAvLqJaMg9te8vjZCp3piPgCDgCtQSB+mSusk1lEUeLFi0iPs6S
CVK6bD6jptfmx2f1kQyH8Fn4zuSKPaUccjSTzZJZH5ZWkigAH8kSBr7QYhWoyITzZMJhtp9vGxAj
2ZvqKUjY6nDMLHGkOItjSarJak9oLBkxYgTC4rMzZbRGq9NqUGEheOEgIR8uk6UxH330EZXiraNK
oyI4VFbhAxRl+fHSQFkWA+M+WZ6KDeuss05UhEMmt/C1yOgp25byOKrQCUfAEXAEajACmU5Q2ltC
rPnZZ59tuOQXIoUnwxPQ+zOKwtd4LBrEG9HX87ke3xHmrZfB84nzw7JRo0ahEOX85ROFUHlIs3Cf
KFAU4ucgiBGpiE+5SSnHx4u4c/w6SweZkY3cua2OvDy4RvGOfDKPC8Eh4elxNppXJVNGTbI6ORVp
gAMavH/IOwTLKOQzSr4JweFJpJ4uQjhOQMkH8lovH0Lsuuuu8jk5n7ixQtVG/ITsuH++ANFSti3l
cSocoNManXAEHAFHoEYiUMK8Jn6CKAf3RjSpWMBkmTs/xloJHIlv6OX5TpnP4PJcppYlJKJzJxcP
vpaELHgIcrDxpXb4oaEK4yBxirJkFF8rqWQIv+AT+8LBbfOBGl5EA1YtK4RWx8gkgZp4VmjiVx0s
1SoSMqFa1alM1SCcML0ZHJrGR428Z3Tu3LlIEaBmUJdECrwWUBdWgZW6STg6tqzaLGHbQvAaIVCE
oyjZKpzjCDgCjkAtQaCEWJNojw8qGCklyTLekWyWuAT8Fj6Av4wckjwaHybhUYXw0ZWTIg7XxZJx
pvqI8EhzQ9+NV8Y343cjDTgPJlNZxY6rIKCUDwYIDfGjVIoBmIc9aMiMh8LqVBVVUBBVFIRGhlbI
4DAjt1JdJBNaFeoUfqhBOFGOHlw7OQEYi8YGsTNdBEgJ72kymOO0KMuP/DtMi2IhHLFcrWIIHTAB
hLOE+/B5jeANI2oLn3WWwYnq0kqdcAQcAUeg9iBQgtcEFBmWpKNnVBN/Q1zFbhvkhSG+pI/G38Ck
j64wAGII8Z133kEbe12hFi9IKTwiNI45jGX1SujwLOGaLgjCaxLRip+WPl38qJYSIqpOjJRTZNLB
MwmNHkY+JZLLk1HNkU6rQSVDAk9JdcR5QCexeFhpKCm0rh7k5QBJmIw/49q5BHxuGM5cirxk1wPP
999/nw/dYHItSCoEvCIg7bWtK8IRDf7XEXAEHIHajEDREVp6WyYOBSn8Fq6FEA2Xyf5/+Dn6XJwW
bo9TEgWKJEt+pK8PIabTZ0MudgEUl8kpXAJMkSGWzVzhggGEWchQlwwVMhmJP6BsOCgKHa0kstXh
ivB5qGJsliaIWg7FB4sZeTJy1uoUfqgBDuPG2COnCP4IAaGpmrboMt1EEZwf3pEijMqyaEgna3Ht
BIvMjGqieamCv1wXom3+4iwh+EHYtpTH0VqccAQcAUeg1iJQNNbET/DVJyELo4U4SMnOynochgRx
k3Tu4qv4y+pQpu4YGKS/ZiiSrX8icFmHggNmJJYfpxiYxQ3gKdl7C2fAUC37W2kRfANrf+j9cTOS
cIcQjSoYpWSMEXdCvIXjkcwgmIFPlZUyqsFWR6iKX2GyEK+J18eFUC+tY9QUPr6NjKlWRhVCWJ0U
jDQgxlpictXi16GZbcXzgRUvFuSMBShbaVQE58q8L5hThDcM0KaILGMmuGdNELBQxP64QOEwtW0L
TY4QKMKxFTnHEXAEHIHahkAJuYFwJ4R3i+OXoLOGQ/8bcnBdeFbiTsZgyfOZGThmoowPgx+qEjGC
M7TJAKxwqCJcwpOprUKmVWuLFJGxpfI42IxC/FPYljxh4YMkCGsRLgEvHHqYLhudtW0pjxOp9UNH
wBFwBGoeAoncQNnBSiYE9PWEd9GpMKaRU4SY/KSvL+4yKWv9pSi0SzfRb5mRYRUeFtFQRKbCilSA
Bua1UWUigjeScPKSSxAeRsLpQ9uW8jjpWvysI+AIOAI1G4Gi85qlooA3Db8yLLW4yzsCjoAj4Ag4
AsshAtXlNZfDprpJjoAj4Ag4Ao5AJRFwr1lJAL24I+AIOAKOQC1CwL1mLbrY3lRHwBFwBByBSiLg
XrOSAHpxR8ARcAQcgVqEgHvNWnSxvamOgCPgCDgClUTAvWYlAfTijoAj4Ag4ArUIAfeatehie1Md
AUfAEXAEKomAe81KAujFHQFHwBFwBGoRAu41a9HF9qY6Ao6AI+AIVBKB3Ix6ZOGrpGov7gg4Ao6A
I+AI1DAEsrO317BGenMcAUfAEXAEHIEqQcBHaKsERlfiCDgCjoAjUCsQcK9ZKy6zN9IRcAQcAUeg
ShBwr1klMLoSR8ARcAQcgVqBgHvNWnGZvZGOgCPgCDgCVYKAe80qgdGVOAKOgCPgCNQKBNxr1orL
7I10BBwBR8ARqBIE3GtWCYyuxBFwBBwBR6BWIOBes1ZcZm+kI+AIOAKOQJUg4F6zSmB0JY6AI+AI
OAK1AoHsjHqeTq9WXHxvpCPgCDgCjkAOAu3atcs8k+01Ec0rkKnFmY6AI+AIOAKOQI1BIBE6+ght
jbnK3hBHwBFwBByBakfAvWa1Q+wVOAKOgCPgCNQYBNxr1phL6Q1xBBwBR8ARqHYE3GtWO8RegSPg
CDgCjkCNQSB3NVCNaaE3xBFwBByBKkdg6tSpVa6zPIVrrLFGWHD5MUytWv4txNTISDXeEh5rWkyc
4wg4Ao6AI+AIZCPgXjMbF+c6Ao6AI1AQgUWLFo1e8hs/fvysWbMSpb777rtXX3319ddfT8jYU7Nn
zx40aJDlV8gpbliFqqpV4McffxwxYsSHH344adKkzIrmzJkzcOBATimRKbZ0mO41lw7OXosj4AjU
WAQWLlz40EMPSb9/7733fvrpp3lNfeyxx9Zff/2tttoqTyCTP2/evH/84x+Zp9LM4oal9VTr2Y8+
+ghYvvjiC14peJ944403bHUg8PHHH8NXwsosNY7Pay41qL0iR8ARqLEIrLTSSvvvvz/Nw2USM225
5ZbQuLrXXnvtZz/7Wdu2bX/zm9/85S9/IZZ65ZVXOnXq1Lhx4/79+7dq1eqDDz7Yd999CbZCyfnz
5z/99NM4EpTssssum2666dy5c5966ikc869+9avu3btTXUEoixhG7Y8//vjqq68+cuRITMKpYwwF
DzjggJYtW1LRe++9N3jwYCLXHZb8hg4dutpqq0kmnHfeead+/frt27ePGlvQvG+//Zbgu3fv3g0a
NAiLRDWGp4TGmJtvvpnIntrBlh+t6NevX6NGjUaNGrXBBhsceeSR9erVC2HcdtttyzMyqr0o9FEx
P3QEHAFHwBGIEMDb0S9vsskm8BcsWDBkyJCTTz65YcOGDz74IH50zz33/Oyzz84++2zOzpgxgzFd
fNLBBx+MBxowYEAoOW7cOIqfe+65DEh+8803yOMe8FL4S8Kyf/3rXxtvvHFUdfowbRiOZ+LEicce
eyzG3HPPPfjOXr16TZgw4a233sJCwjsa0rNnT8QeeOCBNm3awHzhhRfEaw4fPvyYY46xjW3atGna
JDn71VdfrbfeepHLtDVaVXXr1sUvNm/enOHrvn374hEJrL/++uvjjjvuwAMPfPLJJ/GdvGqEMJZt
ZFS7e80IED90BBwBR6BkBHBv11xzDb6wQ4cO2223HeXHjh3L3zfffJO/9Ne4om222SbU26xZsx13
3BEO/Xskue666zJFSlkiyw033BC1TZo0kbCPAV48XHGvWcSwLbbYAv0bbbQRZlD1L3/5Szz9L37x
C5wQnDFjxnBqzTXXhMYeGkLojENiQBX3tuqqq7L61DYBHJCv8IeeyGVSxNZIvVYVBhAB85dXCiBa
eeWVieCJMpHceuutefMA8BDGso2MqnavGQHih46AI+AIlIwAXXafPn3o7p955hnGVBknZMBw7bXX
lilM/iZiLytJ70/kx+At06WMPbZu3VoNYtSRwUk9rJAo1TBiONEJIRXhk1AiTAgOoQk0MY8QliCP
Q9sEka/wL68Ob7/9diSWWWMkw0sJQ7sE34DMXHJ0FuNRggcNYSSmL3hFIm3Roa8GigDxQ0fAEXAE
ykSAScGOHTsyiEpwufnmmzNp16JFC/pu/iZcnZUkflpnnXW6dOlyyCGH/POf/yzTmqBYeYaJAmZV
ZcSYIVBeCzbbbDP4hHEsz2GeVV4LbBOCylMk4BCwaqr06dOnozazxkgLEBF8M7oLsOLIVQA7GQkn
Ro9gLNtI1SyEx5oRIH7oCDgCjkD5CHTu3JkZQRb+dO3alYCM9Sl4hSlTpnTr1o3B1Uy9DIdGkj/8
8AMziGuttRZl99hjj8xSpTIThhGBJbQRouEj77rrLgI4vO/Pf/5zhFk6BEFILeOrtgkM+SZ06inm
So866ijW7AwbNgyamJX22hoBRIsIgbdm2vWOO+4g+GaYV5i4yTvvvBPXyzgzQfAnn3wSwli2kVHV
/4nBIy6eX2Z6I74fOgKOgCPgCIBA8RQ8eIJVVlmFzr1C3EJJolXWueA/KiwVJbWpDsOwAXuI4ewc
ZGRe2AQ9VcRCPB9TsDhjLVWkxmnTpjGaLaPKTG3ef//9Z5xxBuPGOqScCWMRIxNO0GNNvUZOOAKO
gCNQ9QgU8XxSayhJ4BUeVr1ZdeqUpB97+FVoRkk6Q218n8Mv5BSp0Ua0USkOrUmWE9ZbIe1es0KI
XMARcAQcgRiBKH6KTy+74+XWMIWkmixE7eWXX661VB9R8aBB9dXtmh0BR8ARcAQcgRULAfeaK9b1
cmsdAUfAEXAEliUC7jWXJfpetyPgCDgCjsCKhYB7zRXrerm1joAj4Ag4AssSAfeayxJ9r9sRcAQc
AUdgxULAveaKdb3cWkfAEXAEHIFliYB7zWWJvtftCDgCjoAjsGIh4F5zxbpebq0j4Ag4Ao7AskTA
veayRN/rdgQcAUfAEVixEHCvuWJdL7fWEXAEHAFHYFki4F5zWaLvdTsCjoAj4AisWAi411yxrpdb
6wg4Ao6AI7AsEXCvuSzR97odAUfAEXAEViwESt7z5Ouvv2b/7smTJzdv3nzjjTfO22e1OlA4//zz
J06cyN6qPXv2rFD/+PHj2W5NxNh9jd1T2adUN12rsHgZAiWZl9aP8c8///zQoUPZlu+mm25q1qxZ
Wr742ZkzZ44dOxYo0Mn+7Gzgt8UWWxQv7pKOgCPgCNR2BBZl/f7+979bNtuRH3bYYbL/p6K22Wab
0fNa4ergUBf1HnfccUWUd+nSRY0Ugj3VzjvvPDYpLVK8DJnIPFz7hhtueMghh5SqijeDEOQxY8aU
qiEh/+CDD4IGG80jg+/s2LFjQthPOQKOgCNQOxHIdIICRQmxJn7orbfeIvrBb6211lqjR48eMmQI
cWe4cXbkqJb5Iduc9ujRgy3Chw0b9tVXX1177bW/+MUvzjzzzKVg2KRJk/71r39RXal1PfbYY1wb
EH7//ffx9PxK1ZCQHzx4MC6ZeP3zzz9n2ODEE09MCPspR8ARcAQcgRiBzPcI62YnTJggJcNQjyjz
5ptvxieJkqeffnr77bdna9Cf//znu+666zvvvCN8dgr99a9/zZDgqquuutFGGx1++OGffvqpnDr6
6KN32GGHP/7xj++++y783/3ud8J/8cUX99hjjxYtWqCKeIgICb4Ec0cdddT111+/1VZbtWrVCs3T
pk2TItFfiTXxPcIngBP7CZdVMs9g3Mktt9zStWtXbN5ggw322WcfBksp1a1bN6xlyFQ0XHHFFRye
cMIJchjGmn369JGdVxkZRobf9OnT89SqPRAUlPHY1VdfnVJXXXUVzIULF953333t2rXDg4LJ/vvv
/49//ENL5WGoAhAfffTR2kt+shs7ZNOmTQGEWqC/+eYbZNKtyzM+cXFDA5x2BBwBR2AFQsA6QTW+
jlIhYQvgGnEA9LP16tXbd9998Rz/+7//S2+upejfOYsMsR0+Epo4T0YX8aB099ttt92vfvUrGXtk
bHDWrFmUFU+zzjrrCB9PCfPGG2+kOD/qYuoUAmeswkvO/PTnzjvvVBtCIvKauBkpg8cVsTyDf/zx
R6kUh73bbruJhVdeeSWlsBMlvXr1Eg24eQ5bt24th6HXPPTQQ8U/0QT8Ez/cdp5aKS5/KbjSSosH
AACEUqeddhp8BpbF+LZt24oNyHz88cdhvRGGoU7okSNH7rTTTttssw16NtlkE9qFU8dCmPyYpUYm
0boEJomLG9ngh46AI+AIrCgIWCeolhf1mhTQvlt6cP7Sib/33nucIliRvl5GFxmzlYCJIpwlspw3
b55UqR5RbBJPQ0R4yimnXHTRRUR43377rfibnXfe+csvv6QUg8AXXHABhAh36NABDitZCFuxQRyt
KA//itfEcxMcd+/evXHjxgizdolRU8QSBhNWIsnv1ltvFYWffPLJG2+8AZ3wK5wNvSaHBxxwAErE
33OYUMvZ8Ec0TEE8nDABQV4pWG0E54cffiD8RYB3FxGwGIbaQvqBBx6g4CuvvAKToWPGacOzidYl
jE9c3FC5046AI+AIrEAIVI3XpMF0uO3bt6fn1R/O8vvvv3/55ZeFs95667EEhh/uCg6DnJTCUZ1+
+umbb755gwYNtOBf//pXTkWeBs5rr70mMo8//jiH4S8SZqgWSeoKZZQWr6nVQeCbcckikDCYoVRd
aovv32uvvZ577jkplfArCETmRV4zoVZtFiLymgxWSyuYVBaBk046SZojh1G9kTY5ZHyVnyzmYoEu
M6ZoYH4XpgT9iCValzA+cXEzLXGmI+AIOALLPwIJr1n0e03CR9qJC2ECkqlE3CdRFD0vfDyQfuPR
qVMnYiB+LDM59dRTGQlk5S0TcrfffjuLV3//+99feOGF4gPy/qJcTuHk8mSEz7qktABnGeR88803
xYH9+9//fuaZZ6RIwmCm+gYMGMC4K5IMXb766qv4fsZ1tS6arHRxokK1eaoYHZVT2l5x6srPKxjy
iSwZFX/iiSe4iMToDBJwlsgeJutpQ8nM1uUZX+rFDSty2hFwBByBFRGBol4T37PtttsSINJIRjtx
n6yCkQYzQyYTmRz+8pe/vOO/PyYOKcI6W3wPp1544QVW/fAlhpTK+7v11lvLqSeffFII3C0fL1p5
Gbe0/JBDyMuamoceeki+K2VKkulYBBIGjxo1iujtww8/ZGi0f//+sghWXIsMO3/22WdowP2ogw9r
VFrGmdW3JdRqkUxCv6fk3UcEpAlbbrllpnwmk2VWRxxxBKd41znrrLMY42WQAIIf05xSJNG6PONL
vbiZtjnTEXAEHIEVCIESvjxhWI+lH7hMHBsRCUEn7WTAluUkDRs2ZGkMY6p82vHSSy/hqJg4xMWy
vPPcc8/FveFjmONkru7ZZ59No8OKIdYT4TLvvvtuXPVvfvMbJtVYmHPggQemCybO4tcJs3bccUem
V5njpCH4xTyDqfH444+nOsJNJhGnTp2KZtw/f4lZmePEHtb1kC6ANiYqlbU/LF4FBBz/7rvvztKe
TLUJJZxitfB+++0Hqr1795YJXRYnw2eaM10wPHvDDTc8/PDD/fr1Y4aYsWvgZWUyS7pCmUTr8NOZ
mBCzlnRxw+qcdgQcAUdghUQAf2Z/dkiXwIt5RAY8tZEsiyWCkeWXaMDBXHzxxQzlqQCjfyw/4dRl
l10mBfG4RHsikDeviTzDp+eccw6eWCRZhsq0KPxoAu/kk09GID2vqV+eUFwWzVKEAWRW/+YZzJed
RMxSNX9xDPgn+bqGkIs1SnKKYVveIaAz19BSHYtm8XZ8bCPyjGnnqUU4/EXzmpwCZJnEFVW8BNxz
zz1aJIJF+RHBqiiKMwlNKyAuvfTSSCDRugQmiYsb6fdDR8ARcARWFASsE1TLF0eB0heHf4ktmIwM
OUozLEmMRcdNRr3MMVK+7mcGkeE+VpeoAF6HRG58YSmrhFRbgsCx8ZEoI5wMJ1btl/5RpZkGM2PH
ShkWNzVp0iSSxx1iT/gCEQmEh0S3yIOVNCGhNiyVSQMFX/Lw5sGLAm8SmTKVZyZal2d8GRe38na6
BkfAEXAEqg+BhBMs2WtWn5Wu2RFwBBwBR8ARWB4QSHjN6gpZlodmuw2OgCPgCDgCjkDVIuBes2rx
dG2OgCPgCDgCNRkB95o1+ep62xwBR8ARcASqFgH3mlWLp2tzBBwBR8ARqMkIuNesyVfX2+YIOAKO
gCNQtQi416xaPF2bI+AIOAKOQE1GwL1mTb663jZHwBFwBByBqkXAvWbV4unaHAFHwBFwBGoyAu41
a/LV9bY5Ao6AI+AIVC0C7jWrFk/X5gg4Ao6AI1CTEXCvWZOvrrfNEXAEHAFHoGoRcK9ZtXi6NkfA
EXAEHIGajIB7zZp8db1tjoAj4Ag4AlWLgHvNqsXTtTkCjoAj4AjUZARWKti4BT/+OHXYm8323Lug
/E9iixZ9N3jgaltu1XCddYU55Y3Bq7TceJUNNuRw7pTvZnzw/ho7dK638socfjfo9Z8KLqEWzp5V
r+EqIbNJh07Thr+tnJVb/KLR5lvoYUSwe+jAgQNhsjv0lltuKZtivv56XMv2229vt/Bk38133313
5syZ7DstOz+LcjYKnT59eps2baK62Ey7b9++7PYc8ZfyYXU0ObMJ7Pf55ptv7r136bdEprqKmM8/
/zw1HnHEESrINq7sMzp37txVVlmFDV9nzZr14YcfdurUSQS4TCuttBJ7kXI4fvx4NtZec801Oasb
o3733Xfvv/9+586dV15y76laiOq7lPPnz8eqsK4EzW3GHfjVV1+tv+/6JuAAACAASURBVP76O+yw
Q4MGDeDcfPP/Z+88wLUsjsVP0cRrbDGWxJiGGmNDQQxqFMUuoFIMiiiKXIwau4kae8n12gv23mLv
iTHqX40SNZabaDTRw4FDMEpsgIKFJvD/HSYZx5n32+/9vnMOAc9+D89h3tnZ2dnZfXd2dvedvfCE
E05I5KojaezYsRTEFe5cuk4plTigwx/96EekIsYpp5zCheRyC710ue9+97trrLEGqQjMW8NlupX4
JPC06V/+8hcI4MYredlll5122mkJ+kTSLbfcwmvLrfIJmrZOqk8G0ee66677jW/8a8x8/PHHV1tt
NW4altFMxKYnb7TRRrYKNfUuMo4ZM4beCGfLJMNVNVDW1/z0k48/eurJquwiwdxPP5105O5v/vxg
ScKCvnfY4Mn33S2Pb106atJRe7/3m/vlcdrvfsO/KaPOmHz6MQJ/+OCvHebTqR/AUFL5+9FfXoqF
KoZu1KdPnwcffJDu27t37/vuu4+kX8//nX766T/72c8E/uijjzQLALl+Of/H6MCQevPNNx9++OHv
v/++0Lz++ut/+9vfLL3AjNp33HFHxC9gTFtUubAK2LAnnniiMKnVka+++iozkn79+lnOo0aNmjFj
xtlnn80oA57L0keMGKEE11133V133UXSLrvscuqpp77xxht0g5122kkJMD+DBw+WLqFIAdqoKbHT
DIWurEqPv/3tb7fffvs777yT2Rt/sWfMD7BGrd7HYHvEEUdw4Tkj8tprr6393AqGvfz5z3/+05/+
VJBcjc5E8yc/+Yk80uX69+9P63AHO5iHH34Y5dvs5WFKv/LKK48//nhupKftHnroofJ5HSVTur//
/e8OuYAf65NBXmHVNu3C3JTOLHgZsvj71FNP2erU1Lsk4+WXX87gZplkuJQG6Jrx93//938OOXPK
5LFD+jcj584d07t7Q8/VGjZd881LRoGYOem9xoHbj9tv74YNvzlu3z3evvuOhs3XGdO725Q/PEnq
nFmzGjZerXHXPlNfepFHKJsOGP7GhecCw6ph83XfueeuxsH9mh///Zt4zZXjjzrs30/N/1tMM8Nu
K9tU4Mcee4whxiF5ZERYaqmlBM/4yCipNFdcccWhhx6qjxY46qijnnvuORyXnXfeedttt9111115
h/fee29oGKnXWmstRuq5c+eut956q6666ve+9z3GX5IY3Rh0hA/D3JprrrnhhhtK0nvvvQefffbZ
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

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/style.css

body {
	margin: 20px auto; width: 60%; font-family: Georgia, serif;
}
a {
	color: rgb(206, 36, 42);
}
a:visited {
	color: rgb(159, 40, 38);
}
div.chapter {
	padding: 50px 0px; border-top-color: rgb(204, 204, 204); =
border-bottom-color: rgb(204, 204, 204); border-top-width: 1px; =
border-bottom-width: 1px; border-top-style: solid; border-bottom-style: =
solid;
}
p {
	line-height: 1.4em;
}
.titlepage h2.title {
	font-size: 200%;
}
h1.title {
	font-size: 250%;
}
h1 {
	font-family: Helvetica,Arial, sans-serif;
}
h2 {
	font-family: Helvetica,Arial, sans-serif;
}
h3 {
	font-family: Helvetica,Arial, sans-serif;
}
h4 {
	font-family: Helvetica,Arial, sans-serif;
}
h5 {
	font-family: Helvetica,Arial, sans-serif;
}
.example {
	margin: 20px 0px;
}
.example .example-contents {
	margin: 0px 0px 10px;
}
.example .title {
	margin: 20px 0px 3px; font-family: Helvetica, Arial, sans-serif; =
font-size: 90%; font-style: italic;
}
.note {
	padding: 15px; background-color: rgb(255, 238, 102);
}
dt span.term {
	font-family: Helvetica, Arial, sans-serif; font-weight: bold;
}
p.toc {
	font-family: Helvetica, Arial, sans-serif; font-size: 90%;
}
#toc li {
	color: rgb(206, 36, 42); cursor: pointer;
}
#loe li {
	color: rgb(206, 36, 42); cursor: pointer;
}

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/shCore.css

.syntaxhighlighter {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter div {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter code {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter table {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter table td {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter table tr {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter table tbody {
	margin: 0px !important; padding: 0px !important; outline: 0px =
!important; border: 0px currentColor !important; left: auto !important; =
top: auto !important; width: auto !important; height: auto !important; =
text-align: left !important; right: auto !important; bottom: auto =
!important; line-height: 1.1em !important; font-family: "Consolas", =
"Bitstream Vera Sans Mono", "Courier New", Courier, monospace =
!important; font-size: 1em !important; font-style: normal !important; =
font-weight: normal !important; vertical-align: baseline !important; =
float: none !important; position: static !important; min-height: auto =
!important;
}
.syntaxhighlighter {
	margin: 1em 0px !important; padding: 1px !important; width: 99% =
!important; position: relative !important;
}
.syntaxhighlighter .bold {
	font-weight: bold !important;
}
.syntaxhighlighter .italic {
	font-style: italic !important;
}
.syntaxhighlighter .line {
=09
}
.syntaxhighlighter .no-wrap .line .content {
	white-space: pre !important;
}
.syntaxhighlighter .line table {
	border-collapse: collapse !important;
}
.syntaxhighlighter .line td {
	vertical-align: top !important;
}
.syntaxhighlighter .line .number {
	width: 3em !important;
}
.syntaxhighlighter .line .number code {
	width: 2.7em !important; text-align: right !important; padding-right: =
0.3em !important; display: block !important;
}
.syntaxhighlighter .line .content {
	padding-left: 0.5em !important;
}
.syntaxhighlighter .line .spaces {
=09
}
.nogutter.syntaxhighlighter .line .content {
	border-left-color: currentColor !important; border-left-width: medium =
!important; border-left-style: none !important;
}
.syntaxhighlighter .bar {
	display: none !important;
}
.syntaxhighlighter .show.bar {
	display: block !important;
}
.collapsed.syntaxhighlighter .bar {
	display: block !important;
}
.collapsed.syntaxhighlighter .lines {
	display: none !important;
}
.syntaxhighlighter .no-wrap.lines {
	overflow: auto !important; overflow-y: hidden !important;
}
.syntaxhighlighter .toolbar {
	padding: 8px 8px 8px 0px !important; top: 0px !important; right: 0px =
!important; font-size: 1px !important; position: absolute !important;
}
.collapsed.syntaxhighlighter .toolbar {
	padding: 0.2em 0px 0.5em 0.5em !important; font-size: 80% !important; =
position: static !important;
}
.syntaxhighlighter .toolbar a.item {
	text-indent: -5000px !important; overflow: hidden !important; =
margin-left: 8px !important; float: left !important; display: block =
!important; background-repeat: no-repeat !important;
}
.syntaxhighlighter .toolbar .item {
	text-indent: -5000px !important; overflow: hidden !important; =
margin-left: 8px !important; float: left !important; display: block =
!important; background-repeat: no-repeat !important;
}
.collapsed.syntaxhighlighter .toolbar .item {
	display: none !important;
}
.collapsed.syntaxhighlighter .toolbar .expandSource.item {
	width: auto !important; height: 16px !important; text-indent: 0px =
!important; padding-left: 20px !important; float: none !important; =
display: inline !important; background-image: url("magnifier.png") =
!important;
}
.syntaxhighlighter .toolbar .viewSource.item {
	background-image: url("page_white_code.png") !important;
}
.syntaxhighlighter .toolbar .printSource.item {
	background-image: url("printer.png") !important;
}
.syntaxhighlighter .toolbar .copyToClipboard.item {
	text-indent: 0px !important; overflow: visible !important;
}
.syntaxhighlighter .toolbar .about.item {
	background-image: url("help.png") !important;
}
.printing.syntaxhighlighter .line .number {
	color: rgb(187, 187, 187) !important;
}
.printing.syntaxhighlighter .line .content {
	color: rgb(0, 0, 0) !important;
}
.printing.syntaxhighlighter .toolbar {
	display: none !important;
}
.printing.syntaxhighlighter a {
	text-decoration: none !important;
}
.printing.syntaxhighlighter .plain {
	color: rgb(0, 0, 0) !important;
}
.printing.syntaxhighlighter .plain a {
	color: rgb(0, 0, 0) !important;
}
.printing.syntaxhighlighter .comments {
	color: rgb(0, 130, 0) !important;
}
.printing.syntaxhighlighter .comments a {
	color: rgb(0, 130, 0) !important;
}
.printing.syntaxhighlighter .string {
	color: blue !important;
}
.printing.syntaxhighlighter .string a {
	color: blue !important;
}
.printing.syntaxhighlighter .keyword {
	color: rgb(0, 102, 153) !important; font-weight: bold !important;
}
.printing.syntaxhighlighter .preprocessor {
	color: gray !important;
}
.printing.syntaxhighlighter .variable {
	color: rgb(170, 119, 0) !important;
}
.printing.syntaxhighlighter .value {
	color: rgb(0, 153, 0) !important;
}
.printing.syntaxhighlighter .functions {
	color: rgb(255, 20, 147) !important;
}
.printing.syntaxhighlighter .constants {
	color: rgb(0, 102, 204) !important;
}
.printing.syntaxhighlighter .script {
	font-weight: bold !important;
}
.printing.syntaxhighlighter .color1 {
	color: rgb(128, 128, 128) !important;
}
.printing.syntaxhighlighter .color1 a {
	color: rgb(128, 128, 128) !important;
}
.printing.syntaxhighlighter .color2 {
	color: rgb(255, 20, 147) !important;
}
.printing.syntaxhighlighter .color2 a {
	color: rgb(255, 20, 147) !important;
}
.printing.syntaxhighlighter .color3 {
	color: red !important;
}
.printing.syntaxhighlighter .color3 a {
	color: red !important;
}

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/shThemeRDark.css

.syntaxhighlighter {
	background-color: rgb(27, 36, 38) !important;
}
.syntaxhighlighter .line .number {
	color: rgb(185, 189, 182) !important;
}
.syntaxhighlighter .line .content {
	color: rgb(185, 189, 182) !important; border-left-color: rgb(67, 90, =
95) !important; border-left-width: 3px !important; border-left-style: =
solid !important;
}
.printing.syntaxhighlighter .line .content {
	border: 0px currentColor !important;
}
.syntaxhighlighter .alt1.line {
	background-color: rgb(27, 36, 38) !important;
}
.syntaxhighlighter .alt2.line {
	background-color: rgb(27, 36, 38) !important;
}
.syntaxhighlighter .highlighted.line .number {
	color: rgb(255, 255, 255) !important; background-color: rgb(67, 90, 95) =
!important;
}
.syntaxhighlighter .alt1.highlighted.line {
	background-color: rgb(67, 90, 95) !important;
}
.syntaxhighlighter .alt2.highlighted.line {
	background-color: rgb(67, 90, 95) !important;
}
.syntaxhighlighter .toolbar {
	background-color: rgb(27, 36, 38) !important;
}
.syntaxhighlighter .toolbar a {
	color: rgb(100, 103, 99) !important;
}
.syntaxhighlighter .toolbar a:hover {
	color: rgb(224, 232, 255) !important;
}
.syntaxhighlighter .plain {
	color: rgb(185, 189, 182) !important;
}
.syntaxhighlighter .plain a {
	color: rgb(185, 189, 182) !important;
}
.syntaxhighlighter .comments {
	color: rgb(135, 138, 133) !important;
}
.syntaxhighlighter .comments a {
	color: rgb(135, 138, 133) !important;
}
.syntaxhighlighter .string {
	color: rgb(92, 230, 56) !important;
}
.syntaxhighlighter .string a {
	color: rgb(92, 230, 56) !important;
}
.syntaxhighlighter .keyword {
	color: rgb(91, 161, 207) !important;
}
.syntaxhighlighter .preprocessor {
	color: rgb(67, 90, 95) !important;
}
.syntaxhighlighter .variable {
	color: rgb(255, 170, 62) !important;
}
.syntaxhighlighter .value {
	color: rgb(0, 153, 0) !important;
}
.syntaxhighlighter .functions {
	color: rgb(255, 170, 62) !important;
}
.syntaxhighlighter .constants {
	color: rgb(224, 232, 255) !important;
}
.syntaxhighlighter .script {
	background-color: rgb(67, 90, 95) !important;
}
.syntaxhighlighter .color1 {
	color: rgb(224, 232, 255) !important;
}
.syntaxhighlighter .color1 a {
	color: rgb(224, 232, 255) !important;
}
.syntaxhighlighter .color2 {
	color: rgb(255, 255, 255) !important;
}
.syntaxhighlighter .color2 a {
	color: rgb(255, 255, 255) !important;
}
.syntaxhighlighter .color3 {
	color: rgb(255, 170, 62) !important;
}
.syntaxhighlighter .color3 a {
	color: rgb(255, 170, 62) !important;
}

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/ga.js

(function(){var g=3Dvoid =
0,h=3Dnull,aa=3DencodeURIComponent,ba=3DdecodeURIComponent,i=3DMath;funct=
ion ca(a,b){return a.name=3Db}var =
j=3D"push",da=3D"replace",ea=3D"load",m=3D"charAt",fa=3D"value",n=3D"inde=
xOf",ga=3D"match",ia=3D"name",ja=3D"host",p=3D"toString",r=3D"length",s=3D=
"prototype",t=3D"split",u=3D"stopPropagation",ka=3D"scope",v=3D"location"=
,w=3D"getString",x=3D"substring",la=3D"navigator",y=3D"join",A=3D"toLower=
Case",B;function ma(a,b){switch(b){case 0:return""+a;case 1:return =
a*1;case 2:return!!a;case 3:return a*1E3}return a}function C(a){return =
g=3D=3Da||"-"=3D=3Da||""=3D=3Da}function =
na(a){if(!a||""=3D=3Da)return"";for(;a&&" =
\n\r\t"[n](a[m](0))>-1;)a=3Da[x](1);for(;a&&" =
\n\r\t"[n](a[m](a[r]-1))>-1;)a=3Da[x](0,a[r]-1);return a}function =
D(a){var =
b=3D1,c=3D0,d;if(!C(a)){b=3D0;for(d=3Da[r]-1;d>=3D0;d--)c=3Da.charCodeAt(=
d),b=3D(b<<6&268435455)+c+(c<<14),c=3Db&266338304,b=3Dc!=3D0?b^c>>21:b}re=
turn b}function oa(){return i.round(i.random()*2147483647)}=0A=
function pa(){}function E(a,b){return aa instanceof =
Function?b?encodeURI(a):aa(a):(F(68),escape(a))}function =
G(a){a=3Da[t]("+")[y](" ");if(ba instanceof Function)try{return =
ba(a)}catch(b){F(17)}else F(68);return unescape(a)}var =
qa=3Dfunction(a,b,c,d){a.addEventListener?a.addEventListener(b,c,!!d):a.a=
ttachEvent&&a.attachEvent("on"+b,c)},ra=3Dfunction(a,b,c,d){a.removeEvent=
Listener?a.removeEventListener(b,c,!!d):a.detachEvent&&a.detachEvent("on"=
+b,c)};function H(a){return a&&a[r]>0?a[0]:""}=0A=
function sa(a){var b=3Da?a[r]:0;return b>0?a[b-1]:""}var =
ta=3Dfunction(){this.prefix=3D"ga.";this.F=3D{}};ta[s].set=3Dfunction(a,b=
){this.F[this.prefix+a]=3Db};ta[s].get=3Dfunction(a){return =
this.F[this.prefix+a]};ta[s].contains=3Dfunction(a){return =
this.get(a)!=3D=3Dg};function =
ua(a){a[n]("www.")=3D=3D0&&(a=3Da[x](4));return a[A]()}function =
va(a,b){var c,d=3D{url:a,protocol:"http",host:"",path:"",c:new =
ta,anchor:""};if(!a)return =
d;c=3Da[n]("://");if(c>=3D0)d.protocol=3Da[x](0,c),a=3Da[x](c+3);c=3Da.se=
arch("/|\\?|#");if(c>=3D0)d.host=3Da[x](0,c)[A](),a=3Da[x](c);else =
return =
d.host=3Da[A](),d;c=3Da[n]("#");if(c>=3D0)d.anchor=3Da[x](c+1),a=3Da[x](0=
,c);c=3Da[n]("?");c>=3D0&&(wa(d.c,a[x](c+1)),a=3Da[x](0,c));d.anchor&&b&&=
wa(d.c,d.anchor);a&&a[m](0)=3D=3D"/"&&(a=3Da[x](1));d.path=3Da;return d}=0A=
function wa(a,b){function =
c(b,c){a.contains(b)||a.set(b,[]);a.get(b)[j](c)}for(var =
d=3Dna(b)[t]("&"),e=3D0;e<d[r];e++)if(d[e]){var =
f=3Dd[e][n]("=3D");f<0?c(d[e],"1"):c(d[e][x](0,f),d[e][x](f+1))}}function=
 =
xa(a,b){if(C(a))return"-";if("["=3D=3Da[m](0)&&"]"=3D=3Da[m](a[r]-1))retu=
rn"-";var c=3DI.domain;c+=3Db&&b!=3D"/"?b:"";return =
a[n](c)=3D=3D(a[n]("http://")=3D=3D0?7:a[n]("https://")=3D=3D0?8:0)?"0":a=
};var ya=3D0;function J(a){return(a?"_":"")+ya++}=0A=
var =
za=3DJ(),Aa=3DJ(),Ba=3DJ(),Ca=3DJ(),Da=3DJ(),K=3DJ(),L=3DJ(),Ea=3DJ(),Fa=3D=
J(),Ga=3DJ(),Ha=3DJ(),Ia=3DJ(),Ja=3DJ(),Ka=3DJ(),La=3DJ(),Ma=3DJ(),Na=3DJ=
(),Oa=3DJ(),Pa=3DJ(),Qa=3DJ(),Ra=3DJ(),Sa=3DJ(),Ta=3DJ(),Ua=3DJ(),Va=3DJ(=
),Wa=3DJ(),Xa=3DJ(),Ya=3DJ(),Za=3DJ(),$a=3DJ(),ab=3DJ(),bb=3DJ(),cb=3DJ()=
,db=3DJ(),eb=3DJ(),M=3DJ(!0),fb=3DJ(),gb=3DJ(),hb=3DJ(),ib=3DJ(),jb=3DJ()=
,kb=3DJ(),lb=3DJ(),mb=3DJ(),nb=3DJ(),ob=3DJ(),N=3DJ(!0),pb=3DJ(!0),qb=3DJ=
(!0),rb=3DJ(!0),sb=3DJ(!0),ub=3DJ(!0),vb=3DJ(!0),wb=3DJ(!0),xb=3DJ(!0),yb=
=3DJ(!0),zb=3DJ(!0),O=3DJ(!0),Ab=3DJ(!0),Bb=3DJ(!0),Cb=3DJ(!0),Db=3DJ(!0)=
,Eb=3DJ(!0),Fb=3DJ(!0),Gb=3DJ(!0),Hb=3DJ(!0),=0A=
Ib=3DJ(!0),Jb=3DJ(!0),Kb=3DJ(!0),Lb=3DJ(!0),Mb=3DJ(!0),Nb=3DJ(),Ob=3DJ();=
J();var =
Pb=3DJ(),Qb=3DJ(),Rb=3DJ(),Sb=3DJ(),Tb=3DJ(),Ub=3DJ(),Xb=3DJ(),Yb=3DJ(),Z=
b=3DJ();J();var $b=3DJ(),ac=3DJ();var bc=3Dfunction(){function =
a(a,c,d){P(Q[s],a,c,d)}R("_getName",Ba,58);R("_getAccount",za,64);R("_vis=
itCode",N,54);R("_getClientInfo",Ka,53,1);R("_getDetectTitle",Na,56,1);R(=
"_getDetectFlash",La,65,1);R("_getLocalGifPath",Xa,57);R("_getServiceMode=
",Ya,59);S("_setClientInfo",Ka,66,2);S("_setAccount",za,3);S("_setNamespa=
ce",Aa,48);S("_setAllowLinker",Ha,11,2);S("_setDetectFlash",La,61,2);S("_=
setDetectTitle",Na,62,2);S("_setLocalGifPath",Xa,46,0);S("_setLocalServer=
Mode",Ya,92,g,0);S("_setRemoteServerMode",=0A=
Ya,63,g,1);S("_setLocalRemoteServerMode",Ya,47,g,2);S("_setSampleRate",Wa=
,45,1);S("_setCampaignTrack",Ma,36,2);S("_setAllowAnchor",Ia,7,2);S("_set=
CampNameKey",Pa,41);S("_setCampContentKey",Ua,38);S("_setCampIdKey",Oa,39=
);S("_setCampMediumKey",Sa,40);S("_setCampNOKey",Va,42);S("_setCampSource=
Key",Ra,43);S("_setCampTermKey",Ta,44);S("_setCampCIdKey",Qa,37);S("_setC=
ookiePath",L,9,0);S("_setMaxCustomVariables",Za,0,1);S("_setVisitorCookie=
Timeout",Ea,28,1);S("_setSessionCookieTimeout",Fa,26,1);S("_setCampaignCo=
okieTimeout",=0A=
Ga,29,1);S("_setReferrerOverride",hb,49);a("_trackPageview",Q[s].ka,1);a(=
"_trackEvent",Q[s].t,4);a("_trackSocial",Q[s].la,104);a("_trackPageLoadTi=
me",Q[s].ja,100);a("_trackTrans",Q[s].ma,18);a("_sendXEvent",Q[s].s,78);a=
("_createEventTracker",Q[s].S,74);a("_getVersion",Q[s].X,60);a("_setDomai=
nName",Q[s].r,6);a("_setAllowHash",Q[s].ba,8);a("_getLinkerUrl",Q[s].W,52=
);a("_link",Q[s].link,101);a("_linkByPost",Q[s].aa,102);a("_setTrans",Q[s=
].ea,20);a("_addTrans",Q[s].L,21);a("_addItem",Q[s].J,19);a("_setTransact=
ionDelim",=0A=
Q[s].fa,82);a("_setCustomVar",Q[s].ca,10);a("_deleteCustomVar",Q[s].U,35)=
;a("_getVisitorCustomVar",Q[s].Y,50);a("_setXKey",Q[s].ha,83);a("_setXVal=
ue",Q[s].ia,84);a("_getXKey",Q[s].Z,76);a("_getXValue",Q[s].$,77);a("_cle=
arXKey",Q[s].P,72);a("_clearXValue",Q[s].Q,73);a("_createXObj",Q[s].T,75)=
;a("_addIgnoredOrganic",Q[s].H,15);a("_clearIgnoredOrganic",Q[s].M,97);a(=
"_addIgnoredRef",Q[s].I,31);a("_clearIgnoredRef",Q[s].N,32);a("_addOrgani=
c",Q[s].K,14);a("_clearOrganic",Q[s].O,70);a("_cookiePathCopy",=0A=
Q[s].R,30);a("_get",Q[s].V,106);a("_set",Q[s].da,107);a("_addEventListene=
r",Q[s].addEventListener,108);a("_removeEventListener",Q[s].removeEventLi=
stener,109);a("_initData",Q[s].l,2);a("_setVar",Q[s].ga,22);S("_setSessio=
nTimeout",Fa,27,3);S("_setCookieTimeout",Ga,25,3);S("_setCookiePersistenc=
e",Ea,24,1);a("_setAutoTrackOutbound",pa,79);a("_setTrackOutboundSubdomai=
ns",pa,81);a("_setHrefExamineLimit",pa,80)},P=3Dfunction(a,b,c,d){a[b]=3D=
function(){F(d);return =
c.apply(this,arguments)}},R=3Dfunction(a,b,c,d){Q[s][a]=3D=0A=
function(){F(c);return =
ma(this.a.get(b),d)}},S=3Dfunction(a,b,c,d,e){Q[s][a]=3Dfunction(a){F(c);=
e=3D=3Dg?this.a.set(b,ma(a,d)):this.a.set(b,e)}},cc=3Dfunction(a,b){retur=
n{type:b,target:a,stopPropagation:function(){throw"aborted";}}};var =
dc=3Dfunction(a,b){return =
b!=3D=3D"/"?!1:(a[n]("www.google.")=3D=3D0||a[n](".google.")=3D=3D0||a[n]=
("google.")=3D=3D0)&&!(a[n]("google.org")>-1)?!0:!1},ec=3Dfunction(a){var=
 b=3Da.get(Da),c=3Da[w](L,"/");dc(b,c)&&a[u]()};var ic=3Dfunction(){var =
a=3D{},b=3D{},c=3Dnew fc;this.g=3Dfunction(a,b){c.add(a,b)};var d=3Dnew =
fc;this.d=3Dfunction(a,b){d.add(a,b)};var =
e=3D!1,f=3D!1,k=3D!0;this.G=3Dfunction(){e=3D!0};this.f=3Dfunction(a){thi=
s[ea]();this.set(Nb,a,!0);e=3D!1;d.execute(this);e=3D!0;b=3D{};this.i()};=
this.load=3Dfunction(){e&&(e=3D!1,this.na(),gc(this),f||(f=3D!0,c.execute=
(this),hc(this),gc(this)),e=3D!0)};this.i=3Dfunction(){if(e)if(f)e=3D!1,h=
c(this),e=3D!0;else =
this[ea]()};this.get=3Dfunction(c){c&&c[m](0)=3D=3D"_"&&this[ea]();return=
 b[c]!=3D=3Dg?b[c]:a[c]};this.set=3D=0A=
function(c,d,e){c&&c[m](0)=3D=3D"_"&&this[ea]();e?b[c]=3Dd:a[c]=3Dd;c&&c[=
m](0)=3D=3D"_"&&this.i()};this.m=3Dfunction(b){a[b]=3Dthis.b(b,0)+1};this=
.b=3Dfunction(a,b){var c=3Dthis.get(a);return =
c=3D=3Dg||c=3D=3D=3D""?b:c*1};this.getString=3Dfunction(a,b){var =
c=3Dthis.get(a);return c=3D=3Dg?b:c+""};this.na=3Dfunction(){if(k){var =
b=3Dthis[w](Da,""),c=3Dthis[w](L,"/");dc(b,c)||(a[K]=3Da[Ja]&&b!=3D""?D(b=
):1,k=3D!1)}}};ic[s].stopPropagation=3Dfunction(){throw"aborted";};functi=
on jc(a,b){for(var b=3Db||[],c=3D0;c<b[r];c++){var =
d=3Db[c];if(""+a=3D=3Dd||d[n](a+".")=3D=3D0)return d}return"-"}=0A=
var =
lc=3Dfunction(a,b,c){c=3Dc?"":a[w](K,"1");b=3Db[t](".");if(b[r]!=3D=3D6||=
kc(b[0],c))return!1;var =
c=3Db[1]*1,d=3Db[2]*1,e=3Db[3]*1,f=3Db[4]*1,b=3Db[5]*1;if(!(c>=3D0&&d>0&&=
e>0&&f>0&&b>=3D0))return =
F(110),!1;a.set(N,c);a.set(sb,d);a.set(ub,e);a.set(vb,f);a.set(wb,b);retu=
rn!0},mc=3Dfunction(a){var =
b=3Da.get(N),c=3Da.get(sb),d=3Da.get(ub),e=3Da.get(vb),f=3Da.b(wb,1);b=3D=
=3Dg?F(113):b=3D=3DNaN&&F(114);b>=3D0&&c>0&&d>0&&e>0&&f>=3D0||F(115);retu=
rn[a.b(K,1),b!=3Dg?b:"-",c||"-",d||"-",e||"-",f][y](".")},nc=3Dfunction(a=
){return[a.b(K,1),a.b(zb,0),a.b(O,1),=0A=
a.b(Ab,0)][y](".")},oc=3Dfunction(a,b,c){var =
c=3Dc?"":a[w](K,"1"),d=3Db[t](".");if(d[r]!=3D=3D4||kc(d[0],c))d=3Dh;a.se=
t(zb,d?d[1]*1:0);a.set(O,d?d[2]*1:10);a.set(Ab,d?d[3]*1:a.get(Ca));return=
 d!=3Dh||!kc(b,c)},pc=3Dfunction(a,b){var =
c=3DE(a[w](qb,"")),d=3D[],e=3Da.get(M);if(!b&&e){for(var =
f=3D0;f<e[r];f++){var =
k=3De[f];k&&k[ka]=3D=3D1&&d[j](f+"=3D"+E(k[ia])+"=3D"+E(k[fa])+"=3D1")}d[=
r]>0&&(c+=3D"|"+d[y](","))}return =
c?a.b(K,1)+"."+c:h},qc=3Dfunction(a,b,c){c=3Dc?"":a[w](K,"1");b=3Db[t](".=
");if(b[r]<2||kc(b[0],c))return!1;b=3Db.slice(1)[y](".")[t]("|");=0A=
b[r]>0&&a.set(qb,G(b[0]));if(b[r]<=3D1)return!0;for(var =
c=3Db[1][t](b[1][n](",")=3D=3D-1?"^":","),d=3D0;d<c[r];d++){var =
e=3Dc[d][t]("=3D");if(e[r]=3D=3D4){var =
f=3D{};ca(f,G(e[1]));f.value=3DG(e[2]);f.scope=3D1;a.get(M)[e[0]]=3Df}}b[=
1][n]("^")>=3D0&&F(125);return!0},sc=3Dfunction(a,b){var =
c=3Drc(a,b);return =
c?[a.b(K,1),a.b(Bb,0),a.b(Cb,1),a.b(Db,1),c][y]("."):""},rc=3Dfunction(a)=
{function b(b,e){if(!C(a.get(b))){var f=3Da[w](b,""),f=3Df[t](" =
")[y]("%20"),f=3Df[t]("+")[y]("%20");c[j](e+"=3D"+f)}}var =
c=3D[];b(Fb,"utmcid");b(Jb,"utmcsr");b(Hb,=0A=
"utmgclid");b(Ib,"utmdclid");b(Gb,"utmccn");b(Kb,"utmcmd");b(Lb,"utmctr")=
;b(Mb,"utmcct");return =
c[y]("|")},uc=3Dfunction(a,b,c){c=3Dc?"":a[w](K,"1");b=3Db[t](".");if(b[r=
]<5||kc(b[0],c))return =
a.set(Bb,g),a.set(Cb,g),a.set(Db,g),a.set(Fb,g),a.set(Gb,g),a.set(Jb,g),a=
.set(Kb,g),a.set(Lb,g),a.set(Mb,g),a.set(Hb,g),a.set(Ib,g),!1;a.set(Bb,b[=
1]*1);a.set(Cb,b[2]*1);a.set(Db,b[3]*1);tc(a,b.slice(4)[y]("."));return!0=
},tc=3Dfunction(a,b){function =
c(a){return(a=3Db[ga](a+"=3D(.*?)(?:\\|utm|$)"))&&a[r]=3D=3D2?a[1]:g}func=
tion d(b,=0A=
c){c&&(c=3De?G(c):c[t]("%20")[y](" =
"),a.set(b,c))}b[n]("=3D")=3D=3D-1&&(b=3DG(b));var =
e=3Dc("utmcvr")=3D=3D"2";d(Fb,c("utmcid"));d(Gb,c("utmccn"));d(Jb,c("utmc=
sr"));d(Kb,c("utmcmd"));d(Lb,c("utmctr"));d(Mb,c("utmcct"));d(Hb,c("utmgc=
lid"));d(Ib,c("utmdclid"))},kc=3Dfunction(a,b){return =
b?a!=3Db:!/^\d+$/.test(a)};var =
fc=3Dfunction(){this.q=3D[]};fc[s].add=3Dfunction(a,b){this.q[j]({name:a,=
ua:b})};fc[s].execute=3Dfunction(a){try{for(var =
b=3D0;b<this.q[r];b++)this.q[b].ua.call(T,a)}catch(c){}};function =
vc(a){a.get(Wa)!=3D100&&a.get(N)%1E4>=3Da.get(Wa)*100&&a[u]()}function =
wc(a){xc()&&a[u]()}function =
yc(a){I[v].protocol=3D=3D"file:"&&a[u]()}function =
zc(a){a.get(gb)||a.set(gb,I.title,!0);a.get(fb)||a.set(fb,I[v].pathname+I=
[v].search,!0)};var Ac=3Dnew function(){var =
a=3D[];this.set=3Dfunction(b){a[b]=3D!0};this.va=3Dfunction(){for(var =
b=3D[],c=3D0;c<a[r];c++)a[c]&&(b[i.floor(c/6)]^=3D1<<c%6);for(c=3D0;c<b[r=
];c++)b[c]=3D"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456=
789-_"[m](b[c]||0);return b[y]("")+"~"}};function F(a){Ac.set(a)};var =
T=3Dwindow,I=3Ddocument,xc=3Dfunction(){var a=3DT._gaUserPrefs;return =
a&&a.ioo&&a.ioo()},Bc=3Dfunction(a,b){setTimeout(a,b)},U=3Dfunction(a){fo=
r(var =
b=3D[],c=3DI.cookie[t](";"),a=3DRegExp("^\\s*"+a+"=3D\\s*(.*?)\\s*$"),d=3D=
0;d<c[r];d++){var e=3Dc[d][ga](a);e&&b[j](e[1])}return =
b},V=3Dfunction(a,b,c,d,e){var =
f;f=3Dxc()?!1:dc(d,c)?!1:!0;if(f){if(b&&T[la].userAgent[n]("Firefox")>=3D=
0){b=3Db[da](/\n|\r/g," ");f=3D0;for(var k=3Db[r];f<k;++f){var =
o=3Db.charCodeAt(f)&255;if(o=3D=3D10||o=3D=3D13)b=3Db[x](0,f)+"?"+b[x](f+=
1)}}b&&b[r]>2E3&&(b=3Db[x](0,=0A=
2E3),F(69));a=3Da+"=3D"+b+"; path=3D"+c+"; ";e&&(a+=3D"expires=3D"+(new =
Date((new Date).getTime()+e)).toGMTString()+"; =
");d&&(a+=3D"domain=3D"+d+";");I.cookie=3Da}};var =
Cc,Dc,Ec=3Dfunction(){if(!Cc){var =
a=3D{},b=3DT[la],c=3DT.screen;a.C=3Dc?c.width+"x"+c.height:"-";a.B=3Dc?c.=
colorDepth+"-bit":"-";a.language=3D(b&&(b.language||b.browserLanguage)||"=
-")[A]();a.javaEnabled=3Db&&b.javaEnabled()?1:0;a.characterSet=3DI.charac=
terSet||I.charset||"-";Cc=3Da}},Fc=3Dfunction(){Ec();for(var =
a=3DCc,b=3DT[la],a=3Db.appName+b.version+a.language+b.platform+b.userAgen=
t+a.javaEnabled+a.C+a.B+(I.cookie?I.cookie:"")+(I.referrer?I.referrer:"")=
,b=3Da[r],c=3DT.history[r];c>0;)a+=3Dc--^b++;return =
D(a)},Gc=3Dfunction(a){Ec();=0A=
var =
b=3DCc;a.set(jb,b.C);a.set(kb,b.B);a.set(nb,b.language);a.set(ob,b.charac=
terSet);a.set(lb,b.javaEnabled);if(a.get(Ka)&&a.get(La)){if(!(b=3DDc)){va=
r =
c,d,e;d=3D"ShockwaveFlash";if((b=3D(b=3DT[la])?b.plugins:g)&&b[r]>0)for(c=
=3D0;c<b[r]&&!e;c++)d=3Db[c],d[ia][n]("Shockwave =
Flash")>-1&&(e=3Dd.description[t]("Shockwave Flash =
")[1]);else{d=3Dd+"."+d;try{c=3Dnew =
ActiveXObject(d+".7"),e=3Dc.GetVariable("$version")}catch(f){}if(!e)try{c=
=3Dnew ActiveXObject(d+".6"),e=3D"WIN =
6,0,21,0",c.AllowScriptAccess=3D"always",e=3Dc.GetVariable("$version")}ca=
tch(k){}if(!e)try{c=3D=0A=
new =
ActiveXObject(d),e=3Dc.GetVariable("$version")}catch(o){}e&&(e=3De[t](" =
")[1][t](","),e=3De[0]+"."+e[1]+" =
r"+e[2])}b=3De?e:"-"}Dc=3Db;a.set(mb,Dc)}else a.set(mb,"-")};var =
W=3Dfunction(){P(W[s],"push",W[s][j],5);P(W[s],"_createAsyncTracker",W[s]=
.wa,33);P(W[s],"_getAsyncTracker",W[s].xa,34)};W[s].wa=3Dfunction(a,b){re=
turn Z.k(a,b||"")};W[s].xa=3Dfunction(a){return =
Z.p(a)};W[s].push=3Dfunction(a){for(var =
b=3Darguments,c=3D0,d=3D0;d<b[r];d++)try{if(typeof =
b[d]=3D=3D=3D"function")b[d]();else{var =
e=3D"",f=3Db[d][0],k=3Df.lastIndexOf(".");k>0&&(e=3Df[x](0,k),f=3Df[x](k+=
1));var =
o=3De=3D=3D"_gat"?Z:e=3D=3D"_gaq"?Hc:Z.p(e);o[f].apply(o,b[d].slice(1))}}=
catch(l){c++}return c};var Kc=3Dfunction(){function =
a(a,b,c,d){g=3D=3Df[a]&&(f[a]=3D{});g=3D=3Df[a][b]&&(f[a][b]=3D[]);f[a][b=
][c]=3Dd}function b(a,b,c){if(g!=3Df[a]&&g!=3Df[a][b])return =
f[a][b][c]}function c(a,b){if(g!=3Df[a]&&g!=3Df[a][b]){f[a][b]=3Dg;var =
c=3D!0,d;for(d=3D0;d<k[r];d++)if(g!=3Df[a][k[d]]){c=3D!1;break}c&&(f[a]=3D=
g)}}function d(a){var =
b=3D"",c=3D!1,d,e;for(d=3D0;d<k[r];d++)if(e=3Da[k[d]],g!=3De){c&&(b+=3Dk[=
d]);for(var =
c=3D[],f=3Dg,X=3Dg,X=3D0;X<e[r];X++)if(g!=3De[X]){f=3D"";X!=3DY&&g=3D=3De=
[X-1]&&(f+=3DX[p]()+ha);for(var =
Mc=3De[X],Nc=3D"",tb=3Dg,Vb=3Dg,Wb=3Dg,tb=3D0;tb<Mc[r];tb++)Vb=3D=0A=
Mc[m](tb),Wb=3Dz[Vb],Nc+=3Dg!=3DWb?Wb:Vb;f+=3DNc;c[j](f)}b+=3Do+c[y](q)+l=
;c=3D!1}else c=3D!0;return b}var =
e=3Dthis,f=3D[],k=3D["k","v"],o=3D"(",l=3D")",q=3D"*",ha=3D"!",z=3D{"'":"=
'0"};z[l]=3D"'1";z[q]=3D"'2";z[ha]=3D"'3";var =
Y=3D1;e.qa=3Dfunction(a){return g!=3Df[a]};e.n=3Dfunction(){for(var =
a=3D"",b=3D0;b<f[r];b++)g!=3Df[b]&&(a+=3Db[p]()+d(f[b]));return =
a};e.pa=3Dfunction(a){if(a=3D=3Dg)return e.n();for(var =
b=3Da.n(),c=3D0;c<f[r];c++)g!=3Df[c]&&!a.qa(c)&&(b+=3Dc[p]()+d(f[c]));ret=
urn =
b};e.e=3Dfunction(b,c,d){if(!Ic(d))return!1;a(b,"k",c,d);return!0};e.j=3D=
function(b,=0A=
c,d){if(!Jc(d))return!1;a(b,"v",c,d[p]());return!0};e.w=3Dfunction(a,c){r=
eturn b(a,"k",c)};e.z=3Dfunction(a,c){return =
b(a,"v",c)};e.u=3Dfunction(a){c(a,"k")};e.v=3Dfunction(a){c(a,"v")};P(e,"=
_setKey",e.e,89);P(e,"_setValue",e.j,90);P(e,"_getKey",e.w,87);P(e,"_getV=
alue",e.z,88);P(e,"_clearKey",e.u,85);P(e,"_clearValue",e.v,86)};function=
 Ic(a){return typeof a=3D=3D"string"}function Jc(a){return typeof =
a!=3D"number"&&(g=3D=3DNumber||!(a instanceof =
Number))||i.round(a)!=3Da||a=3D=3DNaN||a=3D=3DInfinity?!1:!0};var =
Lc=3Dfunction(a){var b=3DT.gaGlobal;a&&!b&&(T.gaGlobal=3Db=3D{});return =
b},Oc=3Dfunction(){var =
a=3DLc(!0).hid;if(a=3D=3Dh)a=3Doa(),Lc(!0).hid=3Da;return =
a},Pc=3Dfunction(a){a.set(ib,Oc());var =
b=3DLc();if(b&&b.dh=3D=3Da.get(K)){var =
c=3Db.sid;c&&(c=3D=3D"0"&&F(112),a.set(vb,c),a.get(pb)&&a.set(ub,c));b=3D=
b.vid;a.get(pb)&&b&&(b=3Db[t]("."),b[1]*1||F(112),a.set(N,b[0]*1),a.set(s=
b,b[1]*1))}};var Qc,Rc=3Dfunction(a,b,c){var =
d=3Da[w](Da,""),e=3Da[w](L,"/"),a=3Da.b(Ea,0);V(b,c,e,d,a)},hc=3Dfunction=
(a){var b=3Da[w](Da,"");a.b(K,1);var =
c=3Da[w](L,"/");V("__utma",mc(a),c,b,a.get(Ea));V("__utmb",nc(a),c,b,a.ge=
t(Fa));V("__utmc",""+a.b(K,1),c,b);var =
d=3Dsc(a,!0);d?V("__utmz",d,c,b,a.get(Ga)):V("__utmz","",c,b,-1);(d=3Dpc(=
a,!1))?V("__utmv",d,c,b,a.get(Ea)):V("__utmv","",c,b,-1)},gc=3Dfunction(a=
){var b=3Da.b(K,1);if(!lc(a,jc(b,U("__utma"))))return =
a.set(rb,!0),!1;var c=3D!oc(a,jc(b,U("__utmb")));a.set(yb,c);uc(a,jc(b,=0A=
U("__utmz")));qc(a,jc(b,U("__utmv")));Qc=3D!c;return!0},Sc=3Dfunction(a){=
!Qc&&!(U("__utmb")[r]>0)&&(V("__utmd","1",a[w](L,"/"),a[w](Da,""),1E4),U(=
"__utmd")[r]=3D=3D0&&a[u]())};var =
Vc=3Dfunction(a){a.get(N)=3D=3Dg?Tc(a):a.get(rb)&&!a.get($b)?Tc(a):a.get(=
yb)&&Uc(a)},Wc=3Dfunction(a){a.get(Eb)&&!a.get(xb)&&(Uc(a),a.set(Cb,a.get=
(wb)))},Tc=3Dfunction(a){var =
b=3Da.get(Ca);a.set(pb,!0);a.set(N,oa()^Fc(a)&2147483647);a.set(qb,"");a.=
set(sb,b);a.set(ub,b);a.set(vb,b);a.set(wb,1);a.set(xb,!0);a.set(zb,0);a.=
set(O,10);a.set(Ab,b);a.set(M,[]);a.set(rb,!1);a.set(yb,!1)},Uc=3Dfunctio=
n(a){a.set(ub,a.get(vb));a.set(vb,a.get(Ca));a.m(wb);a.set(xb,!0);a.set(z=
b,0);a.set(O,10);a.set(Ab,a.get(Ca));a.set(yb,=0A=
!1)};var =
Xc=3D"daum:q,eniro:search_word,naver:query,pchome:q,images.google:q,googl=
e:q,yahoo:p,yahoo:q,msn:q,bing:q,aol:query,aol:encquery,aol:q,lycos:query=
,ask:q,altavista:q,netscape:query,cnn:query,about:terms,mamma:q,alltheweb=
:q,voila:rdata,virgilio:qs,live:q,baidu:wd,alice:qs,yandex:text,najdi:q,m=
ama:query,seznam:q,search:q,wp:szukaj,onet:qt,szukacz:q,yam:k,kvasir:q,se=
sam:q,ozu:q,terra:query,mynet:q,ekolay:q,rambler:query".split(","),cd=3Df=
unction(a){if(a.get(Ma)&&!a.get($b)){for(var =
b=3D!C(a.get(Fb))||!C(a.get(Jb))||=0A=
!C(a.get(Hb))||!C(a.get(Ib)),c=3D{},d=3D0;d<Yc[r];d++){var =
e=3DYc[d];c[e]=3Da.get(e)}d=3Dva(I[v].href,a.get(Ia));if(!(sa(d.c.get(a.g=
et(Va)))=3D=3D"1"&&b)&&(!Zc(a,d)&&!$c(a)&&!b&&a.get(xb)&&a.get(xb)&&ad(a,=
g,"(direct)",g,g,"(direct)","(none)",g,g),a.set(Eb,bd(a,c)),b=3Da.get(Jb)=
=3D=3D"(direct)"&&a.get(Gb)=3D=3D"(direct)"&&a.get(Kb)=3D=3D"(none)",a.ge=
t(Eb)||a.get(xb)&&!b))a.set(Bb,a.get(Ca)),a.set(Cb,a.get(wb)),a.m(Db)}},Z=
c=3Dfunction(a,b){function c(c,d){var =
d=3Dd||"-",e=3Dsa(b.c.get(a.get(c)));return e&&e!=3D"-"?G(e):d}var =
d=3Dsa(b.c.get(a.get(Oa)))||=0A=
"-",e=3Dsa(b.c.get(a.get(Ra)))||"-",f=3Dsa(b.c.get(a.get(Qa)))||"-",k=3Ds=
a(b.c.get("dclid"))||"-",o=3Dc(Pa,"(not set)"),l=3Dc(Sa,"(not =
set)"),q=3Dc(Ta),ha=3Dc(Ua);if(C(d)&&C(f)&&C(k)&&C(e))return!1;if(C(q)){v=
ar =
z=3Dxa(a.get(hb),a.get(L)),z=3Dva(z,!0);(z=3Ddd(a,z))&&!C(z[1]&&!z[2])&&(=
q=3Dz[1])}ad(a,d,e,f,k,o,l,q,ha);return!0},$c=3Dfunction(a){var =
b=3Dxa(a.get(hb),a.get(L)),c=3Dva(b,!0);if(!(b!=3Dg&&b!=3Dh&&b!=3D""&&b!=3D=
"0"&&b!=3D"-"&&b[n]("://")>=3D0)||c&&c[ja][n]("google")>-1&&c.c.contains(=
"q")&&c.path=3D=3D"cse")return!1;if((b=3Ddd(a,c))&&=0A=
!b[2])return ad(a,g,b[0],g,g,"(organic)","organic",b[1],g),!0;else =
if(b)return!1;if(a.get(xb))a:{for(var =
b=3Da.get(bb),d=3Dua(c[ja]),e=3D0;e<b[r];++e)if(d[n](b[e])>-1){a=3D!1;bre=
ak a}ad(a,g,d,g,g,"(referral)","referral",g,"/"+c.path);a=3D!0}else =
a=3D!1;return a},dd=3Dfunction(a,b){for(var =
c=3Da.get($a),d=3D0;d<c[r];++d){var =
e=3Dc[d][t](":");if(b[ja][n](e[0][A]())>-1){var =
f=3DH(b.c.get(e[1]));if(f){a:{for(var =
c=3Df,d=3Da.get(ab),c=3DG(c)[A](),k=3D0;k<d[r];++k)if(c=3D=3Dd[k]){c=3D!0=
;break a}c=3D!1}return[e[0],f,c]}}}return h},ad=3Dfunction(a,=0A=
b,c,d,e,f,k,o,l){a.set(Fb,b);a.set(Jb,c);a.set(Hb,d);a.set(Ib,e);a.set(Gb=
,f);a.set(Kb,k);a.set(Lb,o);a.set(Mb,l)},Yc=3D[Gb,Fb,Hb,Ib,Jb,Kb,Lb,Mb],b=
d=3Dfunction(a,b){function c(a){a=3D(""+a)[t]("+")[y]("%20");return =
a=3Da[t](" ")[y]("%20")}for(var d=3D0;d<Yc[r];d++){var =
e=3DYc[d],f=3Db[e]||"-",e=3Da.get(e)||"-";if(c(f)!=3Dc(e))return!0}return=
!1};var =
fd=3Dfunction(a){ed(a,I[v].href)?(a.set($b,!0),F(12)):a.set($b,!1)},ed=3D=
function(a,b){if(!a.get(Ha))return!1;var =
c=3Dva(b,a.get(Ia)),d=3DH(c.c.get("__utma")),e=3DH(c.c.get("__utmb")),f=3D=
H(c.c.get("__utmc")),k=3DH(c.c.get("__utmx")),o=3DH(c.c.get("__utmz")),l=3D=
H(c.c.get("__utmv")),c=3DH(c.c.get("__utmk"));if(D(""+d+e+f+k+o+l)!=3Dc){=
d=3DG(d);e=3DG(e);f=3DG(f);k=3DG(k);a:{for(var =
f=3Dd+e+f+k,q=3D0;q<3;q++){for(var =
ha=3D0;ha<3;ha++){if(c=3D=3DD(f+o+l)){F(127);c=3D[o,l];break a}var =
z=3Do[da](/ /g,"%20"),Y=3Dl[da](/ /g,"%20");if(c=3D=3DD(f+z+Y)){F(128);=0A=
c=3D[z,Y];break =
a}z=3Dz[da](/\+/g,"%20");Y=3DY[da](/\+/g,"%20");if(c=3D=3DD(f+z+Y)){F(129=
);c=3D[z,Y];break =
a}o=3DG(o)}l=3DG(l)}c=3Dg}if(!c)return!1;o=3Dc[0];l=3Dc[1]}if(!lc(a,d,!0)=
)return!1;oc(a,e,!0);uc(a,o,!0);qc(a,l,!0);gd(a,k,!0);return!0},id=3Dfunc=
tion(a,b,c){var d;d=3Dmc(a)||"-";var =
e=3Dnc(a)||"-",f=3D""+a.b(K,1)||"-",k=3Dhd(a)||"-",o=3Dsc(a,!1)||"-",a=3D=
pc(a,!1)||"-",l=3DD(""+d+e+f+k+o+a),q=3D[];q[j]("__utma=3D"+d);q[j]("__ut=
mb=3D"+e);q[j]("__utmc=3D"+f);q[j]("__utmx=3D"+k);q[j]("__utmz=3D"+o);q[j=
]("__utmv=3D"+a);q[j]("__utmk=3D"+l);d=3Dq[y]("&");=0A=
if(!d)return b;e=3Db[n]("#");return =
c?e<0?b+"#"+d:b+"&"+d:(c=3D"",f=3Db[n]("?"),e>0&&(c=3Db[x](e),b=3Db[x](0,=
e)),f<0?b+"?"+d+c:b+"&"+d+c)};var =
jd=3D"|",ld=3Dfunction(a,b,c,d,e,f,k,o,l){var =
q=3Dkd(a,b);q||(q=3D{},a.get(cb)[j](q));q.id_=3Db;q.affiliation_=3Dc;q.to=
tal_=3Dd;q.tax_=3De;q.shipping_=3Df;q.city_=3Dk;q.state_=3Do;q.country_=3D=
l;q.items_=3Dq.items_||[];return q},md=3Dfunction(a,b,c,d,e,f,k){var =
a=3Dkd(a,b)||ld(a,b,"",0,0,0,"","",""),o;a:{if(a&&a.items_){o=3Da.items_;=
for(var l=3D0;l<o[r];l++)if(o[l].sku_=3D=3Dc){o=3Do[l];break =
a}}o=3Dh}l=3Do||{};l.transId_=3Db;l.sku_=3Dc;l.name_=3Dd;l.category_=3De;=
l.price_=3Df;l.quantity_=3Dk;o||a.items_[j](l);return =
l},kd=3Dfunction(a,b){for(var c=3D=0A=
a.get(cb),d=3D0;d<c[r];d++)if(c[d].id_=3D=3Db)return c[d];return h};var =
nd,od=3Dfunction(a){var f;var e;if(!nd){var b;b=3DI[v].hash;var =
c=3DT[ia],d=3D/^#?gaso=3D([^&]*)/;if(f=3D(e=3D(b=3Db&&b[ga](d)||c&&c[ga](=
d))?b[1]:H(U("GASO")),b=3De)&&b[ga](/^(?:\|([-0-9a-z.]{1,40})\|)?([-.\w]{=
10,1200})$/i),c=3Df)if(Rc(a,"GASO",""+b),Z._gasoDomain=3Da.get(Da),Z._gas=
oCPath=3Da.get(L),b=3D"https://"+((c[1]||"www")+".google.com")+"/analytic=
s/reporting/overlay_js?gaso=3D"+c[2]+"&"+oa())a=3DI.createElement("script=
"),a.type=3D"text/javascript",a.async=3D!0,a.src=3Db,a.id=3D"_gasojs",a.o=
nload=3Dg,b=3DI.getElementsByTagName("script")[0],=0A=
b.parentNode.insertBefore(a,b);nd=3D!0}};var =
gd=3Dfunction(a,b,c){c&&(b=3DG(b));c=3Da.b(K,1);b=3Db[t](".");!(b[r]<2)&&=
/^\d+$/.test(b[0])&&(b[0]=3D""+c,Rc(a,"__utmx",b[y](".")))},hd=3Dfunction=
(a,b){var c=3Djc(a.get(K),U("__utmx"));c=3D=3D"-"&&(c=3D"");return =
b?E(c):c};var =
sd=3Dfunction(a,b){if(a.b(N,0)%100>=3Da.b(Zb,0))return!1;var =
c=3Dpd();c=3D=3Dg&&(c=3Dqd());if(c=3D=3Dg||c=3D=3DInfinity||isNaN(c))retu=
rn!1;c>0?b(rd(c)):qa(T,"load",function(){sd(a,b)},!1);return!0},rd=3Dfunc=
tion(a){var b=3Dnew =
Kc,c=3Di.min(i.floor(a/100),5E3);b.e(14,1,c>0?c+"00":"0");b.j(14,1,a);ret=
urn b},pd=3Dfunction(){var =
a=3DT.performance||T.webkitPerformance;return(a=3Da&&a.timing)&&a.loadEve=
ntStart-a.fetchStart},qd=3Dfunction(){if(T.top=3D=3DT){var =
a=3DT.external,b=3Da&&a.onloadT;a&&!a.isValidLoadTime&&(b=3Dg);b>21474836=
48&&(b=3Dg);=0A=
b>0&&a.setPageReadyTime();return b}};var Q=3Dfunction(a,b,c){function =
d(a){return function(b){if((b=3Db.get(ac)[a])&&b[r])for(var =
c=3Dcc(e,a),d=3D0;d<b[r];d++)b[d].call(e,c)}}var e=3Dthis;this.a=3Dnew =
ic;this.get=3Dfunction(a){return =
this.a.get(a)};this.set=3Dfunction(a,b,c){this.a.set(a,b,c)};this.set(za,=
b||"UA-XXXXX-X");this.set(Ba,a||"");this.set(Aa,c||"");this.set(Ca,i.roun=
d((new =
Date).getTime()/1E3));this.set(L,"/");this.set(Ea,63072E6);this.set(Ga,15=
768E6);this.set(Fa,18E5);this.set(Ha,!1);this.set(Za,50);this.set(Ia,!1);=
this.set(Ja,!0);this.set(Ka,=0A=
!0);this.set(La,!0);this.set(Ma,!0);this.set(Na,!0);this.set(Pa,"utm_camp=
aign");this.set(Oa,"utm_id");this.set(Qa,"gclid");this.set(Ra,"utm_source=
");this.set(Sa,"utm_medium");this.set(Ta,"utm_term");this.set(Ua,"utm_con=
tent");this.set(Va,"utm_nooverride");this.set(Wa,100);this.set(Zb,10);thi=
s.set(Xa,"/__utm.gif");this.set(Ya,1);this.set(cb,[]);this.set(M,[]);this=
.set($a,Xc);this.set(ab,[]);this.set(bb,[]);this.r("auto");this.set(hb,I.=
referrer);this.set(ac,{hit:[],load:[]});this.a.g("0",fd);this.a.g("1",=0A=
Vc);this.a.g("2",cd);this.a.g("3",Wc);this.a.g("4",d("load"));this.a.g("5=
",od);this.a.d("A",wc);this.a.d("B",yc);this.a.d("C",Vc);this.a.d("D",vc)=
;this.a.d("E",ec);this.a.d("F",td);this.a.d("G",Sc);this.a.d("H",zc);this=
.a.d("I",Gc);this.a.d("J",Pc);this.a.d("K",d("hit"));this.a.d("L",ud);thi=
s.a.d("M",vd);this.get(Ca)=3D=3D=3D0&&F(111);this.a.G()};B=3DQ[s];B.h=3Df=
unction(){var a=3Dthis.get(db);a||(a=3Dnew Kc,this.set(db,a));return a};=0A=
B.oa=3Dfunction(a){for(var b in a){var =
c=3Da[b];a.hasOwnProperty(b)&&typeof =
c!=3D"function"&&this.set(b,c,!0)}};B.ka=3Dfunction(a){a&&a!=3Dg&&(a.cons=
tructor+"")[n]("String")>-1?(F(13),this.set(fb,a,!0)):typeof =
a=3D=3D=3D"object"&&a!=3D=3Dh&&this.oa(a);this.a.f("page")};B.t=3Dfunctio=
n(a,b,c,d,e){if(a=3D=3D""||!Ic(a)||b=3D=3D""||!Ic(b))return!1;if(c!=3Dg&&=
!Ic(c))return!1;if(d!=3Dg&&!Jc(d))return!1;this.set(Qb,a,!0);this.set(Rb,=
b,!0);this.set(Sb,c,!0);this.set(Tb,d,!0);this.set(Pb,!!e,!0);this.a.f("e=
vent");return!0};=0A=
B.la=3Dfunction(a,b,c,d){if(!a||!b)return!1;this.set(Ub,a[x](0,15),!0);th=
is.set(Xb,b[x](0,15),!0);this.set(Yb,c||I[v].href,!0);d&&this.set(fb,d,!0=
);this.a.f("social");return!0};B.ja=3Dfunction(){var a=3Dthis;return =
sd(this.a,function(b){a.s(b)})};B.ma=3Dfunction(){this.a.f("trans")};B.s=3D=
function(a){this.set(eb,a,!0);this.a.f("event")};B.S=3Dfunction(a){this.l=
();var =
b=3Dthis;return{_trackEvent:function(c,d,e){F(91);b.t(a,c,d,e)}}};B.V=3Df=
unction(a){return this.get(a)};=0A=
B.da=3Dfunction(a,b){if(a)if(a!=3Dg&&(a.constructor+"")[n]("String")>-1)t=
his.set(a,b);else if(typeof a=3D=3D"object")for(var c in =
a)a.hasOwnProperty(c)&&this.set(c,a[c])};B.addEventListener=3Dfunction(a,=
b){var =
c=3Dthis.get(ac)[a];c&&c[j](b)};B.removeEventListener=3Dfunction(a,b){for=
(var =
c=3Dthis.get(ac)[a],d=3D0;c&&d<c[r];d++)if(c[d]=3D=3Db){c.splice(d,1);bre=
ak}};B.X=3Dfunction(){return"5.1.5"};B.r=3Dfunction(a){this.get(Ja);a=3Da=
=3D=3D"auto"?ua(I.domain):!a||a=3D=3D"-"||a=3D=3D"none"?"":a[A]();this.se=
t(Da,a)};=0A=
B.ba=3Dfunction(a){this.set(Ja,!!a)};B.W=3Dfunction(a,b){return =
id(this.a,a,b)};B.link=3Dfunction(a,b){if(this.a.get(Ha)&&a){var =
c=3Did(this.a,a,b);I[v].href=3Dc}};B.aa=3Dfunction(a,b){this.a.get(Ha)&&a=
&&a.action&&(a.action=3Did(this.a,a.action,b))};=0A=
B.ea=3Dfunction(){this.l();var =
a=3Dthis.a,b=3DI.getElementById?I.getElementById("utmtrans"):I.utmform&&I=
.utmform.utmtrans?I.utmform.utmtrans:h;if(b&&b[fa]){a.set(cb,[]);for(var =
b=3Db[fa][t]("UTM:"),c=3D0;c<b[r];c++){b[c]=3Dna(b[c]);for(var =
d=3Db[c][t](jd),e=3D0;e<d[r];e++)d[e]=3Dna(d[e]);"T"=3D=3Dd[0]?ld(a,d[1],=
d[2],d[3],d[4],d[5],d[6],d[7],d[8]):"I"=3D=3Dd[0]&&md(a,d[1],d[2],d[3],d[=
4],d[5],d[6])}}};B.L=3Dfunction(a,b,c,d,e,f,k,o){return =
ld(this.a,a,b,c,d,e,f,k,o)};B.J=3Dfunction(a,b,c,d,e,f){return =
md(this.a,a,b,c,d,e,f)};=0A=
B.fa=3Dfunction(a){jd=3Da||"|"};B.ca=3Dfunction(a,b,c,d){var =
e=3Dthis.a;if(a<=3D0||a>e.get(Za))a=3D!1;else =
if(!b||!c||E(b)[r]+E(c)[r]>64)a=3D!1;else{d!=3D1&&d!=3D2&&(d=3D3);var =
f=3D{};ca(f,b);f.value=3Dc;f.scope=3Dd;e.get(M)[a]=3Df;a=3D!0}a&&this.a.i=
();return =
a};B.U=3Dfunction(a){this.a.get(M)[a]=3Dg;this.a.i()};B.Y=3Dfunction(a){r=
eturn(a=3Dthis.a.get(M)[a])&&a[ka]=3D=3D1?a[fa]:g};B.ha=3Dfunction(a,b,c)=
{this.h().e(a,b,c)};B.ia=3Dfunction(a,b,c){this.h().j(a,b,c)};B.Z=3Dfunct=
ion(a,b){return this.h().w(a,b)};=0A=
B.$=3Dfunction(a,b){return =
this.h().z(a,b)};B.P=3Dfunction(a){this.h().u(a)};B.Q=3Dfunction(a){this.=
h().v(a)};B.T=3Dfunction(){return new =
Kc};B.H=3Dfunction(a){a&&this.get(ab)[j](a[A]())};B.M=3Dfunction(){this.s=
et(ab,[])};B.I=3Dfunction(a){a&&this.get(bb)[j](a[A]())};B.N=3Dfunction()=
{this.set(bb,[])};B.K=3Dfunction(a,b,c){if(a&&b){var =
d=3Dthis.get($a);d.splice(c?0:d[r],0,a+":"+b[A]())}};B.O=3Dfunction(){thi=
s.set($a,[])};=0A=
B.R=3Dfunction(a){this.a[ea]();var =
b=3Dthis.get(L),c=3Dhd(this.a);this.set(L,a);this.a.i();gd(this.a,c);this=
.set(L,b)};B.l=3Dfunction(){this.a[ea]()};B.ga=3Dfunction(a){a&&a!=3D""&&=
(this.set(qb,a),this.a.f("var"))};var =
td=3Dfunction(a){a.get(Nb)!=3D=3D"trans"&&a.b(zb,0)>=3D500&&a[u]();if(a.g=
et(Nb)=3D=3D=3D"event"){var b=3D(new =
Date).getTime(),c=3Da.b(Ab,0),d=3Da.b(vb,0),c=3Di.floor(0.2*((b-(c!=3Dd?c=
:c*1E3))/1E3));c>0&&(a.set(Ab,b),a.set(O,i.min(10,a.b(O,0)+c)));a.b(O,0)<=
=3D0&&a[u]()}},vd=3Dfunction(a){a.get(Nb)=3D=3D=3D"event"&&a.set(O,i.max(=
0,a.b(O,10)-1))};var wd=3Dfunction(){var =
a=3D[];this.add=3Dfunction(b,c,d){d&&(c=3DE(""+c));a[j](b+"=3D"+c)};this.=
toString=3Dfunction(){return =
a[y]("&")}},xd=3Dfunction(a,b){(b||a.get(Ya)!=3D2)&&a.m(zb)},yd=3Dfunctio=
n(a,b){b.add("utmwv","5.1.5");b.add("utms",a.get(zb));b.add("utmn",oa());=
var =
c=3DI[v].hostname;C(c)||b.add("utmhn",c,!0);c=3Da.get(Wa);c!=3D100&&b.add=
("utmsp",c,!0)},Ad=3Dfunction(a,b){b.add("utmac",a.get(za));a.get(Pb)&&b.=
add("utmni",1);zd(a,b);Z.o&&b.add("aip",1);b.add("utmu",Ac.va())},zd=3Dfu=
nction(a,b){function c(a,b){b&&d[j](a+=0A=
"=3D"+b+";")}var =
d=3D[];c("__utma",mc(a));c("__utmz",sc(a,!1));c("__utmv",pc(a,!0));c("__u=
tmx",hd(a));b.add("utmcc",d[y]("+"),!0)},Bd=3Dfunction(a,b){a.get(Ka)&&(b=
.add("utmcs",a.get(ob),!0),b.add("utmsr",a.get(jb)),b.add("utmsc",a.get(k=
b)),b.add("utmul",a.get(nb)),b.add("utmje",a.get(lb)),b.add("utmfl",a.get=
(mb),!0))},Cd=3Dfunction(a,b){a.get(Na)&&a.get(gb)&&b.add("utmdt",a.get(g=
b),!0);b.add("utmhid",a.get(ib));b.add("utmr",xa(a.get(hb),a.get(L)),!0);=
b.add("utmp",E(a.get(fb),!0),!0)},Dd=3Dfunction(a,b){for(var c=3D=0A=
a.get(db),d=3Da.get(eb),e=3Da.get(M)||[],f=3D0;f<e[r];f++){var =
k=3De[f];k&&(c||(c=3Dnew =
Kc),c.e(8,f,k[ia]),c.e(9,f,k[fa]),k[ka]!=3D3&&c.e(11,f,""+k[ka]))}!C(a.ge=
t(Qb))&&!C(a.get(Rb))&&(c||(c=3Dnew =
Kc),c.e(5,1,a.get(Qb)),c.e(5,2,a.get(Rb)),e=3Da.get(Sb),e!=3Dg&&c.e(5,3,e=
),e=3Da.get(Tb),e!=3Dg&&c.j(5,1,e));c?b.add("utme",c.pa(d),!0):d&&b.add("=
utme",d.n(),!0)},Ed=3Dfunction(a,b,c){var d=3Dnew =
wd;xd(a,c);yd(a,d);d.add("utmt","tran");d.add("utmtid",b.id_,!0);d.add("u=
tmtst",b.affiliation_,!0);d.add("utmtto",b.total_,!0);d.add("utmttx",=0A=
b.tax_,!0);d.add("utmtsp",b.shipping_,!0);d.add("utmtci",b.city_,!0);d.ad=
d("utmtrg",b.state_,!0);d.add("utmtco",b.country_,!0);!c&&Ad(a,d);return =
d[p]()},Fd=3Dfunction(a,b,c){var d=3Dnew =
wd;xd(a,c);yd(a,d);d.add("utmt","item");d.add("utmtid",b.transId_,!0);d.a=
dd("utmipc",b.sku_,!0);d.add("utmipn",b.name_,!0);d.add("utmiva",b.catego=
ry_,!0);d.add("utmipr",b.price_,!0);d.add("utmiqt",b.quantity_,!0);!c&&Ad=
(a,d);return d[p]()},Gd=3Dfunction(a,b){var =
c=3Da.get(Nb);if(c=3D=3D"page")c=3Dnew wd,xd(a,b),yd(a,c),Dd(a,c),=0A=
Bd(a,c),Cd(a,c),!b&&Ad(a,c),c=3D[c[p]()];else if(c=3D=3D"event")c=3Dnew =
wd,xd(a,b),yd(a,c),c.add("utmt","event"),Dd(a,c),Bd(a,c),Cd(a,c),!b&&Ad(a=
,c),c=3D[c[p]()];else if(c=3D=3D"var")c=3Dnew =
wd,xd(a,b),yd(a,c),c.add("utmt","var"),!b&&Ad(a,c),c=3D[c[p]()];else =
if(c=3D=3D"trans")for(var =
c=3D[],d=3Da.get(cb),e=3D0;e<d[r];++e){c[j](Ed(a,d[e],b));for(var =
f=3Dd[e].items_,k=3D0;k<f[r];++k)c[j](Fd(a,f[k],b))}else =
c=3D=3D"social"?b?c=3D[]:(c=3Dnew =
wd,xd(a,b),yd(a,c),c.add("utmt","social"),c.add("utmsn",a.get(Ub),!0),c.a=
dd("utmsa",a.get(Xb),!0),=0A=
c.add("utmsid",a.get(Yb),!0),Dd(a,c),Bd(a,c),Cd(a,c),Ad(a,c),c=3D[c[p]()]=
):c=3D[];return c},ud=3Dfunction(a){var =
b,c=3Da.get(Ob),d=3Da.get(Ya);if(d=3D=3D0||d=3D=3D2){var =
e=3Da.get(Xa)+"?";b=3DGd(a,!0);for(var =
f=3D0,k=3Db[r];f<k;f++)Hd(b[f],d!=3D2&&f=3D=3Dk-1&&c,e,!0)}if(d=3D=3D1||d=
=3D=3D2){b=3DGd(a);f=3D0;for(k=3Db[r];f<k;f++)try{Hd(b[f],f=3D=3Dk-1&&c)}=
catch(o){var d=3Da,e=3Do,l=3Dnew =
wd;l.add("err",e[ia]);l.add("max",e.message);l.add("len",e.D);l.add("utmw=
v","5.1.5e");l.add("utmac",d.get(za));l.add("utmn",oa());Z.o&&l.add("aip"=
,1);Hd(l[p]())}}};var =
Id=3D"https:"=3D=3DI[v].protocol?"https://ssl.google-analytics.com":"http=
://www.google-analytics.com",Jd=3Dfunction(a){ca(this,"len");this.message=
=3D8192;this.D=3Da},Kd=3Dfunction(a){ca(this,"ff2post");this.message=3D20=
36;this.D=3Da},Hd=3Dfunction(a,b,c,d){b=3Db||pa;if(d||a[r]<=3D2036)Ld(a,b=
,c);else =
if(a[r]<=3D8192){if(T[la].userAgent[n]("Firefox")>=3D0&&![].reduce)throw =
new Kd(a[r]);Md(a,b)||Nd(a,b)}else throw new =
Jd(a[r]);},Ld=3Dfunction(a,b,c){var c=3Dc||Id+"/__utm.gif?",d=3Dnew =
Image(1,1);d.src=3Dc+a;d.onload=3Dfunction(){d.onload=3D=0A=
h;b()}},Md=3Dfunction(a,b){var =
c,d=3DId+"/p/__utm.gif",e=3DT.XDomainRequest;if(e)c=3Dnew =
e,c.open("POST",d);else if(e=3DT.XMLHttpRequest)e=3Dnew =
e,"withCredentials"in =
e&&(c=3De,c.open("POST",d,!0),c.setRequestHeader("Content-Type","text/pla=
in"));if(c)return =
c.onreadystatechange=3Dfunction(){c.readyState=3D=3D4&&(b(),c=3Dh)},c.sen=
d(a),!0},Nd=3Dfunction(a,b){if(I.body){a=3Daa(a);try{var =
c=3DI.createElement('<iframe =
name=3D"'+a+'"></iframe>')}catch(d){c=3DI.createElement("iframe"),ca(c,a)=
}c.height=3D"0";c.width=3D"0";c.style.display=3D"none";=0A=
c.style.visibility=3D"hidden";var =
e=3DI[v],e=3DId+"/u/post_iframe.html#"+aa(e.protocol+"//"+e[ja]+"/favicon=
.ico"),f=3Dfunction(){c.src=3D"";c.parentNode&&c.parentNode.removeChild(c=
)};qa(T,"beforeunload",f);var =
k=3D!1,o=3D0,l=3Dfunction(){if(!k){try{if(o>9||c.contentWindow[v][ja]=3D=3D=
I[v][ja]){k=3D!0;f();ra(T,"beforeunload",f);b();return}}catch(a){}o++;set=
Timeout(l,200)}};qa(c,"load",l);I.body.appendChild(c);c.src=3De}else =
Bc(function(){Nd(a,b)},100)};var =
$=3Dfunction(){this.o=3D!1;this.A=3D{};this.ra=3D0;this._gasoCPath=3Dthis=
._gasoDomain=3Dg;P($[s],"_createTracker",$[s].k,55);P($[s],"_getTracker",=
$[s].ta,0);P($[s],"_getTrackerByName",$[s].p,51);P($[s],"_anonymizeIp",$[=
s].sa,16);bc()};$[s].ta=3Dfunction(a,b){return =
this.k(a,g,b)};$[s].k=3Dfunction(a,b,c){b&&F(23);c&&F(67);b=3D=3Dg&&(b=3D=
"~"+Z.ra++);return Z.A[b]=3Dnew =
Q(b,a,c)};$[s].p=3Dfunction(a){a=3Da||"";return =
Z.A[a]||Z.k(g,a)};$[s].sa=3Dfunction(){this.o=3D!0};var =
Od=3Dfunction(a){if(I.webkitVisibilityState=3D=3D"prerender")return!1;a()=
;return!0};var Z=3Dnew $;var Pd=3DT._gat;Pd&&typeof =
Pd._getTracker=3D=3D"function"?Z=3DPd:T._gat=3DZ;var Hc=3Dnew =
W;(function(a){if(!Od(a)){F(123);var =
b=3D!1,c=3Dfunction(){!b&&Od(a)&&(F(124),b=3D!0,ra(I,"webkitvisibilitycha=
nge",c))};qa(I,"webkitvisibilitychange",c)}})(function(){var =
a=3DT._gaq,b=3D!1;if(a&&typeof =
a[j]=3D=3D"function"&&(b=3DObject[s][p].call(Object(a))=3D=3D"[object =
Array]",!b)){Hc=3Da;return}T._gaq=3DHc;b&&Hc[j].apply(Hc,a)});})();=0A=

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/jquery.js

/*!=0A=
 * jQuery JavaScript Library v1.5.2=0A=
 * http://jquery.com/=0A=
 *=0A=
 * Copyright 2011, John Resig=0A=
 * Dual licensed under the MIT or GPL Version 2 licenses.=0A=
 * http://jquery.org/license=0A=
 *=0A=
 * Includes Sizzle.js=0A=
 * http://sizzlejs.com/=0A=
 * Copyright 2011, The Dojo Foundation=0A=
 * Released under the MIT, BSD, and GPL Licenses.=0A=
 *=0A=
 * Date: Thu Mar 31 15:28:23 2011 -0400=0A=
 */=0A=
(function( window, undefined ) {=0A=
=0A=
// Use the correct document accordingly with window argument (sandbox)=0A=
var document =3D window.document;=0A=
var jQuery =3D (function() {=0A=
=0A=
// Define a local copy of jQuery=0A=
var jQuery =3D function( selector, context ) {=0A=
		// The jQuery object is actually just the init constructor 'enhanced'=0A=
		return new jQuery.fn.init( selector, context, rootjQuery );=0A=
	},=0A=
=0A=
	// Map over jQuery in case of overwrite=0A=
	_jQuery =3D window.jQuery,=0A=
=0A=
	// Map over the $ in case of overwrite=0A=
	_$ =3D window.$,=0A=
=0A=
	// A central reference to the root jQuery(document)=0A=
	rootjQuery,=0A=
=0A=
	// A simple way to check for HTML strings or ID strings=0A=
	// (both of which we optimize for)=0A=
	quickExpr =3D /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,=0A=
=0A=
	// Check if a string has a non-whitespace character in it=0A=
	rnotwhite =3D /\S/,=0A=
=0A=
	// Used for trimming whitespace=0A=
	trimLeft =3D /^\s+/,=0A=
	trimRight =3D /\s+$/,=0A=
=0A=
	// Check for digits=0A=
	rdigit =3D /\d/,=0A=
=0A=
	// Match a standalone tag=0A=
	rsingleTag =3D /^<(\w+)\s*\/?>(?:<\/\1>)?$/,=0A=
=0A=
	// JSON RegExp=0A=
	rvalidchars =3D /^[\],:{}\s]*$/,=0A=
	rvalidescape =3D /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,=0A=
	rvalidtokens =3D =
/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,=0A=
	rvalidbraces =3D /(?:^|:|,)(?:\s*\[)+/g,=0A=
=0A=
	// Useragent RegExp=0A=
	rwebkit =3D /(webkit)[ \/]([\w.]+)/,=0A=
	ropera =3D /(opera)(?:.*version)?[ \/]([\w.]+)/,=0A=
	rmsie =3D /(msie) ([\w.]+)/,=0A=
	rmozilla =3D /(mozilla)(?:.*? rv:([\w.]+))?/,=0A=
=0A=
	// Keep a UserAgent string for use with jQuery.browser=0A=
	userAgent =3D navigator.userAgent,=0A=
=0A=
	// For matching the engine and version of the browser=0A=
	browserMatch,=0A=
=0A=
	// The deferred used on DOM ready=0A=
	readyList,=0A=
=0A=
	// The ready event handler=0A=
	DOMContentLoaded,=0A=
=0A=
	// Save a reference to some core methods=0A=
	toString =3D Object.prototype.toString,=0A=
	hasOwn =3D Object.prototype.hasOwnProperty,=0A=
	push =3D Array.prototype.push,=0A=
	slice =3D Array.prototype.slice,=0A=
	trim =3D String.prototype.trim,=0A=
	indexOf =3D Array.prototype.indexOf,=0A=
=0A=
	// [[Class]] -> type pairs=0A=
	class2type =3D {};=0A=
=0A=
jQuery.fn =3D jQuery.prototype =3D {=0A=
	constructor: jQuery,=0A=
	init: function( selector, context, rootjQuery ) {=0A=
		var match, elem, ret, doc;=0A=
=0A=
		// Handle $(""), $(null), or $(undefined)=0A=
		if ( !selector ) {=0A=
			return this;=0A=
		}=0A=
=0A=
		// Handle $(DOMElement)=0A=
		if ( selector.nodeType ) {=0A=
			this.context =3D this[0] =3D selector;=0A=
			this.length =3D 1;=0A=
			return this;=0A=
		}=0A=
=0A=
		// The body element only exists once, optimize finding it=0A=
		if ( selector =3D=3D=3D "body" && !context && document.body ) {=0A=
			this.context =3D document;=0A=
			this[0] =3D document.body;=0A=
			this.selector =3D "body";=0A=
			this.length =3D 1;=0A=
			return this;=0A=
		}=0A=
=0A=
		// Handle HTML strings=0A=
		if ( typeof selector =3D=3D=3D "string" ) {=0A=
			// Are we dealing with HTML string or an ID?=0A=
			match =3D quickExpr.exec( selector );=0A=
=0A=
			// Verify a match, and that no context was specified for #id=0A=
			if ( match && (match[1] || !context) ) {=0A=
=0A=
				// HANDLE: $(html) -> $(array)=0A=
				if ( match[1] ) {=0A=
					context =3D context instanceof jQuery ? context[0] : context;=0A=
					doc =3D (context ? context.ownerDocument || context : document);=0A=
=0A=
					// If a single string is passed in and it's a single tag=0A=
					// just do a createElement and skip the rest=0A=
					ret =3D rsingleTag.exec( selector );=0A=
=0A=
					if ( ret ) {=0A=
						if ( jQuery.isPlainObject( context ) ) {=0A=
							selector =3D [ document.createElement( ret[1] ) ];=0A=
							jQuery.fn.attr.call( selector, context, true );=0A=
=0A=
						} else {=0A=
							selector =3D [ doc.createElement( ret[1] ) ];=0A=
						}=0A=
=0A=
					} else {=0A=
						ret =3D jQuery.buildFragment( [ match[1] ], [ doc ] );=0A=
						selector =3D (ret.cacheable ? jQuery.clone(ret.fragment) : =
ret.fragment).childNodes;=0A=
					}=0A=
=0A=
					return jQuery.merge( this, selector );=0A=
=0A=
				// HANDLE: $("#id")=0A=
				} else {=0A=
					elem =3D document.getElementById( match[2] );=0A=
=0A=
					// Check parentNode to catch when Blackberry 4.6 returns=0A=
					// nodes that are no longer in the document #6963=0A=
					if ( elem && elem.parentNode ) {=0A=
						// Handle the case where IE and Opera return items=0A=
						// by name instead of ID=0A=
						if ( elem.id !=3D=3D match[2] ) {=0A=
							return rootjQuery.find( selector );=0A=
						}=0A=
=0A=
						// Otherwise, we inject the element directly into the jQuery object=0A=
						this.length =3D 1;=0A=
						this[0] =3D elem;=0A=
					}=0A=
=0A=
					this.context =3D document;=0A=
					this.selector =3D selector;=0A=
					return this;=0A=
				}=0A=
=0A=
			// HANDLE: $(expr, $(...))=0A=
			} else if ( !context || context.jquery ) {=0A=
				return (context || rootjQuery).find( selector );=0A=
=0A=
			// HANDLE: $(expr, context)=0A=
			// (which is just equivalent to: $(context).find(expr)=0A=
			} else {=0A=
				return this.constructor( context ).find( selector );=0A=
			}=0A=
=0A=
		// HANDLE: $(function)=0A=
		// Shortcut for document ready=0A=
		} else if ( jQuery.isFunction( selector ) ) {=0A=
			return rootjQuery.ready( selector );=0A=
		}=0A=
=0A=
		if (selector.selector !=3D=3D undefined) {=0A=
			this.selector =3D selector.selector;=0A=
			this.context =3D selector.context;=0A=
		}=0A=
=0A=
		return jQuery.makeArray( selector, this );=0A=
	},=0A=
=0A=
	// Start with an empty selector=0A=
	selector: "",=0A=
=0A=
	// The current version of jQuery being used=0A=
	jquery: "1.5.2",=0A=
=0A=
	// The default length of a jQuery object is 0=0A=
	length: 0,=0A=
=0A=
	// The number of elements contained in the matched element set=0A=
	size: function() {=0A=
		return this.length;=0A=
	},=0A=
=0A=
	toArray: function() {=0A=
		return slice.call( this, 0 );=0A=
	},=0A=
=0A=
	// Get the Nth element in the matched element set OR=0A=
	// Get the whole matched element set as a clean array=0A=
	get: function( num ) {=0A=
		return num =3D=3D null ?=0A=
=0A=
			// Return a 'clean' array=0A=
			this.toArray() :=0A=
=0A=
			// Return just the object=0A=
			( num < 0 ? this[ this.length + num ] : this[ num ] );=0A=
	},=0A=
=0A=
	// Take an array of elements and push it onto the stack=0A=
	// (returning the new matched element set)=0A=
	pushStack: function( elems, name, selector ) {=0A=
		// Build a new jQuery matched element set=0A=
		var ret =3D this.constructor();=0A=
=0A=
		if ( jQuery.isArray( elems ) ) {=0A=
			push.apply( ret, elems );=0A=
=0A=
		} else {=0A=
			jQuery.merge( ret, elems );=0A=
		}=0A=
=0A=
		// Add the old object onto the stack (as a reference)=0A=
		ret.prevObject =3D this;=0A=
=0A=
		ret.context =3D this.context;=0A=
=0A=
		if ( name =3D=3D=3D "find" ) {=0A=
			ret.selector =3D this.selector + (this.selector ? " " : "") + =
selector;=0A=
		} else if ( name ) {=0A=
			ret.selector =3D this.selector + "." + name + "(" + selector + ")";=0A=
		}=0A=
=0A=
		// Return the newly-formed element set=0A=
		return ret;=0A=
	},=0A=
=0A=
	// Execute a callback for every element in the matched set.=0A=
	// (You can seed the arguments with an array of args, but this is=0A=
	// only used internally.)=0A=
	each: function( callback, args ) {=0A=
		return jQuery.each( this, callback, args );=0A=
	},=0A=
=0A=
	ready: function( fn ) {=0A=
		// Attach the listeners=0A=
		jQuery.bindReady();=0A=
=0A=
		// Add the callback=0A=
		readyList.done( fn );=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	eq: function( i ) {=0A=
		return i =3D=3D=3D -1 ?=0A=
			this.slice( i ) :=0A=
			this.slice( i, +i + 1 );=0A=
	},=0A=
=0A=
	first: function() {=0A=
		return this.eq( 0 );=0A=
	},=0A=
=0A=
	last: function() {=0A=
		return this.eq( -1 );=0A=
	},=0A=
=0A=
	slice: function() {=0A=
		return this.pushStack( slice.apply( this, arguments ),=0A=
			"slice", slice.call(arguments).join(",") );=0A=
	},=0A=
=0A=
	map: function( callback ) {=0A=
		return this.pushStack( jQuery.map(this, function( elem, i ) {=0A=
			return callback.call( elem, i, elem );=0A=
		}));=0A=
	},=0A=
=0A=
	end: function() {=0A=
		return this.prevObject || this.constructor(null);=0A=
	},=0A=
=0A=
	// For internal use only.=0A=
	// Behaves like an Array's method, not like a jQuery method.=0A=
	push: push,=0A=
	sort: [].sort,=0A=
	splice: [].splice=0A=
};=0A=
=0A=
// Give the init function the jQuery prototype for later instantiation=0A=
jQuery.fn.init.prototype =3D jQuery.fn;=0A=
=0A=
jQuery.extend =3D jQuery.fn.extend =3D function() {=0A=
	var options, name, src, copy, copyIsArray, clone,=0A=
		target =3D arguments[0] || {},=0A=
		i =3D 1,=0A=
		length =3D arguments.length,=0A=
		deep =3D false;=0A=
=0A=
	// Handle a deep copy situation=0A=
	if ( typeof target =3D=3D=3D "boolean" ) {=0A=
		deep =3D target;=0A=
		target =3D arguments[1] || {};=0A=
		// skip the boolean and the target=0A=
		i =3D 2;=0A=
	}=0A=
=0A=
	// Handle case when target is a string or something (possible in deep =
copy)=0A=
	if ( typeof target !=3D=3D "object" && !jQuery.isFunction(target) ) {=0A=
		target =3D {};=0A=
	}=0A=
=0A=
	// extend jQuery itself if only one argument is passed=0A=
	if ( length =3D=3D=3D i ) {=0A=
		target =3D this;=0A=
		--i;=0A=
	}=0A=
=0A=
	for ( ; i < length; i++ ) {=0A=
		// Only deal with non-null/undefined values=0A=
		if ( (options =3D arguments[ i ]) !=3D null ) {=0A=
			// Extend the base object=0A=
			for ( name in options ) {=0A=
				src =3D target[ name ];=0A=
				copy =3D options[ name ];=0A=
=0A=
				// Prevent never-ending loop=0A=
				if ( target =3D=3D=3D copy ) {=0A=
					continue;=0A=
				}=0A=
=0A=
				// Recurse if we're merging plain objects or arrays=0A=
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray =
=3D jQuery.isArray(copy)) ) ) {=0A=
					if ( copyIsArray ) {=0A=
						copyIsArray =3D false;=0A=
						clone =3D src && jQuery.isArray(src) ? src : [];=0A=
=0A=
					} else {=0A=
						clone =3D src && jQuery.isPlainObject(src) ? src : {};=0A=
					}=0A=
=0A=
					// Never move original objects, clone them=0A=
					target[ name ] =3D jQuery.extend( deep, clone, copy );=0A=
=0A=
				// Don't bring in undefined values=0A=
				} else if ( copy !=3D=3D undefined ) {=0A=
					target[ name ] =3D copy;=0A=
				}=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	// Return the modified object=0A=
	return target;=0A=
};=0A=
=0A=
jQuery.extend({=0A=
	noConflict: function( deep ) {=0A=
		window.$ =3D _$;=0A=
=0A=
		if ( deep ) {=0A=
			window.jQuery =3D _jQuery;=0A=
		}=0A=
=0A=
		return jQuery;=0A=
	},=0A=
=0A=
	// Is the DOM ready to be used? Set to true once it occurs.=0A=
	isReady: false,=0A=
=0A=
	// A counter to track how many items to wait for before=0A=
	// the ready event fires. See #6781=0A=
	readyWait: 1,=0A=
=0A=
	// Handle when the DOM is ready=0A=
	ready: function( wait ) {=0A=
		// A third-party is pushing the ready event forwards=0A=
		if ( wait =3D=3D=3D true ) {=0A=
			jQuery.readyWait--;=0A=
		}=0A=
=0A=
		// Make sure that the DOM is not already loaded=0A=
		if ( !jQuery.readyWait || (wait !=3D=3D true && !jQuery.isReady) ) {=0A=
			// Make sure body exists, at least, in case IE gets a little =
overzealous (ticket #5443).=0A=
			if ( !document.body ) {=0A=
				return setTimeout( jQuery.ready, 1 );=0A=
			}=0A=
=0A=
			// Remember that the DOM is ready=0A=
			jQuery.isReady =3D true;=0A=
=0A=
			// If a normal DOM Ready event fired, decrement, and wait if need be=0A=
			if ( wait !=3D=3D true && --jQuery.readyWait > 0 ) {=0A=
				return;=0A=
			}=0A=
=0A=
			// If there are functions bound, to execute=0A=
			readyList.resolveWith( document, [ jQuery ] );=0A=
=0A=
			// Trigger any bound ready events=0A=
			if ( jQuery.fn.trigger ) {=0A=
				jQuery( document ).trigger( "ready" ).unbind( "ready" );=0A=
			}=0A=
		}=0A=
	},=0A=
=0A=
	bindReady: function() {=0A=
		if ( readyList ) {=0A=
			return;=0A=
		}=0A=
=0A=
		readyList =3D jQuery._Deferred();=0A=
=0A=
		// Catch cases where $(document).ready() is called after the=0A=
		// browser event has already occurred.=0A=
		if ( document.readyState =3D=3D=3D "complete" ) {=0A=
			// Handle it asynchronously to allow scripts the opportunity to delay =
ready=0A=
			return setTimeout( jQuery.ready, 1 );=0A=
		}=0A=
=0A=
		// Mozilla, Opera and webkit nightlies currently support this event=0A=
		if ( document.addEventListener ) {=0A=
			// Use the handy event callback=0A=
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, =
false );=0A=
=0A=
			// A fallback to window.onload, that will always work=0A=
			window.addEventListener( "load", jQuery.ready, false );=0A=
=0A=
		// If IE event model is used=0A=
		} else if ( document.attachEvent ) {=0A=
			// ensure firing before onload,=0A=
			// maybe late but safe also for iframes=0A=
			document.attachEvent("onreadystatechange", DOMContentLoaded);=0A=
=0A=
			// A fallback to window.onload, that will always work=0A=
			window.attachEvent( "onload", jQuery.ready );=0A=
=0A=
			// If IE and not a frame=0A=
			// continually check to see if the document is ready=0A=
			var toplevel =3D false;=0A=
=0A=
			try {=0A=
				toplevel =3D window.frameElement =3D=3D null;=0A=
			} catch(e) {}=0A=
=0A=
			if ( document.documentElement.doScroll && toplevel ) {=0A=
				doScrollCheck();=0A=
			}=0A=
		}=0A=
	},=0A=
=0A=
	// See test/unit/core.js for details concerning isFunction.=0A=
	// Since version 1.3, DOM methods and functions like alert=0A=
	// aren't supported. They return false on IE (#2968).=0A=
	isFunction: function( obj ) {=0A=
		return jQuery.type(obj) =3D=3D=3D "function";=0A=
	},=0A=
=0A=
	isArray: Array.isArray || function( obj ) {=0A=
		return jQuery.type(obj) =3D=3D=3D "array";=0A=
	},=0A=
=0A=
	// A crude way of determining if an object is a window=0A=
	isWindow: function( obj ) {=0A=
		return obj && typeof obj =3D=3D=3D "object" && "setInterval" in obj;=0A=
	},=0A=
=0A=
	isNaN: function( obj ) {=0A=
		return obj =3D=3D null || !rdigit.test( obj ) || isNaN( obj );=0A=
	},=0A=
=0A=
	type: function( obj ) {=0A=
		return obj =3D=3D null ?=0A=
			String( obj ) :=0A=
			class2type[ toString.call(obj) ] || "object";=0A=
	},=0A=
=0A=
	isPlainObject: function( obj ) {=0A=
		// Must be an Object.=0A=
		// Because of IE, we also have to check the presence of the =
constructor property.=0A=
		// Make sure that DOM nodes and window objects don't pass through, as =
well=0A=
		if ( !obj || jQuery.type(obj) !=3D=3D "object" || obj.nodeType || =
jQuery.isWindow( obj ) ) {=0A=
			return false;=0A=
		}=0A=
=0A=
		// Not own constructor property must be Object=0A=
		if ( obj.constructor &&=0A=
			!hasOwn.call(obj, "constructor") &&=0A=
			!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {=0A=
			return false;=0A=
		}=0A=
=0A=
		// Own properties are enumerated firstly, so to speed up,=0A=
		// if last one is own, then all properties are own.=0A=
=0A=
		var key;=0A=
		for ( key in obj ) {}=0A=
=0A=
		return key =3D=3D=3D undefined || hasOwn.call( obj, key );=0A=
	},=0A=
=0A=
	isEmptyObject: function( obj ) {=0A=
		for ( var name in obj ) {=0A=
			return false;=0A=
		}=0A=
		return true;=0A=
	},=0A=
=0A=
	error: function( msg ) {=0A=
		throw msg;=0A=
	},=0A=
=0A=
	parseJSON: function( data ) {=0A=
		if ( typeof data !=3D=3D "string" || !data ) {=0A=
			return null;=0A=
		}=0A=
=0A=
		// Make sure leading/trailing whitespace is removed (IE can't handle =
it)=0A=
		data =3D jQuery.trim( data );=0A=
=0A=
		// Make sure the incoming data is actual JSON=0A=
		// Logic borrowed from http://json.org/json2.js=0A=
		if ( rvalidchars.test(data.replace(rvalidescape, "@")=0A=
			.replace(rvalidtokens, "]")=0A=
			.replace(rvalidbraces, "")) ) {=0A=
=0A=
			// Try to use the native JSON parser first=0A=
			return window.JSON && window.JSON.parse ?=0A=
				window.JSON.parse( data ) :=0A=
				(new Function("return " + data))();=0A=
=0A=
		} else {=0A=
			jQuery.error( "Invalid JSON: " + data );=0A=
		}=0A=
	},=0A=
=0A=
	// Cross-browser xml parsing=0A=
	// (xml & tmp used internally)=0A=
	parseXML: function( data , xml , tmp ) {=0A=
=0A=
		if ( window.DOMParser ) { // Standard=0A=
			tmp =3D new DOMParser();=0A=
			xml =3D tmp.parseFromString( data , "text/xml" );=0A=
		} else { // IE=0A=
			xml =3D new ActiveXObject( "Microsoft.XMLDOM" );=0A=
			xml.async =3D "false";=0A=
			xml.loadXML( data );=0A=
		}=0A=
=0A=
		tmp =3D xml.documentElement;=0A=
=0A=
		if ( ! tmp || ! tmp.nodeName || tmp.nodeName =3D=3D=3D "parsererror" ) =
{=0A=
			jQuery.error( "Invalid XML: " + data );=0A=
		}=0A=
=0A=
		return xml;=0A=
	},=0A=
=0A=
	noop: function() {},=0A=
=0A=
	// Evalulates a script in a global context=0A=
	globalEval: function( data ) {=0A=
		if ( data && rnotwhite.test(data) ) {=0A=
			// Inspired by code by Andrea Giammarchi=0A=
			// =
http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom=
.html=0A=
			var head =3D document.head || document.getElementsByTagName( "head" =
)[0] || document.documentElement,=0A=
				script =3D document.createElement( "script" );=0A=
=0A=
			if ( jQuery.support.scriptEval() ) {=0A=
				script.appendChild( document.createTextNode( data ) );=0A=
			} else {=0A=
				script.text =3D data;=0A=
			}=0A=
=0A=
			// Use insertBefore instead of appendChild to circumvent an IE6 bug.=0A=
			// This arises when a base node is used (#2709).=0A=
			head.insertBefore( script, head.firstChild );=0A=
			head.removeChild( script );=0A=
		}=0A=
	},=0A=
=0A=
	nodeName: function( elem, name ) {=0A=
		return elem.nodeName && elem.nodeName.toUpperCase() =3D=3D=3D =
name.toUpperCase();=0A=
	},=0A=
=0A=
	// args is for internal usage only=0A=
	each: function( object, callback, args ) {=0A=
		var name, i =3D 0,=0A=
			length =3D object.length,=0A=
			isObj =3D length =3D=3D=3D undefined || jQuery.isFunction(object);=0A=
=0A=
		if ( args ) {=0A=
			if ( isObj ) {=0A=
				for ( name in object ) {=0A=
					if ( callback.apply( object[ name ], args ) =3D=3D=3D false ) {=0A=
						break;=0A=
					}=0A=
				}=0A=
			} else {=0A=
				for ( ; i < length; ) {=0A=
					if ( callback.apply( object[ i++ ], args ) =3D=3D=3D false ) {=0A=
						break;=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
		// A special, fast, case for the most common use of each=0A=
		} else {=0A=
			if ( isObj ) {=0A=
				for ( name in object ) {=0A=
					if ( callback.call( object[ name ], name, object[ name ] ) =
=3D=3D=3D false ) {=0A=
						break;=0A=
					}=0A=
				}=0A=
			} else {=0A=
				for ( var value =3D object[0];=0A=
					i < length && callback.call( value, i, value ) !=3D=3D false; value =
=3D object[++i] ) {}=0A=
			}=0A=
		}=0A=
=0A=
		return object;=0A=
	},=0A=
=0A=
	// Use native String.trim function wherever possible=0A=
	trim: trim ?=0A=
		function( text ) {=0A=
			return text =3D=3D null ?=0A=
				"" :=0A=
				trim.call( text );=0A=
		} :=0A=
=0A=
		// Otherwise use our own trimming functionality=0A=
		function( text ) {=0A=
			return text =3D=3D null ?=0A=
				"" :=0A=
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );=0A=
		},=0A=
=0A=
	// results is for internal usage only=0A=
	makeArray: function( array, results ) {=0A=
		var ret =3D results || [];=0A=
=0A=
		if ( array !=3D null ) {=0A=
			// The window, strings (and functions) also have 'length'=0A=
			// The extra typeof function check is to prevent crashes=0A=
			// in Safari 2 (See: #3039)=0A=
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930=0A=
			var type =3D jQuery.type(array);=0A=
=0A=
			if ( array.length =3D=3D null || type =3D=3D=3D "string" || type =
=3D=3D=3D "function" || type =3D=3D=3D "regexp" || jQuery.isWindow( =
array ) ) {=0A=
				push.call( ret, array );=0A=
			} else {=0A=
				jQuery.merge( ret, array );=0A=
			}=0A=
		}=0A=
=0A=
		return ret;=0A=
	},=0A=
=0A=
	inArray: function( elem, array ) {=0A=
		if ( array.indexOf ) {=0A=
			return array.indexOf( elem );=0A=
		}=0A=
=0A=
		for ( var i =3D 0, length =3D array.length; i < length; i++ ) {=0A=
			if ( array[ i ] =3D=3D=3D elem ) {=0A=
				return i;=0A=
			}=0A=
		}=0A=
=0A=
		return -1;=0A=
	},=0A=
=0A=
	merge: function( first, second ) {=0A=
		var i =3D first.length,=0A=
			j =3D 0;=0A=
=0A=
		if ( typeof second.length =3D=3D=3D "number" ) {=0A=
			for ( var l =3D second.length; j < l; j++ ) {=0A=
				first[ i++ ] =3D second[ j ];=0A=
			}=0A=
=0A=
		} else {=0A=
			while ( second[j] !=3D=3D undefined ) {=0A=
				first[ i++ ] =3D second[ j++ ];=0A=
			}=0A=
		}=0A=
=0A=
		first.length =3D i;=0A=
=0A=
		return first;=0A=
	},=0A=
=0A=
	grep: function( elems, callback, inv ) {=0A=
		var ret =3D [], retVal;=0A=
		inv =3D !!inv;=0A=
=0A=
		// Go through the array, only saving the items=0A=
		// that pass the validator function=0A=
		for ( var i =3D 0, length =3D elems.length; i < length; i++ ) {=0A=
			retVal =3D !!callback( elems[ i ], i );=0A=
			if ( inv !=3D=3D retVal ) {=0A=
				ret.push( elems[ i ] );=0A=
			}=0A=
		}=0A=
=0A=
		return ret;=0A=
	},=0A=
=0A=
	// arg is for internal usage only=0A=
	map: function( elems, callback, arg ) {=0A=
		var ret =3D [], value;=0A=
=0A=
		// Go through the array, translating each of the items to their=0A=
		// new value (or values).=0A=
		for ( var i =3D 0, length =3D elems.length; i < length; i++ ) {=0A=
			value =3D callback( elems[ i ], i, arg );=0A=
=0A=
			if ( value !=3D null ) {=0A=
				ret[ ret.length ] =3D value;=0A=
			}=0A=
		}=0A=
=0A=
		// Flatten any nested arrays=0A=
		return ret.concat.apply( [], ret );=0A=
	},=0A=
=0A=
	// A global GUID counter for objects=0A=
	guid: 1,=0A=
=0A=
	proxy: function( fn, proxy, thisObject ) {=0A=
		if ( arguments.length =3D=3D=3D 2 ) {=0A=
			if ( typeof proxy =3D=3D=3D "string" ) {=0A=
				thisObject =3D fn;=0A=
				fn =3D thisObject[ proxy ];=0A=
				proxy =3D undefined;=0A=
=0A=
			} else if ( proxy && !jQuery.isFunction( proxy ) ) {=0A=
				thisObject =3D proxy;=0A=
				proxy =3D undefined;=0A=
			}=0A=
		}=0A=
=0A=
		if ( !proxy && fn ) {=0A=
			proxy =3D function() {=0A=
				return fn.apply( thisObject || this, arguments );=0A=
			};=0A=
		}=0A=
=0A=
		// Set the guid of unique handler to the same of original handler, so =
it can be removed=0A=
		if ( fn ) {=0A=
			proxy.guid =3D fn.guid =3D fn.guid || proxy.guid || jQuery.guid++;=0A=
		}=0A=
=0A=
		// So proxy can be declared as an argument=0A=
		return proxy;=0A=
	},=0A=
=0A=
	// Mutifunctional method to get and set values to a collection=0A=
	// The value/s can be optionally by executed if its a function=0A=
	access: function( elems, key, value, exec, fn, pass ) {=0A=
		var length =3D elems.length;=0A=
=0A=
		// Setting many attributes=0A=
		if ( typeof key =3D=3D=3D "object" ) {=0A=
			for ( var k in key ) {=0A=
				jQuery.access( elems, k, key[k], exec, fn, value );=0A=
			}=0A=
			return elems;=0A=
		}=0A=
=0A=
		// Setting one attribute=0A=
		if ( value !=3D=3D undefined ) {=0A=
			// Optionally, function values get executed if exec is true=0A=
			exec =3D !pass && exec && jQuery.isFunction(value);=0A=
=0A=
			for ( var i =3D 0; i < length; i++ ) {=0A=
				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key =
) ) : value, pass );=0A=
			}=0A=
=0A=
			return elems;=0A=
		}=0A=
=0A=
		// Getting an attribute=0A=
		return length ? fn( elems[0], key ) : undefined;=0A=
	},=0A=
=0A=
	now: function() {=0A=
		return (new Date()).getTime();=0A=
	},=0A=
=0A=
	// Use of jQuery.browser is frowned upon.=0A=
	// More details: http://docs.jquery.com/Utilities/jQuery.browser=0A=
	uaMatch: function( ua ) {=0A=
		ua =3D ua.toLowerCase();=0A=
=0A=
		var match =3D rwebkit.exec( ua ) ||=0A=
			ropera.exec( ua ) ||=0A=
			rmsie.exec( ua ) ||=0A=
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||=0A=
			[];=0A=
=0A=
		return { browser: match[1] || "", version: match[2] || "0" };=0A=
	},=0A=
=0A=
	sub: function() {=0A=
		function jQuerySubclass( selector, context ) {=0A=
			return new jQuerySubclass.fn.init( selector, context );=0A=
		}=0A=
		jQuery.extend( true, jQuerySubclass, this );=0A=
		jQuerySubclass.superclass =3D this;=0A=
		jQuerySubclass.fn =3D jQuerySubclass.prototype =3D this();=0A=
		jQuerySubclass.fn.constructor =3D jQuerySubclass;=0A=
		jQuerySubclass.subclass =3D this.subclass;=0A=
		jQuerySubclass.fn.init =3D function init( selector, context ) {=0A=
			if ( context && context instanceof jQuery && !(context instanceof =
jQuerySubclass) ) {=0A=
				context =3D jQuerySubclass(context);=0A=
			}=0A=
=0A=
			return jQuery.fn.init.call( this, selector, context, =
rootjQuerySubclass );=0A=
		};=0A=
		jQuerySubclass.fn.init.prototype =3D jQuerySubclass.fn;=0A=
		var rootjQuerySubclass =3D jQuerySubclass(document);=0A=
		return jQuerySubclass;=0A=
	},=0A=
=0A=
	browser: {}=0A=
});=0A=
=0A=
// Populate the class2type map=0A=
jQuery.each("Boolean Number String Function Array Date RegExp =
Object".split(" "), function(i, name) {=0A=
	class2type[ "[object " + name + "]" ] =3D name.toLowerCase();=0A=
});=0A=
=0A=
browserMatch =3D jQuery.uaMatch( userAgent );=0A=
if ( browserMatch.browser ) {=0A=
	jQuery.browser[ browserMatch.browser ] =3D true;=0A=
	jQuery.browser.version =3D browserMatch.version;=0A=
}=0A=
=0A=
// Deprecated, use jQuery.browser.webkit instead=0A=
if ( jQuery.browser.webkit ) {=0A=
	jQuery.browser.safari =3D true;=0A=
}=0A=
=0A=
if ( indexOf ) {=0A=
	jQuery.inArray =3D function( elem, array ) {=0A=
		return indexOf.call( array, elem );=0A=
	};=0A=
}=0A=
=0A=
// IE doesn't match non-breaking spaces with \s=0A=
if ( rnotwhite.test( "\xA0" ) ) {=0A=
	trimLeft =3D /^[\s\xA0]+/;=0A=
	trimRight =3D /[\s\xA0]+$/;=0A=
}=0A=
=0A=
// All jQuery objects should point back to these=0A=
rootjQuery =3D jQuery(document);=0A=
=0A=
// Cleanup functions for the document ready method=0A=
if ( document.addEventListener ) {=0A=
	DOMContentLoaded =3D function() {=0A=
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, =
false );=0A=
		jQuery.ready();=0A=
	};=0A=
=0A=
} else if ( document.attachEvent ) {=0A=
	DOMContentLoaded =3D function() {=0A=
		// Make sure body exists, at least, in case IE gets a little =
overzealous (ticket #5443).=0A=
		if ( document.readyState =3D=3D=3D "complete" ) {=0A=
			document.detachEvent( "onreadystatechange", DOMContentLoaded );=0A=
			jQuery.ready();=0A=
		}=0A=
	};=0A=
}=0A=
=0A=
// The DOM ready check for Internet Explorer=0A=
function doScrollCheck() {=0A=
	if ( jQuery.isReady ) {=0A=
		return;=0A=
	}=0A=
=0A=
	try {=0A=
		// If IE is used, use the trick by Diego Perini=0A=
		// http://javascript.nwbox.com/IEContentLoaded/=0A=
		document.documentElement.doScroll("left");=0A=
	} catch(e) {=0A=
		setTimeout( doScrollCheck, 1 );=0A=
		return;=0A=
	}=0A=
=0A=
	// and execute any waiting functions=0A=
	jQuery.ready();=0A=
}=0A=
=0A=
// Expose jQuery to the global object=0A=
return jQuery;=0A=
=0A=
})();=0A=
=0A=
=0A=
var // Promise methods=0A=
	promiseMethods =3D "then done fail isResolved isRejected =
promise".split( " " ),=0A=
	// Static reference to slice=0A=
	sliceDeferred =3D [].slice;=0A=
=0A=
jQuery.extend({=0A=
	// Create a simple deferred (one callbacks list)=0A=
	_Deferred: function() {=0A=
		var // callbacks list=0A=
			callbacks =3D [],=0A=
			// stored [ context , args ]=0A=
			fired,=0A=
			// to avoid firing when already doing so=0A=
			firing,=0A=
			// flag to know if the deferred has been cancelled=0A=
			cancelled,=0A=
			// the deferred itself=0A=
			deferred  =3D {=0A=
=0A=
				// done( f1, f2, ...)=0A=
				done: function() {=0A=
					if ( !cancelled ) {=0A=
						var args =3D arguments,=0A=
							i,=0A=
							length,=0A=
							elem,=0A=
							type,=0A=
							_fired;=0A=
						if ( fired ) {=0A=
							_fired =3D fired;=0A=
							fired =3D 0;=0A=
						}=0A=
						for ( i =3D 0, length =3D args.length; i < length; i++ ) {=0A=
							elem =3D args[ i ];=0A=
							type =3D jQuery.type( elem );=0A=
							if ( type =3D=3D=3D "array" ) {=0A=
								deferred.done.apply( deferred, elem );=0A=
							} else if ( type =3D=3D=3D "function" ) {=0A=
								callbacks.push( elem );=0A=
							}=0A=
						}=0A=
						if ( _fired ) {=0A=
							deferred.resolveWith( _fired[ 0 ], _fired[ 1 ] );=0A=
						}=0A=
					}=0A=
					return this;=0A=
				},=0A=
=0A=
				// resolve with given context and args=0A=
				resolveWith: function( context, args ) {=0A=
					if ( !cancelled && !fired && !firing ) {=0A=
						// make sure args are available (#8421)=0A=
						args =3D args || [];=0A=
						firing =3D 1;=0A=
						try {=0A=
							while( callbacks[ 0 ] ) {=0A=
								callbacks.shift().apply( context, args );=0A=
							}=0A=
						}=0A=
						finally {=0A=
							fired =3D [ context, args ];=0A=
							firing =3D 0;=0A=
						}=0A=
					}=0A=
					return this;=0A=
				},=0A=
=0A=
				// resolve with this as context and given arguments=0A=
				resolve: function() {=0A=
					deferred.resolveWith( this, arguments );=0A=
					return this;=0A=
				},=0A=
=0A=
				// Has this deferred been resolved?=0A=
				isResolved: function() {=0A=
					return !!( firing || fired );=0A=
				},=0A=
=0A=
				// Cancel=0A=
				cancel: function() {=0A=
					cancelled =3D 1;=0A=
					callbacks =3D [];=0A=
					return this;=0A=
				}=0A=
			};=0A=
=0A=
		return deferred;=0A=
	},=0A=
=0A=
	// Full fledged deferred (two callbacks list)=0A=
	Deferred: function( func ) {=0A=
		var deferred =3D jQuery._Deferred(),=0A=
			failDeferred =3D jQuery._Deferred(),=0A=
			promise;=0A=
		// Add errorDeferred methods, then and promise=0A=
		jQuery.extend( deferred, {=0A=
			then: function( doneCallbacks, failCallbacks ) {=0A=
				deferred.done( doneCallbacks ).fail( failCallbacks );=0A=
				return this;=0A=
			},=0A=
			fail: failDeferred.done,=0A=
			rejectWith: failDeferred.resolveWith,=0A=
			reject: failDeferred.resolve,=0A=
			isRejected: failDeferred.isResolved,=0A=
			// Get a promise for this deferred=0A=
			// If obj is provided, the promise aspect is added to the object=0A=
			promise: function( obj ) {=0A=
				if ( obj =3D=3D null ) {=0A=
					if ( promise ) {=0A=
						return promise;=0A=
					}=0A=
					promise =3D obj =3D {};=0A=
				}=0A=
				var i =3D promiseMethods.length;=0A=
				while( i-- ) {=0A=
					obj[ promiseMethods[i] ] =3D deferred[ promiseMethods[i] ];=0A=
				}=0A=
				return obj;=0A=
			}=0A=
		} );=0A=
		// Make sure only one callback list will be used=0A=
		deferred.done( failDeferred.cancel ).fail( deferred.cancel );=0A=
		// Unexpose cancel=0A=
		delete deferred.cancel;=0A=
		// Call given func if any=0A=
		if ( func ) {=0A=
			func.call( deferred, deferred );=0A=
		}=0A=
		return deferred;=0A=
	},=0A=
=0A=
	// Deferred helper=0A=
	when: function( firstParam ) {=0A=
		var args =3D arguments,=0A=
			i =3D 0,=0A=
			length =3D args.length,=0A=
			count =3D length,=0A=
			deferred =3D length <=3D 1 && firstParam && jQuery.isFunction( =
firstParam.promise ) ?=0A=
				firstParam :=0A=
				jQuery.Deferred();=0A=
		function resolveFunc( i ) {=0A=
			return function( value ) {=0A=
				args[ i ] =3D arguments.length > 1 ? sliceDeferred.call( arguments, =
0 ) : value;=0A=
				if ( !( --count ) ) {=0A=
					// Strange bug in FF4:=0A=
					// Values changed onto the arguments object sometimes end up as =
undefined values=0A=
					// outside the $.when method. Cloning the object into a fresh array =
solves the issue=0A=
					deferred.resolveWith( deferred, sliceDeferred.call( args, 0 ) );=0A=
				}=0A=
			};=0A=
		}=0A=
		if ( length > 1 ) {=0A=
			for( ; i < length; i++ ) {=0A=
				if ( args[ i ] && jQuery.isFunction( args[ i ].promise ) ) {=0A=
					args[ i ].promise().then( resolveFunc(i), deferred.reject );=0A=
				} else {=0A=
					--count;=0A=
				}=0A=
			}=0A=
			if ( !count ) {=0A=
				deferred.resolveWith( deferred, args );=0A=
			}=0A=
		} else if ( deferred !=3D=3D firstParam ) {=0A=
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );=0A=
		}=0A=
		return deferred.promise();=0A=
	}=0A=
});=0A=
=0A=
=0A=
=0A=
=0A=
(function() {=0A=
=0A=
	jQuery.support =3D {};=0A=
=0A=
	var div =3D document.createElement("div");=0A=
=0A=
	div.style.display =3D "none";=0A=
	div.innerHTML =3D "   <link/><table></table><a href=3D'/a' =
style=3D'color:red;float:left;opacity:.55;'>a</a><input =
type=3D'checkbox'/>";=0A=
=0A=
	var all =3D div.getElementsByTagName("*"),=0A=
		a =3D div.getElementsByTagName("a")[0],=0A=
		select =3D document.createElement("select"),=0A=
		opt =3D select.appendChild( document.createElement("option") ),=0A=
		input =3D div.getElementsByTagName("input")[0];=0A=
=0A=
	// Can't get basic test support=0A=
	if ( !all || !all.length || !a ) {=0A=
		return;=0A=
	}=0A=
=0A=
	jQuery.support =3D {=0A=
		// IE strips leading whitespace when .innerHTML is used=0A=
		leadingWhitespace: div.firstChild.nodeType =3D=3D=3D 3,=0A=
=0A=
		// Make sure that tbody elements aren't automatically inserted=0A=
		// IE will insert them into empty tables=0A=
		tbody: !div.getElementsByTagName("tbody").length,=0A=
=0A=
		// Make sure that link elements get serialized correctly by innerHTML=0A=
		// This requires a wrapper element in IE=0A=
		htmlSerialize: !!div.getElementsByTagName("link").length,=0A=
=0A=
		// Get the style information from getAttribute=0A=
		// (IE uses .cssText insted)=0A=
		style: /red/.test( a.getAttribute("style") ),=0A=
=0A=
		// Make sure that URLs aren't manipulated=0A=
		// (IE normalizes it by default)=0A=
		hrefNormalized: a.getAttribute("href") =3D=3D=3D "/a",=0A=
=0A=
		// Make sure that element opacity exists=0A=
		// (IE uses filter instead)=0A=
		// Use a regex to work around a WebKit issue. See #5145=0A=
		opacity: /^0.55$/.test( a.style.opacity ),=0A=
=0A=
		// Verify style float existence=0A=
		// (IE uses styleFloat instead of cssFloat)=0A=
		cssFloat: !!a.style.cssFloat,=0A=
=0A=
		// Make sure that if no value is specified for a checkbox=0A=
		// that it defaults to "on".=0A=
		// (WebKit defaults to "" instead)=0A=
		checkOn: input.value =3D=3D=3D "on",=0A=
=0A=
		// Make sure that a selected-by-default option has a working selected =
property.=0A=
		// (WebKit defaults to false instead of true, IE too, if it's in an =
optgroup)=0A=
		optSelected: opt.selected,=0A=
=0A=
		// Will be defined later=0A=
		deleteExpando: true,=0A=
		optDisabled: false,=0A=
		checkClone: false,=0A=
		noCloneEvent: true,=0A=
		noCloneChecked: true,=0A=
		boxModel: null,=0A=
		inlineBlockNeedsLayout: false,=0A=
		shrinkWrapBlocks: false,=0A=
		reliableHiddenOffsets: true,=0A=
		reliableMarginRight: true=0A=
	};=0A=
=0A=
	input.checked =3D true;=0A=
	jQuery.support.noCloneChecked =3D input.cloneNode( true ).checked;=0A=
=0A=
	// Make sure that the options inside disabled selects aren't marked as =
disabled=0A=
	// (WebKit marks them as diabled)=0A=
	select.disabled =3D true;=0A=
	jQuery.support.optDisabled =3D !opt.disabled;=0A=
=0A=
	var _scriptEval =3D null;=0A=
	jQuery.support.scriptEval =3D function() {=0A=
		if ( _scriptEval =3D=3D=3D null ) {=0A=
			var root =3D document.documentElement,=0A=
				script =3D document.createElement("script"),=0A=
				id =3D "script" + jQuery.now();=0A=
=0A=
			// Make sure that the execution of code works by injecting a script=0A=
			// tag with appendChild/createTextNode=0A=
			// (IE doesn't support this, fails, and uses .text instead)=0A=
			try {=0A=
				script.appendChild( document.createTextNode( "window." + id + =
"=3D1;" ) );=0A=
			} catch(e) {}=0A=
=0A=
			root.insertBefore( script, root.firstChild );=0A=
=0A=
			if ( window[ id ] ) {=0A=
				_scriptEval =3D true;=0A=
				delete window[ id ];=0A=
			} else {=0A=
				_scriptEval =3D false;=0A=
			}=0A=
=0A=
			root.removeChild( script );=0A=
		}=0A=
=0A=
		return _scriptEval;=0A=
	};=0A=
=0A=
	// Test to see if it's possible to delete an expando from an element=0A=
	// Fails in Internet Explorer=0A=
	try {=0A=
		delete div.test;=0A=
=0A=
	} catch(e) {=0A=
		jQuery.support.deleteExpando =3D false;=0A=
	}=0A=
=0A=
	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {=0A=
		div.attachEvent("onclick", function click() {=0A=
			// Cloning a node shouldn't copy over any=0A=
			// bound event handlers (IE does this)=0A=
			jQuery.support.noCloneEvent =3D false;=0A=
			div.detachEvent("onclick", click);=0A=
		});=0A=
		div.cloneNode(true).fireEvent("onclick");=0A=
	}=0A=
=0A=
	div =3D document.createElement("div");=0A=
	div.innerHTML =3D "<input type=3D'radio' name=3D'radiotest' =
checked=3D'checked'/>";=0A=
=0A=
	var fragment =3D document.createDocumentFragment();=0A=
	fragment.appendChild( div.firstChild );=0A=
=0A=
	// WebKit doesn't clone checked state correctly in fragments=0A=
	jQuery.support.checkClone =3D =
fragment.cloneNode(true).cloneNode(true).lastChild.checked;=0A=
=0A=
	// Figure out if the W3C box model works as expected=0A=
	// document.body must exist before we can do this=0A=
	jQuery(function() {=0A=
		var div =3D document.createElement("div"),=0A=
			body =3D document.getElementsByTagName("body")[0];=0A=
=0A=
		// Frameset documents with no body should not run this code=0A=
		if ( !body ) {=0A=
			return;=0A=
		}=0A=
=0A=
		div.style.width =3D div.style.paddingLeft =3D "1px";=0A=
		body.appendChild( div );=0A=
		jQuery.boxModel =3D jQuery.support.boxModel =3D div.offsetWidth =
=3D=3D=3D 2;=0A=
=0A=
		if ( "zoom" in div.style ) {=0A=
			// Check if natively block-level elements act like inline-block=0A=
			// elements when setting their display to 'inline' and giving=0A=
			// them layout=0A=
			// (IE < 8 does this)=0A=
			div.style.display =3D "inline";=0A=
			div.style.zoom =3D 1;=0A=
			jQuery.support.inlineBlockNeedsLayout =3D div.offsetWidth =3D=3D=3D 2;=0A=
=0A=
			// Check if elements with layout shrink-wrap their children=0A=
			// (IE 6 does this)=0A=
			div.style.display =3D "";=0A=
			div.innerHTML =3D "<div style=3D'width:4px;'></div>";=0A=
			jQuery.support.shrinkWrapBlocks =3D div.offsetWidth !=3D=3D 2;=0A=
		}=0A=
=0A=
		div.innerHTML =3D "<table><tr><td =
style=3D'padding:0;border:0;display:none'></td><td>t</td></tr></table>";=0A=
		var tds =3D div.getElementsByTagName("td");=0A=
=0A=
		// Check if table cells still have offsetWidth/Height when they are set=0A=
		// to display:none and there are still other visible table cells in a=0A=
		// table row; if so, offsetWidth/Height are not reliable for use when=0A=
		// determining if an element has been hidden directly using=0A=
		// display:none (it is still safe to use offsets if a parent element is=0A=
		// hidden; don safety goggles and see bug #4512 for more information).=0A=
		// (only IE 8 fails this test)=0A=
		jQuery.support.reliableHiddenOffsets =3D tds[0].offsetHeight =3D=3D=3D =
0;=0A=
=0A=
		tds[0].style.display =3D "";=0A=
		tds[1].style.display =3D "none";=0A=
=0A=
		// Check if empty table cells still have offsetWidth/Height=0A=
		// (IE < 8 fail this test)=0A=
		jQuery.support.reliableHiddenOffsets =3D =
jQuery.support.reliableHiddenOffsets && tds[0].offsetHeight =3D=3D=3D 0;=0A=
		div.innerHTML =3D "";=0A=
=0A=
		// Check if div with explicit width and no margin-right incorrectly=0A=
		// gets computed margin-right based on width of container. For more=0A=
		// info see bug #3333=0A=
		// Fails in WebKit before Feb 2011 nightlies=0A=
		// WebKit Bug 13343 - getComputedStyle returns wrong value for =
margin-right=0A=
		if ( document.defaultView && document.defaultView.getComputedStyle ) {=0A=
			div.style.width =3D "1px";=0A=
			div.style.marginRight =3D "0";=0A=
			jQuery.support.reliableMarginRight =3D ( =
parseInt(document.defaultView.getComputedStyle(div, null).marginRight, =
10) || 0 ) =3D=3D=3D 0;=0A=
		}=0A=
=0A=
		body.removeChild( div ).style.display =3D "none";=0A=
		div =3D tds =3D null;=0A=
	});=0A=
=0A=
	// Technique from Juriy Zaytsev=0A=
	// =
http://thinkweb2.com/projects/prototype/detecting-event-support-without-b=
rowser-sniffing/=0A=
	var eventSupported =3D function( eventName ) {=0A=
		var el =3D document.createElement("div");=0A=
		eventName =3D "on" + eventName;=0A=
=0A=
		// We only care about the case where non-standard event systems=0A=
		// are used, namely in IE. Short-circuiting here helps us to=0A=
		// avoid an eval call (in setAttribute) which can cause CSP=0A=
		// to go haywire. See: https://developer.mozilla.org/en/Security/CSP=0A=
		if ( !el.attachEvent ) {=0A=
			return true;=0A=
		}=0A=
=0A=
		var isSupported =3D (eventName in el);=0A=
		if ( !isSupported ) {=0A=
			el.setAttribute(eventName, "return;");=0A=
			isSupported =3D typeof el[eventName] =3D=3D=3D "function";=0A=
		}=0A=
		return isSupported;=0A=
	};=0A=
=0A=
	jQuery.support.submitBubbles =3D eventSupported("submit");=0A=
	jQuery.support.changeBubbles =3D eventSupported("change");=0A=
=0A=
	// release memory in IE=0A=
	div =3D all =3D a =3D null;=0A=
})();=0A=
=0A=
=0A=
=0A=
var rbrace =3D /^(?:\{.*\}|\[.*\])$/;=0A=
=0A=
jQuery.extend({=0A=
	cache: {},=0A=
=0A=
	// Please use with caution=0A=
	uuid: 0,=0A=
=0A=
	// Unique for each copy of jQuery on the page=0A=
	// Non-digits removed to match rinlinejQuery=0A=
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( =
/\D/g, "" ),=0A=
=0A=
	// The following elements throw uncatchable exceptions if you=0A=
	// attempt to add expando properties to them.=0A=
	noData: {=0A=
		"embed": true,=0A=
		// Ban all objects except for Flash (which handle expandos)=0A=
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",=0A=
		"applet": true=0A=
	},=0A=
=0A=
	hasData: function( elem ) {=0A=
		elem =3D elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ =
jQuery.expando ];=0A=
=0A=
		return !!elem && !isEmptyDataObject( elem );=0A=
	},=0A=
=0A=
	data: function( elem, name, data, pvt /* Internal Use Only */ ) {=0A=
		if ( !jQuery.acceptData( elem ) ) {=0A=
			return;=0A=
		}=0A=
=0A=
		var internalKey =3D jQuery.expando, getByName =3D typeof name =
=3D=3D=3D "string", thisCache,=0A=
=0A=
			// We have to handle DOM nodes and JS objects differently because =
IE6-7=0A=
			// can't GC object references properly across the DOM-JS boundary=0A=
			isNode =3D elem.nodeType,=0A=
=0A=
			// Only DOM nodes need the global jQuery cache; JS object data is=0A=
			// attached directly to the object so GC can occur automatically=0A=
			cache =3D isNode ? jQuery.cache : elem,=0A=
=0A=
			// Only defining an ID for JS objects if its cache already exists =
allows=0A=
			// the code to shortcut on the same path as a DOM node with no cache=0A=
			id =3D isNode ? elem[ jQuery.expando ] : elem[ jQuery.expando ] && =
jQuery.expando;=0A=
=0A=
		// Avoid doing any more work than we need to when trying to get data =
on an=0A=
		// object that has no data at all=0A=
		if ( (!id || (pvt && id && !cache[ id ][ internalKey ])) && getByName =
&& data =3D=3D=3D undefined ) {=0A=
			return;=0A=
		}=0A=
=0A=
		if ( !id ) {=0A=
			// Only DOM nodes need a new unique ID for each element since their =
data=0A=
			// ends up in the global cache=0A=
			if ( isNode ) {=0A=
				elem[ jQuery.expando ] =3D id =3D ++jQuery.uuid;=0A=
			} else {=0A=
				id =3D jQuery.expando;=0A=
			}=0A=
		}=0A=
=0A=
		if ( !cache[ id ] ) {=0A=
			cache[ id ] =3D {};=0A=
=0A=
			// TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery=0A=
			// metadata on plain JS objects when the object is serialized using=0A=
			// JSON.stringify=0A=
			if ( !isNode ) {=0A=
				cache[ id ].toJSON =3D jQuery.noop;=0A=
			}=0A=
		}=0A=
=0A=
		// An object can be passed to jQuery.data instead of a key/value pair; =
this gets=0A=
		// shallow copied over onto the existing cache=0A=
		if ( typeof name =3D=3D=3D "object" || typeof name =3D=3D=3D =
"function" ) {=0A=
			if ( pvt ) {=0A=
				cache[ id ][ internalKey ] =3D jQuery.extend(cache[ id ][ =
internalKey ], name);=0A=
			} else {=0A=
				cache[ id ] =3D jQuery.extend(cache[ id ], name);=0A=
			}=0A=
		}=0A=
=0A=
		thisCache =3D cache[ id ];=0A=
=0A=
		// Internal jQuery data is stored in a separate object inside the =
object's data=0A=
		// cache in order to avoid key collisions between internal data and =
user-defined=0A=
		// data=0A=
		if ( pvt ) {=0A=
			if ( !thisCache[ internalKey ] ) {=0A=
				thisCache[ internalKey ] =3D {};=0A=
			}=0A=
=0A=
			thisCache =3D thisCache[ internalKey ];=0A=
		}=0A=
=0A=
		if ( data !=3D=3D undefined ) {=0A=
			thisCache[ name ] =3D data;=0A=
		}=0A=
=0A=
		// TODO: This is a hack for 1.5 ONLY. It will be removed in 1.6. Users =
should=0A=
		// not attempt to inspect the internal events object using =
jQuery.data, as this=0A=
		// internal data object is undocumented and subject to change.=0A=
		if ( name =3D=3D=3D "events" && !thisCache[name] ) {=0A=
			return thisCache[ internalKey ] && thisCache[ internalKey ].events;=0A=
		}=0A=
=0A=
		return getByName ? thisCache[ name ] : thisCache;=0A=
	},=0A=
=0A=
	removeData: function( elem, name, pvt /* Internal Use Only */ ) {=0A=
		if ( !jQuery.acceptData( elem ) ) {=0A=
			return;=0A=
		}=0A=
=0A=
		var internalKey =3D jQuery.expando, isNode =3D elem.nodeType,=0A=
=0A=
			// See jQuery.data for more information=0A=
			cache =3D isNode ? jQuery.cache : elem,=0A=
=0A=
			// See jQuery.data for more information=0A=
			id =3D isNode ? elem[ jQuery.expando ] : jQuery.expando;=0A=
=0A=
		// If there is already no cache entry for this object, there is no=0A=
		// purpose in continuing=0A=
		if ( !cache[ id ] ) {=0A=
			return;=0A=
		}=0A=
=0A=
		if ( name ) {=0A=
			var thisCache =3D pvt ? cache[ id ][ internalKey ] : cache[ id ];=0A=
=0A=
			if ( thisCache ) {=0A=
				delete thisCache[ name ];=0A=
=0A=
				// If there is no data left in the cache, we want to continue=0A=
				// and let the cache object itself get destroyed=0A=
				if ( !isEmptyDataObject(thisCache) ) {=0A=
					return;=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		// See jQuery.data for more information=0A=
		if ( pvt ) {=0A=
			delete cache[ id ][ internalKey ];=0A=
=0A=
			// Don't destroy the parent cache unless the internal data object=0A=
			// had been the only thing left in it=0A=
			if ( !isEmptyDataObject(cache[ id ]) ) {=0A=
				return;=0A=
			}=0A=
		}=0A=
=0A=
		var internalCache =3D cache[ id ][ internalKey ];=0A=
=0A=
		// Browsers that fail expando deletion also refuse to delete expandos =
on=0A=
		// the window, but it will allow it on all other JS objects; other =
browsers=0A=
		// don't care=0A=
		if ( jQuery.support.deleteExpando || cache !=3D window ) {=0A=
			delete cache[ id ];=0A=
		} else {=0A=
			cache[ id ] =3D null;=0A=
		}=0A=
=0A=
		// We destroyed the entire user cache at once because it's faster than=0A=
		// iterating through each key, but we need to continue to persist =
internal=0A=
		// data if it existed=0A=
		if ( internalCache ) {=0A=
			cache[ id ] =3D {};=0A=
			// TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery=0A=
			// metadata on plain JS objects when the object is serialized using=0A=
			// JSON.stringify=0A=
			if ( !isNode ) {=0A=
				cache[ id ].toJSON =3D jQuery.noop;=0A=
			}=0A=
=0A=
			cache[ id ][ internalKey ] =3D internalCache;=0A=
=0A=
		// Otherwise, we need to eliminate the expando on the node to avoid=0A=
		// false lookups in the cache for entries that no longer exist=0A=
		} else if ( isNode ) {=0A=
			// IE does not allow us to delete expando properties from nodes,=0A=
			// nor does it have a removeAttribute function on Document nodes;=0A=
			// we must handle all of these cases=0A=
			if ( jQuery.support.deleteExpando ) {=0A=
				delete elem[ jQuery.expando ];=0A=
			} else if ( elem.removeAttribute ) {=0A=
				elem.removeAttribute( jQuery.expando );=0A=
			} else {=0A=
				elem[ jQuery.expando ] =3D null;=0A=
			}=0A=
		}=0A=
	},=0A=
=0A=
	// For internal use only.=0A=
	_data: function( elem, name, data ) {=0A=
		return jQuery.data( elem, name, data, true );=0A=
	},=0A=
=0A=
	// A method for determining if a DOM node can handle the data expando=0A=
	acceptData: function( elem ) {=0A=
		if ( elem.nodeName ) {=0A=
			var match =3D jQuery.noData[ elem.nodeName.toLowerCase() ];=0A=
=0A=
			if ( match ) {=0A=
				return !(match =3D=3D=3D true || elem.getAttribute("classid") =
!=3D=3D match);=0A=
			}=0A=
		}=0A=
=0A=
		return true;=0A=
	}=0A=
});=0A=
=0A=
jQuery.fn.extend({=0A=
	data: function( key, value ) {=0A=
		var data =3D null;=0A=
=0A=
		if ( typeof key =3D=3D=3D "undefined" ) {=0A=
			if ( this.length ) {=0A=
				data =3D jQuery.data( this[0] );=0A=
=0A=
				if ( this[0].nodeType =3D=3D=3D 1 ) {=0A=
					var attr =3D this[0].attributes, name;=0A=
					for ( var i =3D 0, l =3D attr.length; i < l; i++ ) {=0A=
						name =3D attr[i].name;=0A=
=0A=
						if ( name.indexOf( "data-" ) =3D=3D=3D 0 ) {=0A=
							name =3D name.substr( 5 );=0A=
							dataAttr( this[0], name, data[ name ] );=0A=
						}=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
			return data;=0A=
=0A=
		} else if ( typeof key =3D=3D=3D "object" ) {=0A=
			return this.each(function() {=0A=
				jQuery.data( this, key );=0A=
			});=0A=
		}=0A=
=0A=
		var parts =3D key.split(".");=0A=
		parts[1] =3D parts[1] ? "." + parts[1] : "";=0A=
=0A=
		if ( value =3D=3D=3D undefined ) {=0A=
			data =3D this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);=0A=
=0A=
			// Try to fetch any internally stored data first=0A=
			if ( data =3D=3D=3D undefined && this.length ) {=0A=
				data =3D jQuery.data( this[0], key );=0A=
				data =3D dataAttr( this[0], key, data );=0A=
			}=0A=
=0A=
			return data =3D=3D=3D undefined && parts[1] ?=0A=
				this.data( parts[0] ) :=0A=
				data;=0A=
=0A=
		} else {=0A=
			return this.each(function() {=0A=
				var $this =3D jQuery( this ),=0A=
					args =3D [ parts[0], value ];=0A=
=0A=
				$this.triggerHandler( "setData" + parts[1] + "!", args );=0A=
				jQuery.data( this, key, value );=0A=
				$this.triggerHandler( "changeData" + parts[1] + "!", args );=0A=
			});=0A=
		}=0A=
	},=0A=
=0A=
	removeData: function( key ) {=0A=
		return this.each(function() {=0A=
			jQuery.removeData( this, key );=0A=
		});=0A=
	}=0A=
});=0A=
=0A=
function dataAttr( elem, key, data ) {=0A=
	// If nothing was found internally, try to fetch any=0A=
	// data from the HTML5 data-* attribute=0A=
	if ( data =3D=3D=3D undefined && elem.nodeType =3D=3D=3D 1 ) {=0A=
		data =3D elem.getAttribute( "data-" + key );=0A=
=0A=
		if ( typeof data =3D=3D=3D "string" ) {=0A=
			try {=0A=
				data =3D data =3D=3D=3D "true" ? true :=0A=
				data =3D=3D=3D "false" ? false :=0A=
				data =3D=3D=3D "null" ? null :=0A=
				!jQuery.isNaN( data ) ? parseFloat( data ) :=0A=
					rbrace.test( data ) ? jQuery.parseJSON( data ) :=0A=
					data;=0A=
			} catch( e ) {}=0A=
=0A=
			// Make sure we set the data so it isn't changed later=0A=
			jQuery.data( elem, key, data );=0A=
=0A=
		} else {=0A=
			data =3D undefined;=0A=
		}=0A=
	}=0A=
=0A=
	return data;=0A=
}=0A=
=0A=
// TODO: This is a hack for 1.5 ONLY to allow objects with a single =
toJSON=0A=
// property to be considered empty objects; this property always exists =
in=0A=
// order to make sure JSON.stringify does not expose internal metadata=0A=
function isEmptyDataObject( obj ) {=0A=
	for ( var name in obj ) {=0A=
		if ( name !=3D=3D "toJSON" ) {=0A=
			return false;=0A=
		}=0A=
	}=0A=
=0A=
	return true;=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
jQuery.extend({=0A=
	queue: function( elem, type, data ) {=0A=
		if ( !elem ) {=0A=
			return;=0A=
		}=0A=
=0A=
		type =3D (type || "fx") + "queue";=0A=
		var q =3D jQuery._data( elem, type );=0A=
=0A=
		// Speed up dequeue by getting out quickly if this is just a lookup=0A=
		if ( !data ) {=0A=
			return q || [];=0A=
		}=0A=
=0A=
		if ( !q || jQuery.isArray(data) ) {=0A=
			q =3D jQuery._data( elem, type, jQuery.makeArray(data) );=0A=
=0A=
		} else {=0A=
			q.push( data );=0A=
		}=0A=
=0A=
		return q;=0A=
	},=0A=
=0A=
	dequeue: function( elem, type ) {=0A=
		type =3D type || "fx";=0A=
=0A=
		var queue =3D jQuery.queue( elem, type ),=0A=
			fn =3D queue.shift();=0A=
=0A=
		// If the fx queue is dequeued, always remove the progress sentinel=0A=
		if ( fn =3D=3D=3D "inprogress" ) {=0A=
			fn =3D queue.shift();=0A=
		}=0A=
=0A=
		if ( fn ) {=0A=
			// Add a progress sentinel to prevent the fx queue from being=0A=
			// automatically dequeued=0A=
			if ( type =3D=3D=3D "fx" ) {=0A=
				queue.unshift("inprogress");=0A=
			}=0A=
=0A=
			fn.call(elem, function() {=0A=
				jQuery.dequeue(elem, type);=0A=
			});=0A=
		}=0A=
=0A=
		if ( !queue.length ) {=0A=
			jQuery.removeData( elem, type + "queue", true );=0A=
		}=0A=
	}=0A=
});=0A=
=0A=
jQuery.fn.extend({=0A=
	queue: function( type, data ) {=0A=
		if ( typeof type !=3D=3D "string" ) {=0A=
			data =3D type;=0A=
			type =3D "fx";=0A=
		}=0A=
=0A=
		if ( data =3D=3D=3D undefined ) {=0A=
			return jQuery.queue( this[0], type );=0A=
		}=0A=
		return this.each(function( i ) {=0A=
			var queue =3D jQuery.queue( this, type, data );=0A=
=0A=
			if ( type =3D=3D=3D "fx" && queue[0] !=3D=3D "inprogress" ) {=0A=
				jQuery.dequeue( this, type );=0A=
			}=0A=
		});=0A=
	},=0A=
	dequeue: function( type ) {=0A=
		return this.each(function() {=0A=
			jQuery.dequeue( this, type );=0A=
		});=0A=
	},=0A=
=0A=
	// Based off of the plugin by Clint Helfers, with permission.=0A=
	// http://blindsignals.com/index.php/2009/07/jquery-delay/=0A=
	delay: function( time, type ) {=0A=
		time =3D jQuery.fx ? jQuery.fx.speeds[time] || time : time;=0A=
		type =3D type || "fx";=0A=
=0A=
		return this.queue( type, function() {=0A=
			var elem =3D this;=0A=
			setTimeout(function() {=0A=
				jQuery.dequeue( elem, type );=0A=
			}, time );=0A=
		});=0A=
	},=0A=
=0A=
	clearQueue: function( type ) {=0A=
		return this.queue( type || "fx", [] );=0A=
	}=0A=
});=0A=
=0A=
=0A=
=0A=
=0A=
var rclass =3D /[\n\t\r]/g,=0A=
	rspaces =3D /\s+/,=0A=
	rreturn =3D /\r/g,=0A=
	rspecialurl =3D /^(?:href|src|style)$/,=0A=
	rtype =3D /^(?:button|input)$/i,=0A=
	rfocusable =3D /^(?:button|input|object|select|textarea)$/i,=0A=
	rclickable =3D /^a(?:rea)?$/i,=0A=
	rradiocheck =3D /^(?:radio|checkbox)$/i;=0A=
=0A=
jQuery.props =3D {=0A=
	"for": "htmlFor",=0A=
	"class": "className",=0A=
	readonly: "readOnly",=0A=
	maxlength: "maxLength",=0A=
	cellspacing: "cellSpacing",=0A=
	rowspan: "rowSpan",=0A=
	colspan: "colSpan",=0A=
	tabindex: "tabIndex",=0A=
	usemap: "useMap",=0A=
	frameborder: "frameBorder"=0A=
};=0A=
=0A=
jQuery.fn.extend({=0A=
	attr: function( name, value ) {=0A=
		return jQuery.access( this, name, value, true, jQuery.attr );=0A=
	},=0A=
=0A=
	removeAttr: function( name, fn ) {=0A=
		return this.each(function(){=0A=
			jQuery.attr( this, name, "" );=0A=
			if ( this.nodeType =3D=3D=3D 1 ) {=0A=
				this.removeAttribute( name );=0A=
			}=0A=
		});=0A=
	},=0A=
=0A=
	addClass: function( value ) {=0A=
		if ( jQuery.isFunction(value) ) {=0A=
			return this.each(function(i) {=0A=
				var self =3D jQuery(this);=0A=
				self.addClass( value.call(this, i, self.attr("class")) );=0A=
			});=0A=
		}=0A=
=0A=
		if ( value && typeof value =3D=3D=3D "string" ) {=0A=
			var classNames =3D (value || "").split( rspaces );=0A=
=0A=
			for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
				var elem =3D this[i];=0A=
=0A=
				if ( elem.nodeType =3D=3D=3D 1 ) {=0A=
					if ( !elem.className ) {=0A=
						elem.className =3D value;=0A=
=0A=
					} else {=0A=
						var className =3D " " + elem.className + " ",=0A=
							setClass =3D elem.className;=0A=
=0A=
						for ( var c =3D 0, cl =3D classNames.length; c < cl; c++ ) {=0A=
							if ( className.indexOf( " " + classNames[c] + " " ) < 0 ) {=0A=
								setClass +=3D " " + classNames[c];=0A=
							}=0A=
						}=0A=
						elem.className =3D jQuery.trim( setClass );=0A=
					}=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	removeClass: function( value ) {=0A=
		if ( jQuery.isFunction(value) ) {=0A=
			return this.each(function(i) {=0A=
				var self =3D jQuery(this);=0A=
				self.removeClass( value.call(this, i, self.attr("class")) );=0A=
			});=0A=
		}=0A=
=0A=
		if ( (value && typeof value =3D=3D=3D "string") || value =3D=3D=3D =
undefined ) {=0A=
			var classNames =3D (value || "").split( rspaces );=0A=
=0A=
			for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
				var elem =3D this[i];=0A=
=0A=
				if ( elem.nodeType =3D=3D=3D 1 && elem.className ) {=0A=
					if ( value ) {=0A=
						var className =3D (" " + elem.className + " ").replace(rclass, " =
");=0A=
						for ( var c =3D 0, cl =3D classNames.length; c < cl; c++ ) {=0A=
							className =3D className.replace(" " + classNames[c] + " ", " ");=0A=
						}=0A=
						elem.className =3D jQuery.trim( className );=0A=
=0A=
					} else {=0A=
						elem.className =3D "";=0A=
					}=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	toggleClass: function( value, stateVal ) {=0A=
		var type =3D typeof value,=0A=
			isBool =3D typeof stateVal =3D=3D=3D "boolean";=0A=
=0A=
		if ( jQuery.isFunction( value ) ) {=0A=
			return this.each(function(i) {=0A=
				var self =3D jQuery(this);=0A=
				self.toggleClass( value.call(this, i, self.attr("class"), stateVal), =
stateVal );=0A=
			});=0A=
		}=0A=
=0A=
		return this.each(function() {=0A=
			if ( type =3D=3D=3D "string" ) {=0A=
				// toggle individual class names=0A=
				var className,=0A=
					i =3D 0,=0A=
					self =3D jQuery( this ),=0A=
					state =3D stateVal,=0A=
					classNames =3D value.split( rspaces );=0A=
=0A=
				while ( (className =3D classNames[ i++ ]) ) {=0A=
					// check each className given, space seperated list=0A=
					state =3D isBool ? state : !self.hasClass( className );=0A=
					self[ state ? "addClass" : "removeClass" ]( className );=0A=
				}=0A=
=0A=
			} else if ( type =3D=3D=3D "undefined" || type =3D=3D=3D "boolean" ) {=0A=
				if ( this.className ) {=0A=
					// store className if set=0A=
					jQuery._data( this, "__className__", this.className );=0A=
				}=0A=
=0A=
				// toggle whole className=0A=
				this.className =3D this.className || value =3D=3D=3D false ? "" : =
jQuery._data( this, "__className__" ) || "";=0A=
			}=0A=
		});=0A=
	},=0A=
=0A=
	hasClass: function( selector ) {=0A=
		var className =3D " " + selector + " ";=0A=
		for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
			if ( (" " + this[i].className + " ").replace(rclass, " ").indexOf( =
className ) > -1 ) {=0A=
				return true;=0A=
			}=0A=
		}=0A=
=0A=
		return false;=0A=
	},=0A=
=0A=
	val: function( value ) {=0A=
		if ( !arguments.length ) {=0A=
			var elem =3D this[0];=0A=
=0A=
			if ( elem ) {=0A=
				if ( jQuery.nodeName( elem, "option" ) ) {=0A=
					// attributes.value is undefined in Blackberry 4.7 but=0A=
					// uses .value. See #6932=0A=
					var val =3D elem.attributes.value;=0A=
					return !val || val.specified ? elem.value : elem.text;=0A=
				}=0A=
=0A=
				// We need to handle select boxes special=0A=
				if ( jQuery.nodeName( elem, "select" ) ) {=0A=
					var index =3D elem.selectedIndex,=0A=
						values =3D [],=0A=
						options =3D elem.options,=0A=
						one =3D elem.type =3D=3D=3D "select-one";=0A=
=0A=
					// Nothing was selected=0A=
					if ( index < 0 ) {=0A=
						return null;=0A=
					}=0A=
=0A=
					// Loop through all the selected options=0A=
					for ( var i =3D one ? index : 0, max =3D one ? index + 1 : =
options.length; i < max; i++ ) {=0A=
						var option =3D options[ i ];=0A=
=0A=
						// Don't return options that are disabled or in a disabled optgroup=0A=
						if ( option.selected && (jQuery.support.optDisabled ? =
!option.disabled : option.getAttribute("disabled") =3D=3D=3D null) &&=0A=
								(!option.parentNode.disabled || !jQuery.nodeName( =
option.parentNode, "optgroup" )) ) {=0A=
=0A=
							// Get the specific value for the option=0A=
							value =3D jQuery(option).val();=0A=
=0A=
							// We don't need an array for one selects=0A=
							if ( one ) {=0A=
								return value;=0A=
							}=0A=
=0A=
							// Multi-Selects return an array=0A=
							values.push( value );=0A=
						}=0A=
					}=0A=
=0A=
					// Fixes Bug #2551 -- select.val() broken in IE after form.reset()=0A=
					if ( one && !values.length && options.length ) {=0A=
						return jQuery( options[ index ] ).val();=0A=
					}=0A=
=0A=
					return values;=0A=
				}=0A=
=0A=
				// Handle the case where in Webkit "" is returned instead of "on" if =
a value isn't specified=0A=
				if ( rradiocheck.test( elem.type ) && !jQuery.support.checkOn ) {=0A=
					return elem.getAttribute("value") =3D=3D=3D null ? "on" : =
elem.value;=0A=
				}=0A=
=0A=
				// Everything else, we just grab the value=0A=
				return (elem.value || "").replace(rreturn, "");=0A=
=0A=
			}=0A=
=0A=
			return undefined;=0A=
		}=0A=
=0A=
		var isFunction =3D jQuery.isFunction(value);=0A=
=0A=
		return this.each(function(i) {=0A=
			var self =3D jQuery(this), val =3D value;=0A=
=0A=
			if ( this.nodeType !=3D=3D 1 ) {=0A=
				return;=0A=
			}=0A=
=0A=
			if ( isFunction ) {=0A=
				val =3D value.call(this, i, self.val());=0A=
			}=0A=
=0A=
			// Treat null/undefined as ""; convert numbers to string=0A=
			if ( val =3D=3D null ) {=0A=
				val =3D "";=0A=
			} else if ( typeof val =3D=3D=3D "number" ) {=0A=
				val +=3D "";=0A=
			} else if ( jQuery.isArray(val) ) {=0A=
				val =3D jQuery.map(val, function (value) {=0A=
					return value =3D=3D null ? "" : value + "";=0A=
				});=0A=
			}=0A=
=0A=
			if ( jQuery.isArray(val) && rradiocheck.test( this.type ) ) {=0A=
				this.checked =3D jQuery.inArray( self.val(), val ) >=3D 0;=0A=
=0A=
			} else if ( jQuery.nodeName( this, "select" ) ) {=0A=
				var values =3D jQuery.makeArray(val);=0A=
=0A=
				jQuery( "option", this ).each(function() {=0A=
					this.selected =3D jQuery.inArray( jQuery(this).val(), values ) >=3D =
0;=0A=
				});=0A=
=0A=
				if ( !values.length ) {=0A=
					this.selectedIndex =3D -1;=0A=
				}=0A=
=0A=
			} else {=0A=
				this.value =3D val;=0A=
			}=0A=
		});=0A=
	}=0A=
});=0A=
=0A=
jQuery.extend({=0A=
	attrFn: {=0A=
		val: true,=0A=
		css: true,=0A=
		html: true,=0A=
		text: true,=0A=
		data: true,=0A=
		width: true,=0A=
		height: true,=0A=
		offset: true=0A=
	},=0A=
=0A=
	attr: function( elem, name, value, pass ) {=0A=
		// don't get/set attributes on text, comment and attribute nodes=0A=
		if ( !elem || elem.nodeType =3D=3D=3D 3 || elem.nodeType =3D=3D=3D 8 =
|| elem.nodeType =3D=3D=3D 2 ) {=0A=
			return undefined;=0A=
		}=0A=
=0A=
		if ( pass && name in jQuery.attrFn ) {=0A=
			return jQuery(elem)[name](value);=0A=
		}=0A=
=0A=
		var notxml =3D elem.nodeType !=3D=3D 1 || !jQuery.isXMLDoc( elem ),=0A=
			// Whether we are setting (or getting)=0A=
			set =3D value !=3D=3D undefined;=0A=
=0A=
		// Try to normalize/fix the name=0A=
		name =3D notxml && jQuery.props[ name ] || name;=0A=
=0A=
		// Only do all the following if this is a node (faster for style)=0A=
		if ( elem.nodeType =3D=3D=3D 1 ) {=0A=
			// These attributes require special treatment=0A=
			var special =3D rspecialurl.test( name );=0A=
=0A=
			// Safari mis-reports the default selected property of an option=0A=
			// Accessing the parent's selectedIndex property fixes it=0A=
			if ( name =3D=3D=3D "selected" && !jQuery.support.optSelected ) {=0A=
				var parent =3D elem.parentNode;=0A=
				if ( parent ) {=0A=
					parent.selectedIndex;=0A=
=0A=
					// Make sure that it also works with optgroups, see #5701=0A=
					if ( parent.parentNode ) {=0A=
						parent.parentNode.selectedIndex;=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
			// If applicable, access the attribute via the DOM 0 way=0A=
			// 'in' checks fail in Blackberry 4.7 #6931=0A=
			if ( (name in elem || elem[ name ] !=3D=3D undefined) && notxml && =
!special ) {=0A=
				if ( set ) {=0A=
					// We can't allow the type property to be changed (since it causes =
problems in IE)=0A=
					if ( name =3D=3D=3D "type" && rtype.test( elem.nodeName ) && =
elem.parentNode ) {=0A=
						jQuery.error( "type property can't be changed" );=0A=
					}=0A=
=0A=
					if ( value =3D=3D=3D null ) {=0A=
						if ( elem.nodeType =3D=3D=3D 1 ) {=0A=
							elem.removeAttribute( name );=0A=
						}=0A=
=0A=
					} else {=0A=
						elem[ name ] =3D value;=0A=
					}=0A=
				}=0A=
=0A=
				// browsers index elements by id/name on forms, give priority to =
attributes.=0A=
				if ( jQuery.nodeName( elem, "form" ) && elem.getAttributeNode(name) =
) {=0A=
					return elem.getAttributeNode( name ).nodeValue;=0A=
				}=0A=
=0A=
				// elem.tabIndex doesn't always return the correct value when it =
hasn't been explicitly set=0A=
				// =
http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabi=
ndex-values-with-javascript/=0A=
				if ( name =3D=3D=3D "tabIndex" ) {=0A=
					var attributeNode =3D elem.getAttributeNode( "tabIndex" );=0A=
=0A=
					return attributeNode && attributeNode.specified ?=0A=
						attributeNode.value :=0A=
						rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName =
) && elem.href ?=0A=
							0 :=0A=
							undefined;=0A=
				}=0A=
=0A=
				return elem[ name ];=0A=
			}=0A=
=0A=
			if ( !jQuery.support.style && notxml && name =3D=3D=3D "style" ) {=0A=
				if ( set ) {=0A=
					elem.style.cssText =3D "" + value;=0A=
				}=0A=
=0A=
				return elem.style.cssText;=0A=
			}=0A=
=0A=
			if ( set ) {=0A=
				// convert the value to a string (all browsers do this but IE) see =
#1070=0A=
				elem.setAttribute( name, "" + value );=0A=
			}=0A=
=0A=
			// Ensure that missing attributes return undefined=0A=
			// Blackberry 4.7 returns "" from getAttribute #6938=0A=
			if ( !elem.attributes[ name ] && (elem.hasAttribute && =
!elem.hasAttribute( name )) ) {=0A=
				return undefined;=0A=
			}=0A=
=0A=
			var attr =3D !jQuery.support.hrefNormalized && notxml && special ?=0A=
					// Some attributes require a special call on IE=0A=
					elem.getAttribute( name, 2 ) :=0A=
					elem.getAttribute( name );=0A=
=0A=
			// Non-existent attributes return null, we normalize to undefined=0A=
			return attr =3D=3D=3D null ? undefined : attr;=0A=
		}=0A=
		// Handle everything which isn't a DOM element node=0A=
		if ( set ) {=0A=
			elem[ name ] =3D value;=0A=
		}=0A=
		return elem[ name ];=0A=
	}=0A=
});=0A=
=0A=
=0A=
=0A=
=0A=
var rnamespaces =3D /\.(.*)$/,=0A=
	rformElems =3D /^(?:textarea|input|select)$/i,=0A=
	rperiod =3D /\./g,=0A=
	rspace =3D / /g,=0A=
	rescape =3D /[^\w\s.|`]/g,=0A=
	fcleanup =3D function( nm ) {=0A=
		return nm.replace(rescape, "\\$&");=0A=
	};=0A=
=0A=
/*=0A=
 * A number of helper functions used for managing events.=0A=
 * Many of the ideas behind this code originated from=0A=
 * Dean Edwards' addEvent library.=0A=
 */=0A=
jQuery.event =3D {=0A=
=0A=
	// Bind an event to an element=0A=
	// Original by Dean Edwards=0A=
	add: function( elem, types, handler, data ) {=0A=
		if ( elem.nodeType =3D=3D=3D 3 || elem.nodeType =3D=3D=3D 8 ) {=0A=
			return;=0A=
		}=0A=
=0A=
		// TODO :: Use a try/catch until it's safe to pull this out (likely =
1.6)=0A=
		// Minor release fix for bug #8018=0A=
		try {=0A=
			// For whatever reason, IE has trouble passing the window object=0A=
			// around, causing it to be cloned in the process=0A=
			if ( jQuery.isWindow( elem ) && ( elem !=3D=3D window && =
!elem.frameElement ) ) {=0A=
				elem =3D window;=0A=
			}=0A=
		}=0A=
		catch ( e ) {}=0A=
=0A=
		if ( handler =3D=3D=3D false ) {=0A=
			handler =3D returnFalse;=0A=
		} else if ( !handler ) {=0A=
			// Fixes bug #7229. Fix recommended by jdalton=0A=
			return;=0A=
		}=0A=
=0A=
		var handleObjIn, handleObj;=0A=
=0A=
		if ( handler.handler ) {=0A=
			handleObjIn =3D handler;=0A=
			handler =3D handleObjIn.handler;=0A=
		}=0A=
=0A=
		// Make sure that the function being executed has a unique ID=0A=
		if ( !handler.guid ) {=0A=
			handler.guid =3D jQuery.guid++;=0A=
		}=0A=
=0A=
		// Init the element's event structure=0A=
		var elemData =3D jQuery._data( elem );=0A=
=0A=
		// If no elemData is found then we must be trying to bind to one of the=0A=
		// banned noData elements=0A=
		if ( !elemData ) {=0A=
			return;=0A=
		}=0A=
=0A=
		var events =3D elemData.events,=0A=
			eventHandle =3D elemData.handle;=0A=
=0A=
		if ( !events ) {=0A=
			elemData.events =3D events =3D {};=0A=
		}=0A=
=0A=
		if ( !eventHandle ) {=0A=
			elemData.handle =3D eventHandle =3D function( e ) {=0A=
				// Handle the second event of a trigger and when=0A=
				// an event is called after a page has unloaded=0A=
				return typeof jQuery !=3D=3D "undefined" && jQuery.event.triggered =
!=3D=3D e.type ?=0A=
					jQuery.event.handle.apply( eventHandle.elem, arguments ) :=0A=
					undefined;=0A=
			};=0A=
		}=0A=
=0A=
		// Add elem as a property of the handle function=0A=
		// This is to prevent a memory leak with non-native events in IE.=0A=
		eventHandle.elem =3D elem;=0A=
=0A=
		// Handle multiple events separated by a space=0A=
		// jQuery(...).bind("mouseover mouseout", fn);=0A=
		types =3D types.split(" ");=0A=
=0A=
		var type, i =3D 0, namespaces;=0A=
=0A=
		while ( (type =3D types[ i++ ]) ) {=0A=
			handleObj =3D handleObjIn ?=0A=
				jQuery.extend({}, handleObjIn) :=0A=
				{ handler: handler, data: data };=0A=
=0A=
			// Namespaced event handlers=0A=
			if ( type.indexOf(".") > -1 ) {=0A=
				namespaces =3D type.split(".");=0A=
				type =3D namespaces.shift();=0A=
				handleObj.namespace =3D namespaces.slice(0).sort().join(".");=0A=
=0A=
			} else {=0A=
				namespaces =3D [];=0A=
				handleObj.namespace =3D "";=0A=
			}=0A=
=0A=
			handleObj.type =3D type;=0A=
			if ( !handleObj.guid ) {=0A=
				handleObj.guid =3D handler.guid;=0A=
			}=0A=
=0A=
			// Get the current list of functions bound to this event=0A=
			var handlers =3D events[ type ],=0A=
				special =3D jQuery.event.special[ type ] || {};=0A=
=0A=
			// Init the event handler queue=0A=
			if ( !handlers ) {=0A=
				handlers =3D events[ type ] =3D [];=0A=
=0A=
				// Check for a special event handler=0A=
				// Only use addEventListener/attachEvent if the special=0A=
				// events handler returns false=0A=
				if ( !special.setup || special.setup.call( elem, data, namespaces, =
eventHandle ) =3D=3D=3D false ) {=0A=
					// Bind the global event handler to the element=0A=
					if ( elem.addEventListener ) {=0A=
						elem.addEventListener( type, eventHandle, false );=0A=
=0A=
					} else if ( elem.attachEvent ) {=0A=
						elem.attachEvent( "on" + type, eventHandle );=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
			if ( special.add ) {=0A=
				special.add.call( elem, handleObj );=0A=
=0A=
				if ( !handleObj.handler.guid ) {=0A=
					handleObj.handler.guid =3D handler.guid;=0A=
				}=0A=
			}=0A=
=0A=
			// Add the function to the element's handler list=0A=
			handlers.push( handleObj );=0A=
=0A=
			// Keep track of which events have been used, for global triggering=0A=
			jQuery.event.global[ type ] =3D true;=0A=
		}=0A=
=0A=
		// Nullify elem to prevent memory leaks in IE=0A=
		elem =3D null;=0A=
	},=0A=
=0A=
	global: {},=0A=
=0A=
	// Detach an event or set of events from an element=0A=
	remove: function( elem, types, handler, pos ) {=0A=
		// don't do events on text and comment nodes=0A=
		if ( elem.nodeType =3D=3D=3D 3 || elem.nodeType =3D=3D=3D 8 ) {=0A=
			return;=0A=
		}=0A=
=0A=
		if ( handler =3D=3D=3D false ) {=0A=
			handler =3D returnFalse;=0A=
		}=0A=
=0A=
		var ret, type, fn, j, i =3D 0, all, namespaces, namespace, special, =
eventType, handleObj, origType,=0A=
			elemData =3D jQuery.hasData( elem ) && jQuery._data( elem ),=0A=
			events =3D elemData && elemData.events;=0A=
=0A=
		if ( !elemData || !events ) {=0A=
			return;=0A=
		}=0A=
=0A=
		// types is actually an event object here=0A=
		if ( types && types.type ) {=0A=
			handler =3D types.handler;=0A=
			types =3D types.type;=0A=
		}=0A=
=0A=
		// Unbind all events for the element=0A=
		if ( !types || typeof types =3D=3D=3D "string" && types.charAt(0) =
=3D=3D=3D "." ) {=0A=
			types =3D types || "";=0A=
=0A=
			for ( type in events ) {=0A=
				jQuery.event.remove( elem, type + types );=0A=
			}=0A=
=0A=
			return;=0A=
		}=0A=
=0A=
		// Handle multiple events separated by a space=0A=
		// jQuery(...).unbind("mouseover mouseout", fn);=0A=
		types =3D types.split(" ");=0A=
=0A=
		while ( (type =3D types[ i++ ]) ) {=0A=
			origType =3D type;=0A=
			handleObj =3D null;=0A=
			all =3D type.indexOf(".") < 0;=0A=
			namespaces =3D [];=0A=
=0A=
			if ( !all ) {=0A=
				// Namespaced event handlers=0A=
				namespaces =3D type.split(".");=0A=
				type =3D namespaces.shift();=0A=
=0A=
				namespace =3D new RegExp("(^|\\.)" +=0A=
					jQuery.map( namespaces.slice(0).sort(), fcleanup =
).join("\\.(?:.*\\.)?") + "(\\.|$)");=0A=
			}=0A=
=0A=
			eventType =3D events[ type ];=0A=
=0A=
			if ( !eventType ) {=0A=
				continue;=0A=
			}=0A=
=0A=
			if ( !handler ) {=0A=
				for ( j =3D 0; j < eventType.length; j++ ) {=0A=
					handleObj =3D eventType[ j ];=0A=
=0A=
					if ( all || namespace.test( handleObj.namespace ) ) {=0A=
						jQuery.event.remove( elem, origType, handleObj.handler, j );=0A=
						eventType.splice( j--, 1 );=0A=
					}=0A=
				}=0A=
=0A=
				continue;=0A=
			}=0A=
=0A=
			special =3D jQuery.event.special[ type ] || {};=0A=
=0A=
			for ( j =3D pos || 0; j < eventType.length; j++ ) {=0A=
				handleObj =3D eventType[ j ];=0A=
=0A=
				if ( handler.guid =3D=3D=3D handleObj.guid ) {=0A=
					// remove the given handler for the given type=0A=
					if ( all || namespace.test( handleObj.namespace ) ) {=0A=
						if ( pos =3D=3D null ) {=0A=
							eventType.splice( j--, 1 );=0A=
						}=0A=
=0A=
						if ( special.remove ) {=0A=
							special.remove.call( elem, handleObj );=0A=
						}=0A=
					}=0A=
=0A=
					if ( pos !=3D null ) {=0A=
						break;=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
			// remove generic event handler if no more handlers exist=0A=
			if ( eventType.length =3D=3D=3D 0 || pos !=3D null && =
eventType.length =3D=3D=3D 1 ) {=0A=
				if ( !special.teardown || special.teardown.call( elem, namespaces ) =
=3D=3D=3D false ) {=0A=
					jQuery.removeEvent( elem, type, elemData.handle );=0A=
				}=0A=
=0A=
				ret =3D null;=0A=
				delete events[ type ];=0A=
			}=0A=
		}=0A=
=0A=
		// Remove the expando if it's no longer used=0A=
		if ( jQuery.isEmptyObject( events ) ) {=0A=
			var handle =3D elemData.handle;=0A=
			if ( handle ) {=0A=
				handle.elem =3D null;=0A=
			}=0A=
=0A=
			delete elemData.events;=0A=
			delete elemData.handle;=0A=
=0A=
			if ( jQuery.isEmptyObject( elemData ) ) {=0A=
				jQuery.removeData( elem, undefined, true );=0A=
			}=0A=
		}=0A=
	},=0A=
=0A=
	// bubbling is internal=0A=
	trigger: function( event, data, elem /*, bubbling */ ) {=0A=
		// Event object or event type=0A=
		var type =3D event.type || event,=0A=
			bubbling =3D arguments[3];=0A=
=0A=
		if ( !bubbling ) {=0A=
			event =3D typeof event =3D=3D=3D "object" ?=0A=
				// jQuery.Event object=0A=
				event[ jQuery.expando ] ? event :=0A=
				// Object literal=0A=
				jQuery.extend( jQuery.Event(type), event ) :=0A=
				// Just the event type (string)=0A=
				jQuery.Event(type);=0A=
=0A=
			if ( type.indexOf("!") >=3D 0 ) {=0A=
				event.type =3D type =3D type.slice(0, -1);=0A=
				event.exclusive =3D true;=0A=
			}=0A=
=0A=
			// Handle a global trigger=0A=
			if ( !elem ) {=0A=
				// Don't bubble custom events when global (to avoid too much =
overhead)=0A=
				event.stopPropagation();=0A=
=0A=
				// Only trigger if we've ever bound an event for it=0A=
				if ( jQuery.event.global[ type ] ) {=0A=
					// XXX This code smells terrible. event.js should not be directly=0A=
					// inspecting the data cache=0A=
					jQuery.each( jQuery.cache, function() {=0A=
						// internalKey variable is just used to make it easier to find=0A=
						// and potentially change this stuff later; currently it just=0A=
						// points to jQuery.expando=0A=
						var internalKey =3D jQuery.expando,=0A=
							internalCache =3D this[ internalKey ];=0A=
						if ( internalCache && internalCache.events && =
internalCache.events[ type ] ) {=0A=
							jQuery.event.trigger( event, data, internalCache.handle.elem );=0A=
						}=0A=
					});=0A=
				}=0A=
			}=0A=
=0A=
			// Handle triggering a single element=0A=
=0A=
			// don't do events on text and comment nodes=0A=
			if ( !elem || elem.nodeType =3D=3D=3D 3 || elem.nodeType =3D=3D=3D 8 =
) {=0A=
				return undefined;=0A=
			}=0A=
=0A=
			// Clean up in case it is reused=0A=
			event.result =3D undefined;=0A=
			event.target =3D elem;=0A=
=0A=
			// Clone the incoming data, if any=0A=
			data =3D jQuery.makeArray( data );=0A=
			data.unshift( event );=0A=
		}=0A=
=0A=
		event.currentTarget =3D elem;=0A=
=0A=
		// Trigger the event, it is assumed that "handle" is a function=0A=
		var handle =3D jQuery._data( elem, "handle" );=0A=
=0A=
		if ( handle ) {=0A=
			handle.apply( elem, data );=0A=
		}=0A=
=0A=
		var parent =3D elem.parentNode || elem.ownerDocument;=0A=
=0A=
		// Trigger an inline bound script=0A=
		try {=0A=
			if ( !(elem && elem.nodeName && =
jQuery.noData[elem.nodeName.toLowerCase()]) ) {=0A=
				if ( elem[ "on" + type ] && elem[ "on" + type ].apply( elem, data ) =
=3D=3D=3D false ) {=0A=
					event.result =3D false;=0A=
					event.preventDefault();=0A=
				}=0A=
			}=0A=
=0A=
		// prevent IE from throwing an error for some elements with some event =
types, see #3533=0A=
		} catch (inlineError) {}=0A=
=0A=
		if ( !event.isPropagationStopped() && parent ) {=0A=
			jQuery.event.trigger( event, data, parent, true );=0A=
=0A=
		} else if ( !event.isDefaultPrevented() ) {=0A=
			var old,=0A=
				target =3D event.target,=0A=
				targetType =3D type.replace( rnamespaces, "" ),=0A=
				isClick =3D jQuery.nodeName( target, "a" ) && targetType =3D=3D=3D =
"click",=0A=
				special =3D jQuery.event.special[ targetType ] || {};=0A=
=0A=
			if ( (!special._default || special._default.call( elem, event ) =
=3D=3D=3D false) &&=0A=
				!isClick && !(target && target.nodeName && =
jQuery.noData[target.nodeName.toLowerCase()]) ) {=0A=
=0A=
				try {=0A=
					if ( target[ targetType ] ) {=0A=
						// Make sure that we don't accidentally re-trigger the onFOO events=0A=
						old =3D target[ "on" + targetType ];=0A=
=0A=
						if ( old ) {=0A=
							target[ "on" + targetType ] =3D null;=0A=
						}=0A=
=0A=
						jQuery.event.triggered =3D event.type;=0A=
						target[ targetType ]();=0A=
					}=0A=
=0A=
				// prevent IE from throwing an error for some elements with some =
event types, see #3533=0A=
				} catch (triggerError) {}=0A=
=0A=
				if ( old ) {=0A=
					target[ "on" + targetType ] =3D old;=0A=
				}=0A=
=0A=
				jQuery.event.triggered =3D undefined;=0A=
			}=0A=
		}=0A=
	},=0A=
=0A=
	handle: function( event ) {=0A=
		var all, handlers, namespaces, namespace_re, events,=0A=
			namespace_sort =3D [],=0A=
			args =3D jQuery.makeArray( arguments );=0A=
=0A=
		event =3D args[0] =3D jQuery.event.fix( event || window.event );=0A=
		event.currentTarget =3D this;=0A=
=0A=
		// Namespaced event handlers=0A=
		all =3D event.type.indexOf(".") < 0 && !event.exclusive;=0A=
=0A=
		if ( !all ) {=0A=
			namespaces =3D event.type.split(".");=0A=
			event.type =3D namespaces.shift();=0A=
			namespace_sort =3D namespaces.slice(0).sort();=0A=
			namespace_re =3D new RegExp("(^|\\.)" + =
namespace_sort.join("\\.(?:.*\\.)?") + "(\\.|$)");=0A=
		}=0A=
=0A=
		event.namespace =3D event.namespace || namespace_sort.join(".");=0A=
=0A=
		events =3D jQuery._data(this, "events");=0A=
=0A=
		handlers =3D (events || {})[ event.type ];=0A=
=0A=
		if ( events && handlers ) {=0A=
			// Clone the handlers to prevent manipulation=0A=
			handlers =3D handlers.slice(0);=0A=
=0A=
			for ( var j =3D 0, l =3D handlers.length; j < l; j++ ) {=0A=
				var handleObj =3D handlers[ j ];=0A=
=0A=
				// Filter the functions by class=0A=
				if ( all || namespace_re.test( handleObj.namespace ) ) {=0A=
					// Pass in a reference to the handler function itself=0A=
					// So that we can later remove it=0A=
					event.handler =3D handleObj.handler;=0A=
					event.data =3D handleObj.data;=0A=
					event.handleObj =3D handleObj;=0A=
=0A=
					var ret =3D handleObj.handler.apply( this, args );=0A=
=0A=
					if ( ret !=3D=3D undefined ) {=0A=
						event.result =3D ret;=0A=
						if ( ret =3D=3D=3D false ) {=0A=
							event.preventDefault();=0A=
							event.stopPropagation();=0A=
						}=0A=
					}=0A=
=0A=
					if ( event.isImmediatePropagationStopped() ) {=0A=
						break;=0A=
					}=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return event.result;=0A=
	},=0A=
=0A=
	props: "altKey attrChange attrName bubbles button cancelable charCode =
clientX clientY ctrlKey currentTarget data detail eventPhase fromElement =
handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX =
pageY prevValue relatedNode relatedTarget screenX screenY shiftKey =
srcElement target toElement view wheelDelta which".split(" "),=0A=
=0A=
	fix: function( event ) {=0A=
		if ( event[ jQuery.expando ] ) {=0A=
			return event;=0A=
		}=0A=
=0A=
		// store a copy of the original event object=0A=
		// and "clone" to set read-only properties=0A=
		var originalEvent =3D event;=0A=
		event =3D jQuery.Event( originalEvent );=0A=
=0A=
		for ( var i =3D this.props.length, prop; i; ) {=0A=
			prop =3D this.props[ --i ];=0A=
			event[ prop ] =3D originalEvent[ prop ];=0A=
		}=0A=
=0A=
		// Fix target property, if necessary=0A=
		if ( !event.target ) {=0A=
			// Fixes #1925 where srcElement might not be defined either=0A=
			event.target =3D event.srcElement || document;=0A=
		}=0A=
=0A=
		// check if target is a textnode (safari)=0A=
		if ( event.target.nodeType =3D=3D=3D 3 ) {=0A=
			event.target =3D event.target.parentNode;=0A=
		}=0A=
=0A=
		// Add relatedTarget, if necessary=0A=
		if ( !event.relatedTarget && event.fromElement ) {=0A=
			event.relatedTarget =3D event.fromElement =3D=3D=3D event.target ? =
event.toElement : event.fromElement;=0A=
		}=0A=
=0A=
		// Calculate pageX/Y if missing and clientX/Y available=0A=
		if ( event.pageX =3D=3D null && event.clientX !=3D null ) {=0A=
			var doc =3D document.documentElement,=0A=
				body =3D document.body;=0A=
=0A=
			event.pageX =3D event.clientX + (doc && doc.scrollLeft || body && =
body.scrollLeft || 0) - (doc && doc.clientLeft || body && =
body.clientLeft || 0);=0A=
			event.pageY =3D event.clientY + (doc && doc.scrollTop  || body && =
body.scrollTop  || 0) - (doc && doc.clientTop  || body && body.clientTop =
 || 0);=0A=
		}=0A=
=0A=
		// Add which for key events=0A=
		if ( event.which =3D=3D null && (event.charCode !=3D null || =
event.keyCode !=3D null) ) {=0A=
			event.which =3D event.charCode !=3D null ? event.charCode : =
event.keyCode;=0A=
		}=0A=
=0A=
		// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for =
Macs)=0A=
		if ( !event.metaKey && event.ctrlKey ) {=0A=
			event.metaKey =3D event.ctrlKey;=0A=
		}=0A=
=0A=
		// Add which for click: 1 =3D=3D=3D left; 2 =3D=3D=3D middle; 3 =
=3D=3D=3D right=0A=
		// Note: button is not normalized, so don't use it=0A=
		if ( !event.which && event.button !=3D=3D undefined ) {=0A=
			event.which =3D (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( =
event.button & 4 ? 2 : 0 ) ));=0A=
		}=0A=
=0A=
		return event;=0A=
	},=0A=
=0A=
	// Deprecated, use jQuery.guid instead=0A=
	guid: 1E8,=0A=
=0A=
	// Deprecated, use jQuery.proxy instead=0A=
	proxy: jQuery.proxy,=0A=
=0A=
	special: {=0A=
		ready: {=0A=
			// Make sure the ready event is setup=0A=
			setup: jQuery.bindReady,=0A=
			teardown: jQuery.noop=0A=
		},=0A=
=0A=
		live: {=0A=
			add: function( handleObj ) {=0A=
				jQuery.event.add( this,=0A=
					liveConvert( handleObj.origType, handleObj.selector ),=0A=
					jQuery.extend({}, handleObj, {handler: liveHandler, guid: =
handleObj.handler.guid}) );=0A=
			},=0A=
=0A=
			remove: function( handleObj ) {=0A=
				jQuery.event.remove( this, liveConvert( handleObj.origType, =
handleObj.selector ), handleObj );=0A=
			}=0A=
		},=0A=
=0A=
		beforeunload: {=0A=
			setup: function( data, namespaces, eventHandle ) {=0A=
				// We only want to do this special case on windows=0A=
				if ( jQuery.isWindow( this ) ) {=0A=
					this.onbeforeunload =3D eventHandle;=0A=
				}=0A=
			},=0A=
=0A=
			teardown: function( namespaces, eventHandle ) {=0A=
				if ( this.onbeforeunload =3D=3D=3D eventHandle ) {=0A=
					this.onbeforeunload =3D null;=0A=
				}=0A=
			}=0A=
		}=0A=
	}=0A=
};=0A=
=0A=
jQuery.removeEvent =3D document.removeEventListener ?=0A=
	function( elem, type, handle ) {=0A=
		if ( elem.removeEventListener ) {=0A=
			elem.removeEventListener( type, handle, false );=0A=
		}=0A=
	} :=0A=
	function( elem, type, handle ) {=0A=
		if ( elem.detachEvent ) {=0A=
			elem.detachEvent( "on" + type, handle );=0A=
		}=0A=
	};=0A=
=0A=
jQuery.Event =3D function( src ) {=0A=
	// Allow instantiation without the 'new' keyword=0A=
	if ( !this.preventDefault ) {=0A=
		return new jQuery.Event( src );=0A=
	}=0A=
=0A=
	// Event object=0A=
	if ( src && src.type ) {=0A=
		this.originalEvent =3D src;=0A=
		this.type =3D src.type;=0A=
=0A=
		// Events bubbling up the document may have been marked as prevented=0A=
		// by a handler lower down the tree; reflect the correct value.=0A=
		this.isDefaultPrevented =3D (src.defaultPrevented || src.returnValue =
=3D=3D=3D false ||=0A=
			src.getPreventDefault && src.getPreventDefault()) ? returnTrue : =
returnFalse;=0A=
=0A=
	// Event type=0A=
	} else {=0A=
		this.type =3D src;=0A=
	}=0A=
=0A=
	// timeStamp is buggy for some events on Firefox(#3843)=0A=
	// So we won't rely on the native value=0A=
	this.timeStamp =3D jQuery.now();=0A=
=0A=
	// Mark it as fixed=0A=
	this[ jQuery.expando ] =3D true;=0A=
};=0A=
=0A=
function returnFalse() {=0A=
	return false;=0A=
}=0A=
function returnTrue() {=0A=
	return true;=0A=
}=0A=
=0A=
// jQuery.Event is based on DOM3 Events as specified by the ECMAScript =
Language Binding=0A=
// =
http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-bind=
ing.html=0A=
jQuery.Event.prototype =3D {=0A=
	preventDefault: function() {=0A=
		this.isDefaultPrevented =3D returnTrue;=0A=
=0A=
		var e =3D this.originalEvent;=0A=
		if ( !e ) {=0A=
			return;=0A=
		}=0A=
=0A=
		// if preventDefault exists run it on the original event=0A=
		if ( e.preventDefault ) {=0A=
			e.preventDefault();=0A=
=0A=
		// otherwise set the returnValue property of the original event to =
false (IE)=0A=
		} else {=0A=
			e.returnValue =3D false;=0A=
		}=0A=
	},=0A=
	stopPropagation: function() {=0A=
		this.isPropagationStopped =3D returnTrue;=0A=
=0A=
		var e =3D this.originalEvent;=0A=
		if ( !e ) {=0A=
			return;=0A=
		}=0A=
		// if stopPropagation exists run it on the original event=0A=
		if ( e.stopPropagation ) {=0A=
			e.stopPropagation();=0A=
		}=0A=
		// otherwise set the cancelBubble property of the original event to =
true (IE)=0A=
		e.cancelBubble =3D true;=0A=
	},=0A=
	stopImmediatePropagation: function() {=0A=
		this.isImmediatePropagationStopped =3D returnTrue;=0A=
		this.stopPropagation();=0A=
	},=0A=
	isDefaultPrevented: returnFalse,=0A=
	isPropagationStopped: returnFalse,=0A=
	isImmediatePropagationStopped: returnFalse=0A=
};=0A=
=0A=
// Checks if an event happened on an element within another element=0A=
// Used in jQuery.event.special.mouseenter and mouseleave handlers=0A=
var withinElement =3D function( event ) {=0A=
	// Check if mouse(over|out) are still within the same parent element=0A=
	var parent =3D event.relatedTarget;=0A=
=0A=
	// Firefox sometimes assigns relatedTarget a XUL element=0A=
	// which we cannot access the parentNode property of=0A=
	try {=0A=
=0A=
		// Chrome does something similar, the parentNode property=0A=
		// can be accessed but is null.=0A=
		if ( parent && parent !=3D=3D document && !parent.parentNode ) {=0A=
			return;=0A=
		}=0A=
		// Traverse up the tree=0A=
		while ( parent && parent !=3D=3D this ) {=0A=
			parent =3D parent.parentNode;=0A=
		}=0A=
=0A=
		if ( parent !=3D=3D this ) {=0A=
			// set the correct event type=0A=
			event.type =3D event.data;=0A=
=0A=
			// handle event if we actually just moused on to a non sub-element=0A=
			jQuery.event.handle.apply( this, arguments );=0A=
		}=0A=
=0A=
	// assuming we've left the element since we most likely mousedover a =
xul element=0A=
	} catch(e) { }=0A=
},=0A=
=0A=
// In case of event delegation, we only need to rename the event.type,=0A=
// liveHandler will take care of the rest.=0A=
delegate =3D function( event ) {=0A=
	event.type =3D event.data;=0A=
	jQuery.event.handle.apply( this, arguments );=0A=
};=0A=
=0A=
// Create mouseenter and mouseleave events=0A=
jQuery.each({=0A=
	mouseenter: "mouseover",=0A=
	mouseleave: "mouseout"=0A=
}, function( orig, fix ) {=0A=
	jQuery.event.special[ orig ] =3D {=0A=
		setup: function( data ) {=0A=
			jQuery.event.add( this, fix, data && data.selector ? delegate : =
withinElement, orig );=0A=
		},=0A=
		teardown: function( data ) {=0A=
			jQuery.event.remove( this, fix, data && data.selector ? delegate : =
withinElement );=0A=
		}=0A=
	};=0A=
});=0A=
=0A=
// submit delegation=0A=
if ( !jQuery.support.submitBubbles ) {=0A=
=0A=
	jQuery.event.special.submit =3D {=0A=
		setup: function( data, namespaces ) {=0A=
			if ( this.nodeName && this.nodeName.toLowerCase() !=3D=3D "form" ) {=0A=
				jQuery.event.add(this, "click.specialSubmit", function( e ) {=0A=
					var elem =3D e.target,=0A=
						type =3D elem.type;=0A=
=0A=
					if ( (type =3D=3D=3D "submit" || type =3D=3D=3D "image") && jQuery( =
elem ).closest("form").length ) {=0A=
						trigger( "submit", this, arguments );=0A=
					}=0A=
				});=0A=
=0A=
				jQuery.event.add(this, "keypress.specialSubmit", function( e ) {=0A=
					var elem =3D e.target,=0A=
						type =3D elem.type;=0A=
=0A=
					if ( (type =3D=3D=3D "text" || type =3D=3D=3D "password") && =
jQuery( elem ).closest("form").length && e.keyCode =3D=3D=3D 13 ) {=0A=
						trigger( "submit", this, arguments );=0A=
					}=0A=
				});=0A=
=0A=
			} else {=0A=
				return false;=0A=
			}=0A=
		},=0A=
=0A=
		teardown: function( namespaces ) {=0A=
			jQuery.event.remove( this, ".specialSubmit" );=0A=
		}=0A=
	};=0A=
=0A=
}=0A=
=0A=
// change delegation, happens here so we have bind.=0A=
if ( !jQuery.support.changeBubbles ) {=0A=
=0A=
	var changeFilters,=0A=
=0A=
	getVal =3D function( elem ) {=0A=
		var type =3D elem.type, val =3D elem.value;=0A=
=0A=
		if ( type =3D=3D=3D "radio" || type =3D=3D=3D "checkbox" ) {=0A=
			val =3D elem.checked;=0A=
=0A=
		} else if ( type =3D=3D=3D "select-multiple" ) {=0A=
			val =3D elem.selectedIndex > -1 ?=0A=
				jQuery.map( elem.options, function( elem ) {=0A=
					return elem.selected;=0A=
				}).join("-") :=0A=
				"";=0A=
=0A=
		} else if ( elem.nodeName.toLowerCase() =3D=3D=3D "select" ) {=0A=
			val =3D elem.selectedIndex;=0A=
		}=0A=
=0A=
		return val;=0A=
	},=0A=
=0A=
	testChange =3D function testChange( e ) {=0A=
		var elem =3D e.target, data, val;=0A=
=0A=
		if ( !rformElems.test( elem.nodeName ) || elem.readOnly ) {=0A=
			return;=0A=
		}=0A=
=0A=
		data =3D jQuery._data( elem, "_change_data" );=0A=
		val =3D getVal(elem);=0A=
=0A=
		// the current data will be also retrieved by beforeactivate=0A=
		if ( e.type !=3D=3D "focusout" || elem.type !=3D=3D "radio" ) {=0A=
			jQuery._data( elem, "_change_data", val );=0A=
		}=0A=
=0A=
		if ( data =3D=3D=3D undefined || val =3D=3D=3D data ) {=0A=
			return;=0A=
		}=0A=
=0A=
		if ( data !=3D null || val ) {=0A=
			e.type =3D "change";=0A=
			e.liveFired =3D undefined;=0A=
			jQuery.event.trigger( e, arguments[1], elem );=0A=
		}=0A=
	};=0A=
=0A=
	jQuery.event.special.change =3D {=0A=
		filters: {=0A=
			focusout: testChange,=0A=
=0A=
			beforedeactivate: testChange,=0A=
=0A=
			click: function( e ) {=0A=
				var elem =3D e.target, type =3D elem.type;=0A=
=0A=
				if ( type =3D=3D=3D "radio" || type =3D=3D=3D "checkbox" || =
elem.nodeName.toLowerCase() =3D=3D=3D "select" ) {=0A=
					testChange.call( this, e );=0A=
				}=0A=
			},=0A=
=0A=
			// Change has to be called before submit=0A=
			// Keydown will be called before keypress, which is used in =
submit-event delegation=0A=
			keydown: function( e ) {=0A=
				var elem =3D e.target, type =3D elem.type;=0A=
=0A=
				if ( (e.keyCode =3D=3D=3D 13 && elem.nodeName.toLowerCase() !=3D=3D =
"textarea") ||=0A=
					(e.keyCode =3D=3D=3D 32 && (type =3D=3D=3D "checkbox" || type =
=3D=3D=3D "radio")) ||=0A=
					type =3D=3D=3D "select-multiple" ) {=0A=
					testChange.call( this, e );=0A=
				}=0A=
			},=0A=
=0A=
			// Beforeactivate happens also before the previous element is blurred=0A=
			// with this event you can't trigger a change event, but you can store=0A=
			// information=0A=
			beforeactivate: function( e ) {=0A=
				var elem =3D e.target;=0A=
				jQuery._data( elem, "_change_data", getVal(elem) );=0A=
			}=0A=
		},=0A=
=0A=
		setup: function( data, namespaces ) {=0A=
			if ( this.type =3D=3D=3D "file" ) {=0A=
				return false;=0A=
			}=0A=
=0A=
			for ( var type in changeFilters ) {=0A=
				jQuery.event.add( this, type + ".specialChange", changeFilters[type] =
);=0A=
			}=0A=
=0A=
			return rformElems.test( this.nodeName );=0A=
		},=0A=
=0A=
		teardown: function( namespaces ) {=0A=
			jQuery.event.remove( this, ".specialChange" );=0A=
=0A=
			return rformElems.test( this.nodeName );=0A=
		}=0A=
	};=0A=
=0A=
	changeFilters =3D jQuery.event.special.change.filters;=0A=
=0A=
	// Handle when the input is .focus()'d=0A=
	changeFilters.focus =3D changeFilters.beforeactivate;=0A=
}=0A=
=0A=
function trigger( type, elem, args ) {=0A=
	// Piggyback on a donor event to simulate a different one.=0A=
	// Fake originalEvent to avoid donor's stopPropagation, but if the=0A=
	// simulated event prevents default then we do the same on the donor.=0A=
	// Don't pass args or remember liveFired; they apply to the donor event.=0A=
	var event =3D jQuery.extend( {}, args[ 0 ] );=0A=
	event.type =3D type;=0A=
	event.originalEvent =3D {};=0A=
	event.liveFired =3D undefined;=0A=
	jQuery.event.handle.call( elem, event );=0A=
	if ( event.isDefaultPrevented() ) {=0A=
		args[ 0 ].preventDefault();=0A=
	}=0A=
}=0A=
=0A=
// Create "bubbling" focus and blur events=0A=
if ( document.addEventListener ) {=0A=
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix =
) {=0A=
	=0A=
		// Attach a single capturing handler while someone wants =
focusin/focusout=0A=
		var attaches =3D 0;=0A=
		=0A=
		jQuery.event.special[ fix ] =3D {=0A=
			setup: function() {=0A=
				if ( attaches++ =3D=3D=3D 0 ) {=0A=
					document.addEventListener( orig, handler, true );=0A=
				}=0A=
			},=0A=
			teardown: function() {=0A=
				if ( --attaches =3D=3D=3D 0 ) {=0A=
					document.removeEventListener( orig, handler, true );=0A=
				}=0A=
			}=0A=
		};=0A=
=0A=
		function handler( donor ) {=0A=
			// Donor event is always a native one; fix it and switch its type.=0A=
			// Let focusin/out handler cancel the donor focus/blur event.=0A=
			var e =3D jQuery.event.fix( donor );=0A=
			e.type =3D fix;=0A=
			e.originalEvent =3D {};=0A=
			jQuery.event.trigger( e, null, e.target );=0A=
			if ( e.isDefaultPrevented() ) {=0A=
				donor.preventDefault();=0A=
			}=0A=
		}=0A=
	});=0A=
}=0A=
=0A=
jQuery.each(["bind", "one"], function( i, name ) {=0A=
	jQuery.fn[ name ] =3D function( type, data, fn ) {=0A=
		// Handle object literals=0A=
		if ( typeof type =3D=3D=3D "object" ) {=0A=
			for ( var key in type ) {=0A=
				this[ name ](key, data, type[key], fn);=0A=
			}=0A=
			return this;=0A=
		}=0A=
=0A=
		if ( jQuery.isFunction( data ) || data =3D=3D=3D false ) {=0A=
			fn =3D data;=0A=
			data =3D undefined;=0A=
		}=0A=
=0A=
		var handler =3D name =3D=3D=3D "one" ? jQuery.proxy( fn, function( =
event ) {=0A=
			jQuery( this ).unbind( event, handler );=0A=
			return fn.apply( this, arguments );=0A=
		}) : fn;=0A=
=0A=
		if ( type =3D=3D=3D "unload" && name !=3D=3D "one" ) {=0A=
			this.one( type, data, fn );=0A=
=0A=
		} else {=0A=
			for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
				jQuery.event.add( this[i], type, handler, data );=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	};=0A=
});=0A=
=0A=
jQuery.fn.extend({=0A=
	unbind: function( type, fn ) {=0A=
		// Handle object literals=0A=
		if ( typeof type =3D=3D=3D "object" && !type.preventDefault ) {=0A=
			for ( var key in type ) {=0A=
				this.unbind(key, type[key]);=0A=
			}=0A=
=0A=
		} else {=0A=
			for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
				jQuery.event.remove( this[i], type, fn );=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	delegate: function( selector, types, data, fn ) {=0A=
		return this.live( types, data, fn, selector );=0A=
	},=0A=
=0A=
	undelegate: function( selector, types, fn ) {=0A=
		if ( arguments.length =3D=3D=3D 0 ) {=0A=
				return this.unbind( "live" );=0A=
=0A=
		} else {=0A=
			return this.die( types, null, fn, selector );=0A=
		}=0A=
	},=0A=
=0A=
	trigger: function( type, data ) {=0A=
		return this.each(function() {=0A=
			jQuery.event.trigger( type, data, this );=0A=
		});=0A=
	},=0A=
=0A=
	triggerHandler: function( type, data ) {=0A=
		if ( this[0] ) {=0A=
			var event =3D jQuery.Event( type );=0A=
			event.preventDefault();=0A=
			event.stopPropagation();=0A=
			jQuery.event.trigger( event, data, this[0] );=0A=
			return event.result;=0A=
		}=0A=
	},=0A=
=0A=
	toggle: function( fn ) {=0A=
		// Save reference to arguments for access in closure=0A=
		var args =3D arguments,=0A=
			i =3D 1;=0A=
=0A=
		// link all the functions, so any of them can unbind this click handler=0A=
		while ( i < args.length ) {=0A=
			jQuery.proxy( fn, args[ i++ ] );=0A=
		}=0A=
=0A=
		return this.click( jQuery.proxy( fn, function( event ) {=0A=
			// Figure out which function to execute=0A=
			var lastToggle =3D ( jQuery._data( this, "lastToggle" + fn.guid ) || =
0 ) % i;=0A=
			jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );=0A=
=0A=
			// Make sure that clicks stop=0A=
			event.preventDefault();=0A=
=0A=
			// and execute the function=0A=
			return args[ lastToggle ].apply( this, arguments ) || false;=0A=
		}));=0A=
	},=0A=
=0A=
	hover: function( fnOver, fnOut ) {=0A=
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );=0A=
	}=0A=
});=0A=
=0A=
var liveMap =3D {=0A=
	focus: "focusin",=0A=
	blur: "focusout",=0A=
	mouseenter: "mouseover",=0A=
	mouseleave: "mouseout"=0A=
};=0A=
=0A=
jQuery.each(["live", "die"], function( i, name ) {=0A=
	jQuery.fn[ name ] =3D function( types, data, fn, origSelector /* =
Internal Use Only */ ) {=0A=
		var type, i =3D 0, match, namespaces, preType,=0A=
			selector =3D origSelector || this.selector,=0A=
			context =3D origSelector ? this : jQuery( this.context );=0A=
=0A=
		if ( typeof types =3D=3D=3D "object" && !types.preventDefault ) {=0A=
			for ( var key in types ) {=0A=
				context[ name ]( key, data, types[key], selector );=0A=
			}=0A=
=0A=
			return this;=0A=
		}=0A=
=0A=
		if ( jQuery.isFunction( data ) ) {=0A=
			fn =3D data;=0A=
			data =3D undefined;=0A=
		}=0A=
=0A=
		types =3D (types || "").split(" ");=0A=
=0A=
		while ( (type =3D types[ i++ ]) !=3D null ) {=0A=
			match =3D rnamespaces.exec( type );=0A=
			namespaces =3D "";=0A=
=0A=
			if ( match )  {=0A=
				namespaces =3D match[0];=0A=
				type =3D type.replace( rnamespaces, "" );=0A=
			}=0A=
=0A=
			if ( type =3D=3D=3D "hover" ) {=0A=
				types.push( "mouseenter" + namespaces, "mouseleave" + namespaces );=0A=
				continue;=0A=
			}=0A=
=0A=
			preType =3D type;=0A=
=0A=
			if ( type =3D=3D=3D "focus" || type =3D=3D=3D "blur" ) {=0A=
				types.push( liveMap[ type ] + namespaces );=0A=
				type =3D type + namespaces;=0A=
=0A=
			} else {=0A=
				type =3D (liveMap[ type ] || type) + namespaces;=0A=
			}=0A=
=0A=
			if ( name =3D=3D=3D "live" ) {=0A=
				// bind live handler=0A=
				for ( var j =3D 0, l =3D context.length; j < l; j++ ) {=0A=
					jQuery.event.add( context[j], "live." + liveConvert( type, selector =
),=0A=
						{ data: data, selector: selector, handler: fn, origType: type, =
origHandler: fn, preType: preType } );=0A=
				}=0A=
=0A=
			} else {=0A=
				// unbind live handler=0A=
				context.unbind( "live." + liveConvert( type, selector ), fn );=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	};=0A=
});=0A=
=0A=
function liveHandler( event ) {=0A=
	var stop, maxLevel, related, match, handleObj, elem, j, i, l, data, =
close, namespace, ret,=0A=
		elems =3D [],=0A=
		selectors =3D [],=0A=
		events =3D jQuery._data( this, "events" );=0A=
=0A=
	// Make sure we avoid non-left-click bubbling in Firefox (#3861) and =
disabled elements in IE (#6911)=0A=
	if ( event.liveFired =3D=3D=3D this || !events || !events.live || =
event.target.disabled || event.button && event.type =3D=3D=3D "click" ) {=0A=
		return;=0A=
	}=0A=
=0A=
	if ( event.namespace ) {=0A=
		namespace =3D new RegExp("(^|\\.)" + =
event.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)");=0A=
	}=0A=
=0A=
	event.liveFired =3D this;=0A=
=0A=
	var live =3D events.live.slice(0);=0A=
=0A=
	for ( j =3D 0; j < live.length; j++ ) {=0A=
		handleObj =3D live[j];=0A=
=0A=
		if ( handleObj.origType.replace( rnamespaces, "" ) =3D=3D=3D =
event.type ) {=0A=
			selectors.push( handleObj.selector );=0A=
=0A=
		} else {=0A=
			live.splice( j--, 1 );=0A=
		}=0A=
	}=0A=
=0A=
	match =3D jQuery( event.target ).closest( selectors, =
event.currentTarget );=0A=
=0A=
	for ( i =3D 0, l =3D match.length; i < l; i++ ) {=0A=
		close =3D match[i];=0A=
=0A=
		for ( j =3D 0; j < live.length; j++ ) {=0A=
			handleObj =3D live[j];=0A=
=0A=
			if ( close.selector =3D=3D=3D handleObj.selector && (!namespace || =
namespace.test( handleObj.namespace )) && !close.elem.disabled ) {=0A=
				elem =3D close.elem;=0A=
				related =3D null;=0A=
=0A=
				// Those two events require additional checking=0A=
				if ( handleObj.preType =3D=3D=3D "mouseenter" || handleObj.preType =
=3D=3D=3D "mouseleave" ) {=0A=
					event.type =3D handleObj.preType;=0A=
					related =3D jQuery( event.relatedTarget ).closest( =
handleObj.selector )[0];=0A=
				}=0A=
=0A=
				if ( !related || related !=3D=3D elem ) {=0A=
					elems.push({ elem: elem, handleObj: handleObj, level: close.level =
});=0A=
				}=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	for ( i =3D 0, l =3D elems.length; i < l; i++ ) {=0A=
		match =3D elems[i];=0A=
=0A=
		if ( maxLevel && match.level > maxLevel ) {=0A=
			break;=0A=
		}=0A=
=0A=
		event.currentTarget =3D match.elem;=0A=
		event.data =3D match.handleObj.data;=0A=
		event.handleObj =3D match.handleObj;=0A=
=0A=
		ret =3D match.handleObj.origHandler.apply( match.elem, arguments );=0A=
=0A=
		if ( ret =3D=3D=3D false || event.isPropagationStopped() ) {=0A=
			maxLevel =3D match.level;=0A=
=0A=
			if ( ret =3D=3D=3D false ) {=0A=
				stop =3D false;=0A=
			}=0A=
			if ( event.isImmediatePropagationStopped() ) {=0A=
				break;=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	return stop;=0A=
}=0A=
=0A=
function liveConvert( type, selector ) {=0A=
	return (type && type !=3D=3D "*" ? type + "." : "") + =
selector.replace(rperiod, "`").replace(rspace, "&");=0A=
}=0A=
=0A=
jQuery.each( ("blur focus focusin focusout load resize scroll unload =
click dblclick " +=0A=
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " =
+=0A=
	"change select submit keydown keypress keyup error").split(" "), =
function( i, name ) {=0A=
=0A=
	// Handle event binding=0A=
	jQuery.fn[ name ] =3D function( data, fn ) {=0A=
		if ( fn =3D=3D null ) {=0A=
			fn =3D data;=0A=
			data =3D null;=0A=
		}=0A=
=0A=
		return arguments.length > 0 ?=0A=
			this.bind( name, data, fn ) :=0A=
			this.trigger( name );=0A=
	};=0A=
=0A=
	if ( jQuery.attrFn ) {=0A=
		jQuery.attrFn[ name ] =3D true;=0A=
	}=0A=
});=0A=
=0A=
=0A=
/*!=0A=
 * Sizzle CSS Selector Engine=0A=
 *  Copyright 2011, The Dojo Foundation=0A=
 *  Released under the MIT, BSD, and GPL Licenses.=0A=
 *  More information: http://sizzlejs.com/=0A=
 */=0A=
(function(){=0A=
=0A=
var chunker =3D =
/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"=
]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,=0A=
	done =3D 0,=0A=
	toString =3D Object.prototype.toString,=0A=
	hasDuplicate =3D false,=0A=
	baseHasDuplicate =3D true,=0A=
	rBackslash =3D /\\/g,=0A=
	rNonWord =3D /\W/;=0A=
=0A=
// Here we check if the JavaScript engine is using some sort of=0A=
// optimization where it does not always call our comparision=0A=
// function. If that is the case, discard the hasDuplicate value.=0A=
//   Thus far that includes Google Chrome.=0A=
[0, 0].sort(function() {=0A=
	baseHasDuplicate =3D false;=0A=
	return 0;=0A=
});=0A=
=0A=
var Sizzle =3D function( selector, context, results, seed ) {=0A=
	results =3D results || [];=0A=
	context =3D context || document;=0A=
=0A=
	var origContext =3D context;=0A=
=0A=
	if ( context.nodeType !=3D=3D 1 && context.nodeType !=3D=3D 9 ) {=0A=
		return [];=0A=
	}=0A=
	=0A=
	if ( !selector || typeof selector !=3D=3D "string" ) {=0A=
		return results;=0A=
	}=0A=
=0A=
	var m, set, checkSet, extra, ret, cur, pop, i,=0A=
		prune =3D true,=0A=
		contextXML =3D Sizzle.isXML( context ),=0A=
		parts =3D [],=0A=
		soFar =3D selector;=0A=
	=0A=
	// Reset the position of the chunker regexp (start from head)=0A=
	do {=0A=
		chunker.exec( "" );=0A=
		m =3D chunker.exec( soFar );=0A=
=0A=
		if ( m ) {=0A=
			soFar =3D m[3];=0A=
		=0A=
			parts.push( m[1] );=0A=
		=0A=
			if ( m[2] ) {=0A=
				extra =3D m[3];=0A=
				break;=0A=
			}=0A=
		}=0A=
	} while ( m );=0A=
=0A=
	if ( parts.length > 1 && origPOS.exec( selector ) ) {=0A=
=0A=
		if ( parts.length =3D=3D=3D 2 && Expr.relative[ parts[0] ] ) {=0A=
			set =3D posProcess( parts[0] + parts[1], context );=0A=
=0A=
		} else {=0A=
			set =3D Expr.relative[ parts[0] ] ?=0A=
				[ context ] :=0A=
				Sizzle( parts.shift(), context );=0A=
=0A=
			while ( parts.length ) {=0A=
				selector =3D parts.shift();=0A=
=0A=
				if ( Expr.relative[ selector ] ) {=0A=
					selector +=3D parts.shift();=0A=
				}=0A=
				=0A=
				set =3D posProcess( selector, set );=0A=
			}=0A=
		}=0A=
=0A=
	} else {=0A=
		// Take a shortcut and set the context if the root selector is an ID=0A=
		// (but not if it'll be faster if the inner selector is an ID)=0A=
		if ( !seed && parts.length > 1 && context.nodeType =3D=3D=3D 9 && =
!contextXML &&=0A=
				Expr.match.ID.test(parts[0]) && =
!Expr.match.ID.test(parts[parts.length - 1]) ) {=0A=
=0A=
			ret =3D Sizzle.find( parts.shift(), context, contextXML );=0A=
			context =3D ret.expr ?=0A=
				Sizzle.filter( ret.expr, ret.set )[0] :=0A=
				ret.set[0];=0A=
		}=0A=
=0A=
		if ( context ) {=0A=
			ret =3D seed ?=0A=
				{ expr: parts.pop(), set: makeArray(seed) } :=0A=
				Sizzle.find( parts.pop(), parts.length =3D=3D=3D 1 && (parts[0] =
=3D=3D=3D "~" || parts[0] =3D=3D=3D "+") && context.parentNode ? =
context.parentNode : context, contextXML );=0A=
=0A=
			set =3D ret.expr ?=0A=
				Sizzle.filter( ret.expr, ret.set ) :=0A=
				ret.set;=0A=
=0A=
			if ( parts.length > 0 ) {=0A=
				checkSet =3D makeArray( set );=0A=
=0A=
			} else {=0A=
				prune =3D false;=0A=
			}=0A=
=0A=
			while ( parts.length ) {=0A=
				cur =3D parts.pop();=0A=
				pop =3D cur;=0A=
=0A=
				if ( !Expr.relative[ cur ] ) {=0A=
					cur =3D "";=0A=
				} else {=0A=
					pop =3D parts.pop();=0A=
				}=0A=
=0A=
				if ( pop =3D=3D null ) {=0A=
					pop =3D context;=0A=
				}=0A=
=0A=
				Expr.relative[ cur ]( checkSet, pop, contextXML );=0A=
			}=0A=
=0A=
		} else {=0A=
			checkSet =3D parts =3D [];=0A=
		}=0A=
	}=0A=
=0A=
	if ( !checkSet ) {=0A=
		checkSet =3D set;=0A=
	}=0A=
=0A=
	if ( !checkSet ) {=0A=
		Sizzle.error( cur || selector );=0A=
	}=0A=
=0A=
	if ( toString.call(checkSet) =3D=3D=3D "[object Array]" ) {=0A=
		if ( !prune ) {=0A=
			results.push.apply( results, checkSet );=0A=
=0A=
		} else if ( context && context.nodeType =3D=3D=3D 1 ) {=0A=
			for ( i =3D 0; checkSet[i] !=3D null; i++ ) {=0A=
				if ( checkSet[i] && (checkSet[i] =3D=3D=3D true || =
checkSet[i].nodeType =3D=3D=3D 1 && Sizzle.contains(context, =
checkSet[i])) ) {=0A=
					results.push( set[i] );=0A=
				}=0A=
			}=0A=
=0A=
		} else {=0A=
			for ( i =3D 0; checkSet[i] !=3D null; i++ ) {=0A=
				if ( checkSet[i] && checkSet[i].nodeType =3D=3D=3D 1 ) {=0A=
					results.push( set[i] );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
	} else {=0A=
		makeArray( checkSet, results );=0A=
	}=0A=
=0A=
	if ( extra ) {=0A=
		Sizzle( extra, origContext, results, seed );=0A=
		Sizzle.uniqueSort( results );=0A=
	}=0A=
=0A=
	return results;=0A=
};=0A=
=0A=
Sizzle.uniqueSort =3D function( results ) {=0A=
	if ( sortOrder ) {=0A=
		hasDuplicate =3D baseHasDuplicate;=0A=
		results.sort( sortOrder );=0A=
=0A=
		if ( hasDuplicate ) {=0A=
			for ( var i =3D 1; i < results.length; i++ ) {=0A=
				if ( results[i] =3D=3D=3D results[ i - 1 ] ) {=0A=
					results.splice( i--, 1 );=0A=
				}=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	return results;=0A=
};=0A=
=0A=
Sizzle.matches =3D function( expr, set ) {=0A=
	return Sizzle( expr, null, null, set );=0A=
};=0A=
=0A=
Sizzle.matchesSelector =3D function( node, expr ) {=0A=
	return Sizzle( expr, null, null, [node] ).length > 0;=0A=
};=0A=
=0A=
Sizzle.find =3D function( expr, context, isXML ) {=0A=
	var set;=0A=
=0A=
	if ( !expr ) {=0A=
		return [];=0A=
	}=0A=
=0A=
	for ( var i =3D 0, l =3D Expr.order.length; i < l; i++ ) {=0A=
		var match,=0A=
			type =3D Expr.order[i];=0A=
		=0A=
		if ( (match =3D Expr.leftMatch[ type ].exec( expr )) ) {=0A=
			var left =3D match[1];=0A=
			match.splice( 1, 1 );=0A=
=0A=
			if ( left.substr( left.length - 1 ) !=3D=3D "\\" ) {=0A=
				match[1] =3D (match[1] || "").replace( rBackslash, "" );=0A=
				set =3D Expr.find[ type ]( match, context, isXML );=0A=
=0A=
				if ( set !=3D null ) {=0A=
					expr =3D expr.replace( Expr.match[ type ], "" );=0A=
					break;=0A=
				}=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	if ( !set ) {=0A=
		set =3D typeof context.getElementsByTagName !=3D=3D "undefined" ?=0A=
			context.getElementsByTagName( "*" ) :=0A=
			[];=0A=
	}=0A=
=0A=
	return { set: set, expr: expr };=0A=
};=0A=
=0A=
Sizzle.filter =3D function( expr, set, inplace, not ) {=0A=
	var match, anyFound,=0A=
		old =3D expr,=0A=
		result =3D [],=0A=
		curLoop =3D set,=0A=
		isXMLFilter =3D set && set[0] && Sizzle.isXML( set[0] );=0A=
=0A=
	while ( expr && set.length ) {=0A=
		for ( var type in Expr.filter ) {=0A=
			if ( (match =3D Expr.leftMatch[ type ].exec( expr )) !=3D null && =
match[2] ) {=0A=
				var found, item,=0A=
					filter =3D Expr.filter[ type ],=0A=
					left =3D match[1];=0A=
=0A=
				anyFound =3D false;=0A=
=0A=
				match.splice(1,1);=0A=
=0A=
				if ( left.substr( left.length - 1 ) =3D=3D=3D "\\" ) {=0A=
					continue;=0A=
				}=0A=
=0A=
				if ( curLoop =3D=3D=3D result ) {=0A=
					result =3D [];=0A=
				}=0A=
=0A=
				if ( Expr.preFilter[ type ] ) {=0A=
					match =3D Expr.preFilter[ type ]( match, curLoop, inplace, result, =
not, isXMLFilter );=0A=
=0A=
					if ( !match ) {=0A=
						anyFound =3D found =3D true;=0A=
=0A=
					} else if ( match =3D=3D=3D true ) {=0A=
						continue;=0A=
					}=0A=
				}=0A=
=0A=
				if ( match ) {=0A=
					for ( var i =3D 0; (item =3D curLoop[i]) !=3D null; i++ ) {=0A=
						if ( item ) {=0A=
							found =3D filter( item, match, i, curLoop );=0A=
							var pass =3D not ^ !!found;=0A=
=0A=
							if ( inplace && found !=3D null ) {=0A=
								if ( pass ) {=0A=
									anyFound =3D true;=0A=
=0A=
								} else {=0A=
									curLoop[i] =3D false;=0A=
								}=0A=
=0A=
							} else if ( pass ) {=0A=
								result.push( item );=0A=
								anyFound =3D true;=0A=
							}=0A=
						}=0A=
					}=0A=
				}=0A=
=0A=
				if ( found !=3D=3D undefined ) {=0A=
					if ( !inplace ) {=0A=
						curLoop =3D result;=0A=
					}=0A=
=0A=
					expr =3D expr.replace( Expr.match[ type ], "" );=0A=
=0A=
					if ( !anyFound ) {=0A=
						return [];=0A=
					}=0A=
=0A=
					break;=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		// Improper expression=0A=
		if ( expr =3D=3D=3D old ) {=0A=
			if ( anyFound =3D=3D null ) {=0A=
				Sizzle.error( expr );=0A=
=0A=
			} else {=0A=
				break;=0A=
			}=0A=
		}=0A=
=0A=
		old =3D expr;=0A=
	}=0A=
=0A=
	return curLoop;=0A=
};=0A=
=0A=
Sizzle.error =3D function( msg ) {=0A=
	throw "Syntax error, unrecognized expression: " + msg;=0A=
};=0A=
=0A=
var Expr =3D Sizzle.selectors =3D {=0A=
	order: [ "ID", "NAME", "TAG" ],=0A=
=0A=
	match: {=0A=
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,=0A=
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,=0A=
		NAME: /\[name=3D['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,=0A=
		ATTR: =
/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=3D)\s*(?:(['"])(.*?)\3|(#?=
(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,=0A=
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,=0A=
		CHILD: =
/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)=
?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,=0A=
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=3D[^\-]|$)/,=0A=
		PSEUDO: =
/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\=
))?/=0A=
	},=0A=
=0A=
	leftMatch: {},=0A=
=0A=
	attrMap: {=0A=
		"class": "className",=0A=
		"for": "htmlFor"=0A=
	},=0A=
=0A=
	attrHandle: {=0A=
		href: function( elem ) {=0A=
			return elem.getAttribute( "href" );=0A=
		},=0A=
		type: function( elem ) {=0A=
			return elem.getAttribute( "type" );=0A=
		}=0A=
	},=0A=
=0A=
	relative: {=0A=
		"+": function(checkSet, part){=0A=
			var isPartStr =3D typeof part =3D=3D=3D "string",=0A=
				isTag =3D isPartStr && !rNonWord.test( part ),=0A=
				isPartStrNotTag =3D isPartStr && !isTag;=0A=
=0A=
			if ( isTag ) {=0A=
				part =3D part.toLowerCase();=0A=
			}=0A=
=0A=
			for ( var i =3D 0, l =3D checkSet.length, elem; i < l; i++ ) {=0A=
				if ( (elem =3D checkSet[i]) ) {=0A=
					while ( (elem =3D elem.previousSibling) && elem.nodeType !=3D=3D 1 =
) {}=0A=
=0A=
					checkSet[i] =3D isPartStrNotTag || elem && =
elem.nodeName.toLowerCase() =3D=3D=3D part ?=0A=
						elem || false :=0A=
						elem =3D=3D=3D part;=0A=
				}=0A=
			}=0A=
=0A=
			if ( isPartStrNotTag ) {=0A=
				Sizzle.filter( part, checkSet, true );=0A=
			}=0A=
		},=0A=
=0A=
		">": function( checkSet, part ) {=0A=
			var elem,=0A=
				isPartStr =3D typeof part =3D=3D=3D "string",=0A=
				i =3D 0,=0A=
				l =3D checkSet.length;=0A=
=0A=
			if ( isPartStr && !rNonWord.test( part ) ) {=0A=
				part =3D part.toLowerCase();=0A=
=0A=
				for ( ; i < l; i++ ) {=0A=
					elem =3D checkSet[i];=0A=
=0A=
					if ( elem ) {=0A=
						var parent =3D elem.parentNode;=0A=
						checkSet[i] =3D parent.nodeName.toLowerCase() =3D=3D=3D part ? =
parent : false;=0A=
					}=0A=
				}=0A=
=0A=
			} else {=0A=
				for ( ; i < l; i++ ) {=0A=
					elem =3D checkSet[i];=0A=
=0A=
					if ( elem ) {=0A=
						checkSet[i] =3D isPartStr ?=0A=
							elem.parentNode :=0A=
							elem.parentNode =3D=3D=3D part;=0A=
					}=0A=
				}=0A=
=0A=
				if ( isPartStr ) {=0A=
					Sizzle.filter( part, checkSet, true );=0A=
				}=0A=
			}=0A=
		},=0A=
=0A=
		"": function(checkSet, part, isXML){=0A=
			var nodeCheck,=0A=
				doneName =3D done++,=0A=
				checkFn =3D dirCheck;=0A=
=0A=
			if ( typeof part =3D=3D=3D "string" && !rNonWord.test( part ) ) {=0A=
				part =3D part.toLowerCase();=0A=
				nodeCheck =3D part;=0A=
				checkFn =3D dirNodeCheck;=0A=
			}=0A=
=0A=
			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );=0A=
		},=0A=
=0A=
		"~": function( checkSet, part, isXML ) {=0A=
			var nodeCheck,=0A=
				doneName =3D done++,=0A=
				checkFn =3D dirCheck;=0A=
=0A=
			if ( typeof part =3D=3D=3D "string" && !rNonWord.test( part ) ) {=0A=
				part =3D part.toLowerCase();=0A=
				nodeCheck =3D part;=0A=
				checkFn =3D dirNodeCheck;=0A=
			}=0A=
=0A=
			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, =
isXML );=0A=
		}=0A=
	},=0A=
=0A=
	find: {=0A=
		ID: function( match, context, isXML ) {=0A=
			if ( typeof context.getElementById !=3D=3D "undefined" && !isXML ) {=0A=
				var m =3D context.getElementById(match[1]);=0A=
				// Check parentNode to catch when Blackberry 4.6 returns=0A=
				// nodes that are no longer in the document #6963=0A=
				return m && m.parentNode ? [m] : [];=0A=
			}=0A=
		},=0A=
=0A=
		NAME: function( match, context ) {=0A=
			if ( typeof context.getElementsByName !=3D=3D "undefined" ) {=0A=
				var ret =3D [],=0A=
					results =3D context.getElementsByName( match[1] );=0A=
=0A=
				for ( var i =3D 0, l =3D results.length; i < l; i++ ) {=0A=
					if ( results[i].getAttribute("name") =3D=3D=3D match[1] ) {=0A=
						ret.push( results[i] );=0A=
					}=0A=
				}=0A=
=0A=
				return ret.length =3D=3D=3D 0 ? null : ret;=0A=
			}=0A=
		},=0A=
=0A=
		TAG: function( match, context ) {=0A=
			if ( typeof context.getElementsByTagName !=3D=3D "undefined" ) {=0A=
				return context.getElementsByTagName( match[1] );=0A=
			}=0A=
		}=0A=
	},=0A=
	preFilter: {=0A=
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {=0A=
			match =3D " " + match[1].replace( rBackslash, "" ) + " ";=0A=
=0A=
			if ( isXML ) {=0A=
				return match;=0A=
			}=0A=
=0A=
			for ( var i =3D 0, elem; (elem =3D curLoop[i]) !=3D null; i++ ) {=0A=
				if ( elem ) {=0A=
					if ( not ^ (elem.className && (" " + elem.className + " =
").replace(/[\t\n\r]/g, " ").indexOf(match) >=3D 0) ) {=0A=
						if ( !inplace ) {=0A=
							result.push( elem );=0A=
						}=0A=
=0A=
					} else if ( inplace ) {=0A=
						curLoop[i] =3D false;=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
			return false;=0A=
		},=0A=
=0A=
		ID: function( match ) {=0A=
			return match[1].replace( rBackslash, "" );=0A=
		},=0A=
=0A=
		TAG: function( match, curLoop ) {=0A=
			return match[1].replace( rBackslash, "" ).toLowerCase();=0A=
		},=0A=
=0A=
		CHILD: function( match ) {=0A=
			if ( match[1] =3D=3D=3D "nth" ) {=0A=
				if ( !match[2] ) {=0A=
					Sizzle.error( match[0] );=0A=
				}=0A=
=0A=
				match[2] =3D match[2].replace(/^\+|\s*/g, '');=0A=
=0A=
				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', =
'-n+6'=0A=
				var test =3D /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(=0A=
					match[2] =3D=3D=3D "even" && "2n" || match[2] =3D=3D=3D "odd" && =
"2n+1" ||=0A=
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);=0A=
=0A=
				// calculate the numbers (first)n+(last) including if they are =
negative=0A=
				match[2] =3D (test[1] + (test[2] || 1)) - 0;=0A=
				match[3] =3D test[3] - 0;=0A=
			}=0A=
			else if ( match[2] ) {=0A=
				Sizzle.error( match[0] );=0A=
			}=0A=
=0A=
			// TODO: Move to normal caching system=0A=
			match[0] =3D done++;=0A=
=0A=
			return match;=0A=
		},=0A=
=0A=
		ATTR: function( match, curLoop, inplace, result, not, isXML ) {=0A=
			var name =3D match[1] =3D match[1].replace( rBackslash, "" );=0A=
			=0A=
			if ( !isXML && Expr.attrMap[name] ) {=0A=
				match[1] =3D Expr.attrMap[name];=0A=
			}=0A=
=0A=
			// Handle if an un-quoted value was used=0A=
			match[4] =3D ( match[4] || match[5] || "" ).replace( rBackslash, "" );=0A=
=0A=
			if ( match[2] =3D=3D=3D "~=3D" ) {=0A=
				match[4] =3D " " + match[4] + " ";=0A=
			}=0A=
=0A=
			return match;=0A=
		},=0A=
=0A=
		PSEUDO: function( match, curLoop, inplace, result, not ) {=0A=
			if ( match[1] =3D=3D=3D "not" ) {=0A=
				// If we're dealing with a complex expression, or a simple one=0A=
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || =
/^\w/.test(match[3]) ) {=0A=
					match[3] =3D Sizzle(match[3], null, null, curLoop);=0A=
=0A=
				} else {=0A=
					var ret =3D Sizzle.filter(match[3], curLoop, inplace, true ^ not);=0A=
=0A=
					if ( !inplace ) {=0A=
						result.push.apply( result, ret );=0A=
					}=0A=
=0A=
					return false;=0A=
				}=0A=
=0A=
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( =
match[0] ) ) {=0A=
				return true;=0A=
			}=0A=
			=0A=
			return match;=0A=
		},=0A=
=0A=
		POS: function( match ) {=0A=
			match.unshift( true );=0A=
=0A=
			return match;=0A=
		}=0A=
	},=0A=
	=0A=
	filters: {=0A=
		enabled: function( elem ) {=0A=
			return elem.disabled =3D=3D=3D false && elem.type !=3D=3D "hidden";=0A=
		},=0A=
=0A=
		disabled: function( elem ) {=0A=
			return elem.disabled =3D=3D=3D true;=0A=
		},=0A=
=0A=
		checked: function( elem ) {=0A=
			return elem.checked =3D=3D=3D true;=0A=
		},=0A=
		=0A=
		selected: function( elem ) {=0A=
			// Accessing this property makes selected-by-default=0A=
			// options in Safari work properly=0A=
			if ( elem.parentNode ) {=0A=
				elem.parentNode.selectedIndex;=0A=
			}=0A=
			=0A=
			return elem.selected =3D=3D=3D true;=0A=
		},=0A=
=0A=
		parent: function( elem ) {=0A=
			return !!elem.firstChild;=0A=
		},=0A=
=0A=
		empty: function( elem ) {=0A=
			return !elem.firstChild;=0A=
		},=0A=
=0A=
		has: function( elem, i, match ) {=0A=
			return !!Sizzle( match[3], elem ).length;=0A=
		},=0A=
=0A=
		header: function( elem ) {=0A=
			return (/h\d/i).test( elem.nodeName );=0A=
		},=0A=
=0A=
		text: function( elem ) {=0A=
			var attr =3D elem.getAttribute( "type" ), type =3D elem.type;=0A=
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types =
(search, etc) =0A=
			// use getAttribute instead to test this case=0A=
			return "text" =3D=3D=3D type && ( attr =3D=3D=3D type || attr =
=3D=3D=3D null );=0A=
		},=0A=
=0A=
		radio: function( elem ) {=0A=
			return "radio" =3D=3D=3D elem.type;=0A=
		},=0A=
=0A=
		checkbox: function( elem ) {=0A=
			return "checkbox" =3D=3D=3D elem.type;=0A=
		},=0A=
=0A=
		file: function( elem ) {=0A=
			return "file" =3D=3D=3D elem.type;=0A=
		},=0A=
		password: function( elem ) {=0A=
			return "password" =3D=3D=3D elem.type;=0A=
		},=0A=
=0A=
		submit: function( elem ) {=0A=
			return "submit" =3D=3D=3D elem.type;=0A=
		},=0A=
=0A=
		image: function( elem ) {=0A=
			return "image" =3D=3D=3D elem.type;=0A=
		},=0A=
=0A=
		reset: function( elem ) {=0A=
			return "reset" =3D=3D=3D elem.type;=0A=
		},=0A=
=0A=
		button: function( elem ) {=0A=
			return "button" =3D=3D=3D elem.type || elem.nodeName.toLowerCase() =
=3D=3D=3D "button";=0A=
		},=0A=
=0A=
		input: function( elem ) {=0A=
			return (/input|select|textarea|button/i).test( elem.nodeName );=0A=
		}=0A=
	},=0A=
	setFilters: {=0A=
		first: function( elem, i ) {=0A=
			return i =3D=3D=3D 0;=0A=
		},=0A=
=0A=
		last: function( elem, i, match, array ) {=0A=
			return i =3D=3D=3D array.length - 1;=0A=
		},=0A=
=0A=
		even: function( elem, i ) {=0A=
			return i % 2 =3D=3D=3D 0;=0A=
		},=0A=
=0A=
		odd: function( elem, i ) {=0A=
			return i % 2 =3D=3D=3D 1;=0A=
		},=0A=
=0A=
		lt: function( elem, i, match ) {=0A=
			return i < match[3] - 0;=0A=
		},=0A=
=0A=
		gt: function( elem, i, match ) {=0A=
			return i > match[3] - 0;=0A=
		},=0A=
=0A=
		nth: function( elem, i, match ) {=0A=
			return match[3] - 0 =3D=3D=3D i;=0A=
		},=0A=
=0A=
		eq: function( elem, i, match ) {=0A=
			return match[3] - 0 =3D=3D=3D i;=0A=
		}=0A=
	},=0A=
	filter: {=0A=
		PSEUDO: function( elem, match, i, array ) {=0A=
			var name =3D match[1],=0A=
				filter =3D Expr.filters[ name ];=0A=
=0A=
			if ( filter ) {=0A=
				return filter( elem, i, match, array );=0A=
=0A=
			} else if ( name =3D=3D=3D "contains" ) {=0A=
				return (elem.textContent || elem.innerText || Sizzle.getText([ elem =
]) || "").indexOf(match[3]) >=3D 0;=0A=
=0A=
			} else if ( name =3D=3D=3D "not" ) {=0A=
				var not =3D match[3];=0A=
=0A=
				for ( var j =3D 0, l =3D not.length; j < l; j++ ) {=0A=
					if ( not[j] =3D=3D=3D elem ) {=0A=
						return false;=0A=
					}=0A=
				}=0A=
=0A=
				return true;=0A=
=0A=
			} else {=0A=
				Sizzle.error( name );=0A=
			}=0A=
		},=0A=
=0A=
		CHILD: function( elem, match ) {=0A=
			var type =3D match[1],=0A=
				node =3D elem;=0A=
=0A=
			switch ( type ) {=0A=
				case "only":=0A=
				case "first":=0A=
					while ( (node =3D node.previousSibling) )	 {=0A=
						if ( node.nodeType =3D=3D=3D 1 ) { =0A=
							return false; =0A=
						}=0A=
					}=0A=
=0A=
					if ( type =3D=3D=3D "first" ) { =0A=
						return true; =0A=
					}=0A=
=0A=
					node =3D elem;=0A=
=0A=
				case "last":=0A=
					while ( (node =3D node.nextSibling) )	 {=0A=
						if ( node.nodeType =3D=3D=3D 1 ) { =0A=
							return false; =0A=
						}=0A=
					}=0A=
=0A=
					return true;=0A=
=0A=
				case "nth":=0A=
					var first =3D match[2],=0A=
						last =3D match[3];=0A=
=0A=
					if ( first =3D=3D=3D 1 && last =3D=3D=3D 0 ) {=0A=
						return true;=0A=
					}=0A=
					=0A=
					var doneName =3D match[0],=0A=
						parent =3D elem.parentNode;=0A=
	=0A=
					if ( parent && (parent.sizcache !=3D=3D doneName || =
!elem.nodeIndex) ) {=0A=
						var count =3D 0;=0A=
						=0A=
						for ( node =3D parent.firstChild; node; node =3D node.nextSibling =
) {=0A=
							if ( node.nodeType =3D=3D=3D 1 ) {=0A=
								node.nodeIndex =3D ++count;=0A=
							}=0A=
						} =0A=
=0A=
						parent.sizcache =3D doneName;=0A=
					}=0A=
					=0A=
					var diff =3D elem.nodeIndex - last;=0A=
=0A=
					if ( first =3D=3D=3D 0 ) {=0A=
						return diff =3D=3D=3D 0;=0A=
=0A=
					} else {=0A=
						return ( diff % first =3D=3D=3D 0 && diff / first >=3D 0 );=0A=
					}=0A=
			}=0A=
		},=0A=
=0A=
		ID: function( elem, match ) {=0A=
			return elem.nodeType =3D=3D=3D 1 && elem.getAttribute("id") =3D=3D=3D =
match;=0A=
		},=0A=
=0A=
		TAG: function( elem, match ) {=0A=
			return (match =3D=3D=3D "*" && elem.nodeType =3D=3D=3D 1) || =
elem.nodeName.toLowerCase() =3D=3D=3D match;=0A=
		},=0A=
		=0A=
		CLASS: function( elem, match ) {=0A=
			return (" " + (elem.className || elem.getAttribute("class")) + " ")=0A=
				.indexOf( match ) > -1;=0A=
		},=0A=
=0A=
		ATTR: function( elem, match ) {=0A=
			var name =3D match[1],=0A=
				result =3D Expr.attrHandle[ name ] ?=0A=
					Expr.attrHandle[ name ]( elem ) :=0A=
					elem[ name ] !=3D null ?=0A=
						elem[ name ] :=0A=
						elem.getAttribute( name ),=0A=
				value =3D result + "",=0A=
				type =3D match[2],=0A=
				check =3D match[4];=0A=
=0A=
			return result =3D=3D null ?=0A=
				type =3D=3D=3D "!=3D" :=0A=
				type =3D=3D=3D "=3D" ?=0A=
				value =3D=3D=3D check :=0A=
				type =3D=3D=3D "*=3D" ?=0A=
				value.indexOf(check) >=3D 0 :=0A=
				type =3D=3D=3D "~=3D" ?=0A=
				(" " + value + " ").indexOf(check) >=3D 0 :=0A=
				!check ?=0A=
				value && result !=3D=3D false :=0A=
				type =3D=3D=3D "!=3D" ?=0A=
				value !=3D=3D check :=0A=
				type =3D=3D=3D "^=3D" ?=0A=
				value.indexOf(check) =3D=3D=3D 0 :=0A=
				type =3D=3D=3D "$=3D" ?=0A=
				value.substr(value.length - check.length) =3D=3D=3D check :=0A=
				type =3D=3D=3D "|=3D" ?=0A=
				value =3D=3D=3D check || value.substr(0, check.length + 1) =3D=3D=3D =
check + "-" :=0A=
				false;=0A=
		},=0A=
=0A=
		POS: function( elem, match, i, array ) {=0A=
			var name =3D match[2],=0A=
				filter =3D Expr.setFilters[ name ];=0A=
=0A=
			if ( filter ) {=0A=
				return filter( elem, i, match, array );=0A=
			}=0A=
		}=0A=
	}=0A=
};=0A=
=0A=
var origPOS =3D Expr.match.POS,=0A=
	fescape =3D function(all, num){=0A=
		return "\\" + (num - 0 + 1);=0A=
	};=0A=
=0A=
for ( var type in Expr.match ) {=0A=
	Expr.match[ type ] =3D new RegExp( Expr.match[ type ].source + =
(/(?![^\[]*\])(?![^\(]*\))/.source) );=0A=
	Expr.leftMatch[ type ] =3D new RegExp( /(^(?:.|\r|\n)*?)/.source + =
Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );=0A=
}=0A=
=0A=
var makeArray =3D function( array, results ) {=0A=
	array =3D Array.prototype.slice.call( array, 0 );=0A=
=0A=
	if ( results ) {=0A=
		results.push.apply( results, array );=0A=
		return results;=0A=
	}=0A=
	=0A=
	return array;=0A=
};=0A=
=0A=
// Perform a simple check to determine if the browser is capable of=0A=
// converting a NodeList to an array using builtin methods.=0A=
// Also verifies that the returned array holds DOM nodes=0A=
// (which is not the case in the Blackberry browser)=0A=
try {=0A=
	Array.prototype.slice.call( document.documentElement.childNodes, 0 =
)[0].nodeType;=0A=
=0A=
// Provide a fallback method if it does not work=0A=
} catch( e ) {=0A=
	makeArray =3D function( array, results ) {=0A=
		var i =3D 0,=0A=
			ret =3D results || [];=0A=
=0A=
		if ( toString.call(array) =3D=3D=3D "[object Array]" ) {=0A=
			Array.prototype.push.apply( ret, array );=0A=
=0A=
		} else {=0A=
			if ( typeof array.length =3D=3D=3D "number" ) {=0A=
				for ( var l =3D array.length; i < l; i++ ) {=0A=
					ret.push( array[i] );=0A=
				}=0A=
=0A=
			} else {=0A=
				for ( ; array[i]; i++ ) {=0A=
					ret.push( array[i] );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return ret;=0A=
	};=0A=
}=0A=
=0A=
var sortOrder, siblingCheck;=0A=
=0A=
if ( document.documentElement.compareDocumentPosition ) {=0A=
	sortOrder =3D function( a, b ) {=0A=
		if ( a =3D=3D=3D b ) {=0A=
			hasDuplicate =3D true;=0A=
			return 0;=0A=
		}=0A=
=0A=
		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {=0A=
			return a.compareDocumentPosition ? -1 : 1;=0A=
		}=0A=
=0A=
		return a.compareDocumentPosition(b) & 4 ? -1 : 1;=0A=
	};=0A=
=0A=
} else {=0A=
	sortOrder =3D function( a, b ) {=0A=
		var al, bl,=0A=
			ap =3D [],=0A=
			bp =3D [],=0A=
			aup =3D a.parentNode,=0A=
			bup =3D b.parentNode,=0A=
			cur =3D aup;=0A=
=0A=
		// The nodes are identical, we can exit early=0A=
		if ( a =3D=3D=3D b ) {=0A=
			hasDuplicate =3D true;=0A=
			return 0;=0A=
=0A=
		// If the nodes are siblings (or identical) we can do a quick check=0A=
		} else if ( aup =3D=3D=3D bup ) {=0A=
			return siblingCheck( a, b );=0A=
=0A=
		// If no parents were found then the nodes are disconnected=0A=
		} else if ( !aup ) {=0A=
			return -1;=0A=
=0A=
		} else if ( !bup ) {=0A=
			return 1;=0A=
		}=0A=
=0A=
		// Otherwise they're somewhere else in the tree so we need=0A=
		// to build up a full list of the parentNodes for comparison=0A=
		while ( cur ) {=0A=
			ap.unshift( cur );=0A=
			cur =3D cur.parentNode;=0A=
		}=0A=
=0A=
		cur =3D bup;=0A=
=0A=
		while ( cur ) {=0A=
			bp.unshift( cur );=0A=
			cur =3D cur.parentNode;=0A=
		}=0A=
=0A=
		al =3D ap.length;=0A=
		bl =3D bp.length;=0A=
=0A=
		// Start walking down the tree looking for a discrepancy=0A=
		for ( var i =3D 0; i < al && i < bl; i++ ) {=0A=
			if ( ap[i] !=3D=3D bp[i] ) {=0A=
				return siblingCheck( ap[i], bp[i] );=0A=
			}=0A=
		}=0A=
=0A=
		// We ended someplace up the tree so do a sibling check=0A=
		return i =3D=3D=3D al ?=0A=
			siblingCheck( a, bp[i], -1 ) :=0A=
			siblingCheck( ap[i], b, 1 );=0A=
	};=0A=
=0A=
	siblingCheck =3D function( a, b, ret ) {=0A=
		if ( a =3D=3D=3D b ) {=0A=
			return ret;=0A=
		}=0A=
=0A=
		var cur =3D a.nextSibling;=0A=
=0A=
		while ( cur ) {=0A=
			if ( cur =3D=3D=3D b ) {=0A=
				return -1;=0A=
			}=0A=
=0A=
			cur =3D cur.nextSibling;=0A=
		}=0A=
=0A=
		return 1;=0A=
	};=0A=
}=0A=
=0A=
// Utility function for retreiving the text value of an array of DOM =
nodes=0A=
Sizzle.getText =3D function( elems ) {=0A=
	var ret =3D "", elem;=0A=
=0A=
	for ( var i =3D 0; elems[i]; i++ ) {=0A=
		elem =3D elems[i];=0A=
=0A=
		// Get the text from text nodes and CDATA nodes=0A=
		if ( elem.nodeType =3D=3D=3D 3 || elem.nodeType =3D=3D=3D 4 ) {=0A=
			ret +=3D elem.nodeValue;=0A=
=0A=
		// Traverse everything else, except comment nodes=0A=
		} else if ( elem.nodeType !=3D=3D 8 ) {=0A=
			ret +=3D Sizzle.getText( elem.childNodes );=0A=
		}=0A=
	}=0A=
=0A=
	return ret;=0A=
};=0A=
=0A=
// Check to see if the browser returns elements by name when=0A=
// querying by getElementById (and provide a workaround)=0A=
(function(){=0A=
	// We're going to inject a fake input element with a specified name=0A=
	var form =3D document.createElement("div"),=0A=
		id =3D "script" + (new Date()).getTime(),=0A=
		root =3D document.documentElement;=0A=
=0A=
	form.innerHTML =3D "<a name=3D'" + id + "'/>";=0A=
=0A=
	// Inject it into the root element, check its status, and remove it =
quickly=0A=
	root.insertBefore( form, root.firstChild );=0A=
=0A=
	// The workaround has to do additional checks after a getElementById=0A=
	// Which slows things down for other browsers (hence the branching)=0A=
	if ( document.getElementById( id ) ) {=0A=
		Expr.find.ID =3D function( match, context, isXML ) {=0A=
			if ( typeof context.getElementById !=3D=3D "undefined" && !isXML ) {=0A=
				var m =3D context.getElementById(match[1]);=0A=
=0A=
				return m ?=0A=
					m.id =3D=3D=3D match[1] || typeof m.getAttributeNode !=3D=3D =
"undefined" && m.getAttributeNode("id").nodeValue =3D=3D=3D match[1] ?=0A=
						[m] :=0A=
						undefined :=0A=
					[];=0A=
			}=0A=
		};=0A=
=0A=
		Expr.filter.ID =3D function( elem, match ) {=0A=
			var node =3D typeof elem.getAttributeNode !=3D=3D "undefined" && =
elem.getAttributeNode("id");=0A=
=0A=
			return elem.nodeType =3D=3D=3D 1 && node && node.nodeValue =3D=3D=3D =
match;=0A=
		};=0A=
	}=0A=
=0A=
	root.removeChild( form );=0A=
=0A=
	// release memory in IE=0A=
	root =3D form =3D null;=0A=
})();=0A=
=0A=
(function(){=0A=
	// Check to see if the browser returns only elements=0A=
	// when doing getElementsByTagName("*")=0A=
=0A=
	// Create a fake element=0A=
	var div =3D document.createElement("div");=0A=
	div.appendChild( document.createComment("") );=0A=
=0A=
	// Make sure no comments are found=0A=
	if ( div.getElementsByTagName("*").length > 0 ) {=0A=
		Expr.find.TAG =3D function( match, context ) {=0A=
			var results =3D context.getElementsByTagName( match[1] );=0A=
=0A=
			// Filter out possible comments=0A=
			if ( match[1] =3D=3D=3D "*" ) {=0A=
				var tmp =3D [];=0A=
=0A=
				for ( var i =3D 0; results[i]; i++ ) {=0A=
					if ( results[i].nodeType =3D=3D=3D 1 ) {=0A=
						tmp.push( results[i] );=0A=
					}=0A=
				}=0A=
=0A=
				results =3D tmp;=0A=
			}=0A=
=0A=
			return results;=0A=
		};=0A=
	}=0A=
=0A=
	// Check to see if an attribute returns normalized href attributes=0A=
	div.innerHTML =3D "<a href=3D'#'></a>";=0A=
=0A=
	if ( div.firstChild && typeof div.firstChild.getAttribute !=3D=3D =
"undefined" &&=0A=
			div.firstChild.getAttribute("href") !=3D=3D "#" ) {=0A=
=0A=
		Expr.attrHandle.href =3D function( elem ) {=0A=
			return elem.getAttribute( "href", 2 );=0A=
		};=0A=
	}=0A=
=0A=
	// release memory in IE=0A=
	div =3D null;=0A=
})();=0A=
=0A=
if ( document.querySelectorAll ) {=0A=
	(function(){=0A=
		var oldSizzle =3D Sizzle,=0A=
			div =3D document.createElement("div"),=0A=
			id =3D "__sizzle__";=0A=
=0A=
		div.innerHTML =3D "<p class=3D'TEST'></p>";=0A=
=0A=
		// Safari can't handle uppercase or unicode characters when=0A=
		// in quirks mode.=0A=
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length =
=3D=3D=3D 0 ) {=0A=
			return;=0A=
		}=0A=
	=0A=
		Sizzle =3D function( query, context, extra, seed ) {=0A=
			context =3D context || document;=0A=
=0A=
			// Only use querySelectorAll on non-XML documents=0A=
			// (ID selectors don't work in non-HTML documents)=0A=
			if ( !seed && !Sizzle.isXML(context) ) {=0A=
				// See if we find a selector to speed up=0A=
				var match =3D /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );=0A=
				=0A=
				if ( match && (context.nodeType =3D=3D=3D 1 || context.nodeType =
=3D=3D=3D 9) ) {=0A=
					// Speed-up: Sizzle("TAG")=0A=
					if ( match[1] ) {=0A=
						return makeArray( context.getElementsByTagName( query ), extra );=0A=
					=0A=
					// Speed-up: Sizzle(".CLASS")=0A=
					} else if ( match[2] && Expr.find.CLASS && =
context.getElementsByClassName ) {=0A=
						return makeArray( context.getElementsByClassName( match[2] ), =
extra );=0A=
					}=0A=
				}=0A=
				=0A=
				if ( context.nodeType =3D=3D=3D 9 ) {=0A=
					// Speed-up: Sizzle("body")=0A=
					// The body element only exists once, optimize finding it=0A=
					if ( query =3D=3D=3D "body" && context.body ) {=0A=
						return makeArray( [ context.body ], extra );=0A=
						=0A=
					// Speed-up: Sizzle("#ID")=0A=
					} else if ( match && match[3] ) {=0A=
						var elem =3D context.getElementById( match[3] );=0A=
=0A=
						// Check parentNode to catch when Blackberry 4.6 returns=0A=
						// nodes that are no longer in the document #6963=0A=
						if ( elem && elem.parentNode ) {=0A=
							// Handle the case where IE and Opera return items=0A=
							// by name instead of ID=0A=
							if ( elem.id =3D=3D=3D match[3] ) {=0A=
								return makeArray( [ elem ], extra );=0A=
							}=0A=
							=0A=
						} else {=0A=
							return makeArray( [], extra );=0A=
						}=0A=
					}=0A=
					=0A=
					try {=0A=
						return makeArray( context.querySelectorAll(query), extra );=0A=
					} catch(qsaError) {}=0A=
=0A=
				// qSA works strangely on Element-rooted queries=0A=
				// We can work around this by specifying an extra ID on the root=0A=
				// and working up from there (Thanks to Andrew Dupont for the =
technique)=0A=
				// IE 8 doesn't work on object elements=0A=
				} else if ( context.nodeType =3D=3D=3D 1 && =
context.nodeName.toLowerCase() !=3D=3D "object" ) {=0A=
					var oldContext =3D context,=0A=
						old =3D context.getAttribute( "id" ),=0A=
						nid =3D old || id,=0A=
						hasParent =3D context.parentNode,=0A=
						relativeHierarchySelector =3D /^\s*[+~]/.test( query );=0A=
=0A=
					if ( !old ) {=0A=
						context.setAttribute( "id", nid );=0A=
					} else {=0A=
						nid =3D nid.replace( /'/g, "\\$&" );=0A=
					}=0A=
					if ( relativeHierarchySelector && hasParent ) {=0A=
						context =3D context.parentNode;=0A=
					}=0A=
=0A=
					try {=0A=
						if ( !relativeHierarchySelector || hasParent ) {=0A=
							return makeArray( context.querySelectorAll( "[id=3D'" + nid + "'] =
" + query ), extra );=0A=
						}=0A=
=0A=
					} catch(pseudoError) {=0A=
					} finally {=0A=
						if ( !old ) {=0A=
							oldContext.removeAttribute( "id" );=0A=
						}=0A=
					}=0A=
				}=0A=
			}=0A=
		=0A=
			return oldSizzle(query, context, extra, seed);=0A=
		};=0A=
=0A=
		for ( var prop in oldSizzle ) {=0A=
			Sizzle[ prop ] =3D oldSizzle[ prop ];=0A=
		}=0A=
=0A=
		// release memory in IE=0A=
		div =3D null;=0A=
	})();=0A=
}=0A=
=0A=
(function(){=0A=
	var html =3D document.documentElement,=0A=
		matches =3D html.matchesSelector || html.mozMatchesSelector || =
html.webkitMatchesSelector || html.msMatchesSelector;=0A=
=0A=
	if ( matches ) {=0A=
		// Check to see if it's possible to do matchesSelector=0A=
		// on a disconnected node (IE 9 fails this)=0A=
		var disconnectedMatch =3D !matches.call( document.createElement( "div" =
), "div" ),=0A=
			pseudoWorks =3D false;=0A=
=0A=
		try {=0A=
			// This should fail with an exception=0A=
			// Gecko does not error, returns false instead=0A=
			matches.call( document.documentElement, "[test!=3D'']:sizzle" );=0A=
	=0A=
		} catch( pseudoError ) {=0A=
			pseudoWorks =3D true;=0A=
		}=0A=
=0A=
		Sizzle.matchesSelector =3D function( node, expr ) {=0A=
			// Make sure that attribute selectors are quoted=0A=
			expr =3D expr.replace(/\=3D\s*([^'"\]]*)\s*\]/g, "=3D'$1']");=0A=
=0A=
			if ( !Sizzle.isXML( node ) ) {=0A=
				try { =0A=
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && =
!/!=3D/.test( expr ) ) {=0A=
						var ret =3D matches.call( node, expr );=0A=
=0A=
						// IE 9's matchesSelector returns false on disconnected nodes=0A=
						if ( ret || !disconnectedMatch ||=0A=
								// As well, disconnected nodes are said to be in a document=0A=
								// fragment in IE 9, so check for that=0A=
								node.document && node.document.nodeType !=3D=3D 11 ) {=0A=
							return ret;=0A=
						}=0A=
					}=0A=
				} catch(e) {}=0A=
			}=0A=
=0A=
			return Sizzle(expr, null, null, [node]).length > 0;=0A=
		};=0A=
	}=0A=
})();=0A=
=0A=
(function(){=0A=
	var div =3D document.createElement("div");=0A=
=0A=
	div.innerHTML =3D "<div class=3D'test e'></div><div =
class=3D'test'></div>";=0A=
=0A=
	// Opera can't find a second classname (in 9.6)=0A=
	// Also, make sure that getElementsByClassName actually exists=0A=
	if ( !div.getElementsByClassName || =
div.getElementsByClassName("e").length =3D=3D=3D 0 ) {=0A=
		return;=0A=
	}=0A=
=0A=
	// Safari caches class attributes, doesn't catch changes (in 3.2)=0A=
	div.lastChild.className =3D "e";=0A=
=0A=
	if ( div.getElementsByClassName("e").length =3D=3D=3D 1 ) {=0A=
		return;=0A=
	}=0A=
	=0A=
	Expr.order.splice(1, 0, "CLASS");=0A=
	Expr.find.CLASS =3D function( match, context, isXML ) {=0A=
		if ( typeof context.getElementsByClassName !=3D=3D "undefined" && =
!isXML ) {=0A=
			return context.getElementsByClassName(match[1]);=0A=
		}=0A=
	};=0A=
=0A=
	// release memory in IE=0A=
	div =3D null;=0A=
})();=0A=
=0A=
function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {=0A=
	for ( var i =3D 0, l =3D checkSet.length; i < l; i++ ) {=0A=
		var elem =3D checkSet[i];=0A=
=0A=
		if ( elem ) {=0A=
			var match =3D false;=0A=
=0A=
			elem =3D elem[dir];=0A=
=0A=
			while ( elem ) {=0A=
				if ( elem.sizcache =3D=3D=3D doneName ) {=0A=
					match =3D checkSet[elem.sizset];=0A=
					break;=0A=
				}=0A=
=0A=
				if ( elem.nodeType =3D=3D=3D 1 && !isXML ){=0A=
					elem.sizcache =3D doneName;=0A=
					elem.sizset =3D i;=0A=
				}=0A=
=0A=
				if ( elem.nodeName.toLowerCase() =3D=3D=3D cur ) {=0A=
					match =3D elem;=0A=
					break;=0A=
				}=0A=
=0A=
				elem =3D elem[dir];=0A=
			}=0A=
=0A=
			checkSet[i] =3D match;=0A=
		}=0A=
	}=0A=
}=0A=
=0A=
function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {=0A=
	for ( var i =3D 0, l =3D checkSet.length; i < l; i++ ) {=0A=
		var elem =3D checkSet[i];=0A=
=0A=
		if ( elem ) {=0A=
			var match =3D false;=0A=
			=0A=
			elem =3D elem[dir];=0A=
=0A=
			while ( elem ) {=0A=
				if ( elem.sizcache =3D=3D=3D doneName ) {=0A=
					match =3D checkSet[elem.sizset];=0A=
					break;=0A=
				}=0A=
=0A=
				if ( elem.nodeType =3D=3D=3D 1 ) {=0A=
					if ( !isXML ) {=0A=
						elem.sizcache =3D doneName;=0A=
						elem.sizset =3D i;=0A=
					}=0A=
=0A=
					if ( typeof cur !=3D=3D "string" ) {=0A=
						if ( elem =3D=3D=3D cur ) {=0A=
							match =3D true;=0A=
							break;=0A=
						}=0A=
=0A=
					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {=0A=
						match =3D elem;=0A=
						break;=0A=
					}=0A=
				}=0A=
=0A=
				elem =3D elem[dir];=0A=
			}=0A=
=0A=
			checkSet[i] =3D match;=0A=
		}=0A=
	}=0A=
}=0A=
=0A=
if ( document.documentElement.contains ) {=0A=
	Sizzle.contains =3D function( a, b ) {=0A=
		return a !=3D=3D b && (a.contains ? a.contains(b) : true);=0A=
	};=0A=
=0A=
} else if ( document.documentElement.compareDocumentPosition ) {=0A=
	Sizzle.contains =3D function( a, b ) {=0A=
		return !!(a.compareDocumentPosition(b) & 16);=0A=
	};=0A=
=0A=
} else {=0A=
	Sizzle.contains =3D function() {=0A=
		return false;=0A=
	};=0A=
}=0A=
=0A=
Sizzle.isXML =3D function( elem ) {=0A=
	// documentElement is verified for cases where it doesn't yet exist=0A=
	// (such as loading iframes in IE - #4833) =0A=
	var documentElement =3D (elem ? elem.ownerDocument || elem : =
0).documentElement;=0A=
=0A=
	return documentElement ? documentElement.nodeName !=3D=3D "HTML" : =
false;=0A=
};=0A=
=0A=
var posProcess =3D function( selector, context ) {=0A=
	var match,=0A=
		tmpSet =3D [],=0A=
		later =3D "",=0A=
		root =3D context.nodeType ? [context] : context;=0A=
=0A=
	// Position selectors must be done after the filter=0A=
	// And so must :not(positional) so we move all PSEUDOs to the end=0A=
	while ( (match =3D Expr.match.PSEUDO.exec( selector )) ) {=0A=
		later +=3D match[0];=0A=
		selector =3D selector.replace( Expr.match.PSEUDO, "" );=0A=
	}=0A=
=0A=
	selector =3D Expr.relative[selector] ? selector + "*" : selector;=0A=
=0A=
	for ( var i =3D 0, l =3D root.length; i < l; i++ ) {=0A=
		Sizzle( selector, root[i], tmpSet );=0A=
	}=0A=
=0A=
	return Sizzle.filter( later, tmpSet );=0A=
};=0A=
=0A=
// EXPOSE=0A=
jQuery.find =3D Sizzle;=0A=
jQuery.expr =3D Sizzle.selectors;=0A=
jQuery.expr[":"] =3D jQuery.expr.filters;=0A=
jQuery.unique =3D Sizzle.uniqueSort;=0A=
jQuery.text =3D Sizzle.getText;=0A=
jQuery.isXMLDoc =3D Sizzle.isXML;=0A=
jQuery.contains =3D Sizzle.contains;=0A=
=0A=
=0A=
})();=0A=
=0A=
=0A=
var runtil =3D /Until$/,=0A=
	rparentsprev =3D /^(?:parents|prevUntil|prevAll)/,=0A=
	// Note: This RegExp should be improved, or likely pulled from Sizzle=0A=
	rmultiselector =3D /,/,=0A=
	isSimple =3D /^.[^:#\[\.,]*$/,=0A=
	slice =3D Array.prototype.slice,=0A=
	POS =3D jQuery.expr.match.POS,=0A=
	// methods guaranteed to produce a unique set when starting from a =
unique set=0A=
	guaranteedUnique =3D {=0A=
		children: true,=0A=
		contents: true,=0A=
		next: true,=0A=
		prev: true=0A=
	};=0A=
=0A=
jQuery.fn.extend({=0A=
	find: function( selector ) {=0A=
		var ret =3D this.pushStack( "", "find", selector ),=0A=
			length =3D 0;=0A=
=0A=
		for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
			length =3D ret.length;=0A=
			jQuery.find( selector, this[i], ret );=0A=
=0A=
			if ( i > 0 ) {=0A=
				// Make sure that the results are unique=0A=
				for ( var n =3D length; n < ret.length; n++ ) {=0A=
					for ( var r =3D 0; r < length; r++ ) {=0A=
						if ( ret[r] =3D=3D=3D ret[n] ) {=0A=
							ret.splice(n--, 1);=0A=
							break;=0A=
						}=0A=
					}=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return ret;=0A=
	},=0A=
=0A=
	has: function( target ) {=0A=
		var targets =3D jQuery( target );=0A=
		return this.filter(function() {=0A=
			for ( var i =3D 0, l =3D targets.length; i < l; i++ ) {=0A=
				if ( jQuery.contains( this, targets[i] ) ) {=0A=
					return true;=0A=
				}=0A=
			}=0A=
		});=0A=
	},=0A=
=0A=
	not: function( selector ) {=0A=
		return this.pushStack( winnow(this, selector, false), "not", selector);=0A=
	},=0A=
=0A=
	filter: function( selector ) {=0A=
		return this.pushStack( winnow(this, selector, true), "filter", =
selector );=0A=
	},=0A=
=0A=
	is: function( selector ) {=0A=
		return !!selector && jQuery.filter( selector, this ).length > 0;=0A=
	},=0A=
=0A=
	closest: function( selectors, context ) {=0A=
		var ret =3D [], i, l, cur =3D this[0];=0A=
=0A=
		if ( jQuery.isArray( selectors ) ) {=0A=
			var match, selector,=0A=
				matches =3D {},=0A=
				level =3D 1;=0A=
=0A=
			if ( cur && selectors.length ) {=0A=
				for ( i =3D 0, l =3D selectors.length; i < l; i++ ) {=0A=
					selector =3D selectors[i];=0A=
=0A=
					if ( !matches[selector] ) {=0A=
						matches[selector] =3D jQuery.expr.match.POS.test( selector ) ?=0A=
							jQuery( selector, context || this.context ) :=0A=
							selector;=0A=
					}=0A=
				}=0A=
=0A=
				while ( cur && cur.ownerDocument && cur !=3D=3D context ) {=0A=
					for ( selector in matches ) {=0A=
						match =3D matches[selector];=0A=
=0A=
						if ( match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match) =
) {=0A=
							ret.push({ selector: selector, elem: cur, level: level });=0A=
						}=0A=
					}=0A=
=0A=
					cur =3D cur.parentNode;=0A=
					level++;=0A=
				}=0A=
			}=0A=
=0A=
			return ret;=0A=
		}=0A=
=0A=
		var pos =3D POS.test( selectors ) ?=0A=
			jQuery( selectors, context || this.context ) : null;=0A=
=0A=
		for ( i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
			cur =3D this[i];=0A=
=0A=
			while ( cur ) {=0A=
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, =
selectors) ) {=0A=
					ret.push( cur );=0A=
					break;=0A=
=0A=
				} else {=0A=
					cur =3D cur.parentNode;=0A=
					if ( !cur || !cur.ownerDocument || cur =3D=3D=3D context ) {=0A=
						break;=0A=
					}=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		ret =3D ret.length > 1 ? jQuery.unique(ret) : ret;=0A=
=0A=
		return this.pushStack( ret, "closest", selectors );=0A=
	},=0A=
=0A=
	// Determine the position of an element within=0A=
	// the matched set of elements=0A=
	index: function( elem ) {=0A=
		if ( !elem || typeof elem =3D=3D=3D "string" ) {=0A=
			return jQuery.inArray( this[0],=0A=
				// If it receives a string, the selector is used=0A=
				// If it receives nothing, the siblings are used=0A=
				elem ? jQuery( elem ) : this.parent().children() );=0A=
		}=0A=
		// Locate the position of the desired element=0A=
		return jQuery.inArray(=0A=
			// If it receives a jQuery object, the first element is used=0A=
			elem.jquery ? elem[0] : elem, this );=0A=
	},=0A=
=0A=
	add: function( selector, context ) {=0A=
		var set =3D typeof selector =3D=3D=3D "string" ?=0A=
				jQuery( selector, context ) :=0A=
				jQuery.makeArray( selector ),=0A=
			all =3D jQuery.merge( this.get(), set );=0A=
=0A=
		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( =
all[0] ) ?=0A=
			all :=0A=
			jQuery.unique( all ) );=0A=
	},=0A=
=0A=
	andSelf: function() {=0A=
		return this.add( this.prevObject );=0A=
	}=0A=
});=0A=
=0A=
// A painfully simple check to see if an element is disconnected=0A=
// from a document (should be improved, where feasible).=0A=
function isDisconnected( node ) {=0A=
	return !node || !node.parentNode || node.parentNode.nodeType =3D=3D=3D =
11;=0A=
}=0A=
=0A=
jQuery.each({=0A=
	parent: function( elem ) {=0A=
		var parent =3D elem.parentNode;=0A=
		return parent && parent.nodeType !=3D=3D 11 ? parent : null;=0A=
	},=0A=
	parents: function( elem ) {=0A=
		return jQuery.dir( elem, "parentNode" );=0A=
	},=0A=
	parentsUntil: function( elem, i, until ) {=0A=
		return jQuery.dir( elem, "parentNode", until );=0A=
	},=0A=
	next: function( elem ) {=0A=
		return jQuery.nth( elem, 2, "nextSibling" );=0A=
	},=0A=
	prev: function( elem ) {=0A=
		return jQuery.nth( elem, 2, "previousSibling" );=0A=
	},=0A=
	nextAll: function( elem ) {=0A=
		return jQuery.dir( elem, "nextSibling" );=0A=
	},=0A=
	prevAll: function( elem ) {=0A=
		return jQuery.dir( elem, "previousSibling" );=0A=
	},=0A=
	nextUntil: function( elem, i, until ) {=0A=
		return jQuery.dir( elem, "nextSibling", until );=0A=
	},=0A=
	prevUntil: function( elem, i, until ) {=0A=
		return jQuery.dir( elem, "previousSibling", until );=0A=
	},=0A=
	siblings: function( elem ) {=0A=
		return jQuery.sibling( elem.parentNode.firstChild, elem );=0A=
	},=0A=
	children: function( elem ) {=0A=
		return jQuery.sibling( elem.firstChild );=0A=
	},=0A=
	contents: function( elem ) {=0A=
		return jQuery.nodeName( elem, "iframe" ) ?=0A=
			elem.contentDocument || elem.contentWindow.document :=0A=
			jQuery.makeArray( elem.childNodes );=0A=
	}=0A=
}, function( name, fn ) {=0A=
	jQuery.fn[ name ] =3D function( until, selector ) {=0A=
		var ret =3D jQuery.map( this, fn, until ),=0A=
			// The variable 'args' was introduced in=0A=
			// https://github.com/jquery/jquery/commit/52a0238=0A=
			// to work around a bug in Chrome 10 (Dev) and should be removed when =
the bug is fixed.=0A=
			// http://code.google.com/p/v8/issues/detail?id=3D1050=0A=
			args =3D slice.call(arguments);=0A=
=0A=
		if ( !runtil.test( name ) ) {=0A=
			selector =3D until;=0A=
		}=0A=
=0A=
		if ( selector && typeof selector =3D=3D=3D "string" ) {=0A=
			ret =3D jQuery.filter( selector, ret );=0A=
		}=0A=
=0A=
		ret =3D this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( =
ret ) : ret;=0A=
=0A=
		if ( (this.length > 1 || rmultiselector.test( selector )) && =
rparentsprev.test( name ) ) {=0A=
			ret =3D ret.reverse();=0A=
		}=0A=
=0A=
		return this.pushStack( ret, name, args.join(",") );=0A=
	};=0A=
});=0A=
=0A=
jQuery.extend({=0A=
	filter: function( expr, elems, not ) {=0A=
		if ( not ) {=0A=
			expr =3D ":not(" + expr + ")";=0A=
		}=0A=
=0A=
		return elems.length =3D=3D=3D 1 ?=0A=
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :=0A=
			jQuery.find.matches(expr, elems);=0A=
	},=0A=
=0A=
	dir: function( elem, dir, until ) {=0A=
		var matched =3D [],=0A=
			cur =3D elem[ dir ];=0A=
=0A=
		while ( cur && cur.nodeType !=3D=3D 9 && (until =3D=3D=3D undefined || =
cur.nodeType !=3D=3D 1 || !jQuery( cur ).is( until )) ) {=0A=
			if ( cur.nodeType =3D=3D=3D 1 ) {=0A=
				matched.push( cur );=0A=
			}=0A=
			cur =3D cur[dir];=0A=
		}=0A=
		return matched;=0A=
	},=0A=
=0A=
	nth: function( cur, result, dir, elem ) {=0A=
		result =3D result || 1;=0A=
		var num =3D 0;=0A=
=0A=
		for ( ; cur; cur =3D cur[dir] ) {=0A=
			if ( cur.nodeType =3D=3D=3D 1 && ++num =3D=3D=3D result ) {=0A=
				break;=0A=
			}=0A=
		}=0A=
=0A=
		return cur;=0A=
	},=0A=
=0A=
	sibling: function( n, elem ) {=0A=
		var r =3D [];=0A=
=0A=
		for ( ; n; n =3D n.nextSibling ) {=0A=
			if ( n.nodeType =3D=3D=3D 1 && n !=3D=3D elem ) {=0A=
				r.push( n );=0A=
			}=0A=
		}=0A=
=0A=
		return r;=0A=
	}=0A=
});=0A=
=0A=
// Implement the identical functionality for filter and not=0A=
function winnow( elements, qualifier, keep ) {=0A=
	if ( jQuery.isFunction( qualifier ) ) {=0A=
		return jQuery.grep(elements, function( elem, i ) {=0A=
			var retVal =3D !!qualifier.call( elem, i, elem );=0A=
			return retVal =3D=3D=3D keep;=0A=
		});=0A=
=0A=
	} else if ( qualifier.nodeType ) {=0A=
		return jQuery.grep(elements, function( elem, i ) {=0A=
			return (elem =3D=3D=3D qualifier) =3D=3D=3D keep;=0A=
		});=0A=
=0A=
	} else if ( typeof qualifier =3D=3D=3D "string" ) {=0A=
		var filtered =3D jQuery.grep(elements, function( elem ) {=0A=
			return elem.nodeType =3D=3D=3D 1;=0A=
		});=0A=
=0A=
		if ( isSimple.test( qualifier ) ) {=0A=
			return jQuery.filter(qualifier, filtered, !keep);=0A=
		} else {=0A=
			qualifier =3D jQuery.filter( qualifier, filtered );=0A=
		}=0A=
	}=0A=
=0A=
	return jQuery.grep(elements, function( elem, i ) {=0A=
		return (jQuery.inArray( elem, qualifier ) >=3D 0) =3D=3D=3D keep;=0A=
	});=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
var rinlinejQuery =3D / jQuery\d+=3D"(?:\d+|null)"/g,=0A=
	rleadingWhitespace =3D /^\s+/,=0A=
	rxhtmlTag =3D =
/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig=
,=0A=
	rtagName =3D /<([\w:]+)/,=0A=
	rtbody =3D /<tbody/i,=0A=
	rhtml =3D /<|&#?\w+;/,=0A=
	rnocache =3D /<(?:script|object|embed|option|style)/i,=0A=
	// checked=3D"checked" or checked=0A=
	rchecked =3D /checked\s*(?:[^=3D]|=3D\s*.checked.)/i,=0A=
	wrapMap =3D {=0A=
		option: [ 1, "<select multiple=3D'multiple'>", "</select>" ],=0A=
		legend: [ 1, "<fieldset>", "</fieldset>" ],=0A=
		thead: [ 1, "<table>", "</table>" ],=0A=
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],=0A=
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],=0A=
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],=0A=
		area: [ 1, "<map>", "</map>" ],=0A=
		_default: [ 0, "", "" ]=0A=
	};=0A=
=0A=
wrapMap.optgroup =3D wrapMap.option;=0A=
wrapMap.tbody =3D wrapMap.tfoot =3D wrapMap.colgroup =3D wrapMap.caption =
=3D wrapMap.thead;=0A=
wrapMap.th =3D wrapMap.td;=0A=
=0A=
// IE can't serialize <link> and <script> tags normally=0A=
if ( !jQuery.support.htmlSerialize ) {=0A=
	wrapMap._default =3D [ 1, "div<div>", "</div>" ];=0A=
}=0A=
=0A=
jQuery.fn.extend({=0A=
	text: function( text ) {=0A=
		if ( jQuery.isFunction(text) ) {=0A=
			return this.each(function(i) {=0A=
				var self =3D jQuery( this );=0A=
=0A=
				self.text( text.call(this, i, self.text()) );=0A=
			});=0A=
		}=0A=
=0A=
		if ( typeof text !=3D=3D "object" && text !=3D=3D undefined ) {=0A=
			return this.empty().append( (this[0] && this[0].ownerDocument || =
document).createTextNode( text ) );=0A=
		}=0A=
=0A=
		return jQuery.text( this );=0A=
	},=0A=
=0A=
	wrapAll: function( html ) {=0A=
		if ( jQuery.isFunction( html ) ) {=0A=
			return this.each(function(i) {=0A=
				jQuery(this).wrapAll( html.call(this, i) );=0A=
			});=0A=
		}=0A=
=0A=
		if ( this[0] ) {=0A=
			// The elements to wrap the target around=0A=
			var wrap =3D jQuery( html, this[0].ownerDocument ).eq(0).clone(true);=0A=
=0A=
			if ( this[0].parentNode ) {=0A=
				wrap.insertBefore( this[0] );=0A=
			}=0A=
=0A=
			wrap.map(function() {=0A=
				var elem =3D this;=0A=
=0A=
				while ( elem.firstChild && elem.firstChild.nodeType =3D=3D=3D 1 ) {=0A=
					elem =3D elem.firstChild;=0A=
				}=0A=
=0A=
				return elem;=0A=
			}).append(this);=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	wrapInner: function( html ) {=0A=
		if ( jQuery.isFunction( html ) ) {=0A=
			return this.each(function(i) {=0A=
				jQuery(this).wrapInner( html.call(this, i) );=0A=
			});=0A=
		}=0A=
=0A=
		return this.each(function() {=0A=
			var self =3D jQuery( this ),=0A=
				contents =3D self.contents();=0A=
=0A=
			if ( contents.length ) {=0A=
				contents.wrapAll( html );=0A=
=0A=
			} else {=0A=
				self.append( html );=0A=
			}=0A=
		});=0A=
	},=0A=
=0A=
	wrap: function( html ) {=0A=
		return this.each(function() {=0A=
			jQuery( this ).wrapAll( html );=0A=
		});=0A=
	},=0A=
=0A=
	unwrap: function() {=0A=
		return this.parent().each(function() {=0A=
			if ( !jQuery.nodeName( this, "body" ) ) {=0A=
				jQuery( this ).replaceWith( this.childNodes );=0A=
			}=0A=
		}).end();=0A=
	},=0A=
=0A=
	append: function() {=0A=
		return this.domManip(arguments, true, function( elem ) {=0A=
			if ( this.nodeType =3D=3D=3D 1 ) {=0A=
				this.appendChild( elem );=0A=
			}=0A=
		});=0A=
	},=0A=
=0A=
	prepend: function() {=0A=
		return this.domManip(arguments, true, function( elem ) {=0A=
			if ( this.nodeType =3D=3D=3D 1 ) {=0A=
				this.insertBefore( elem, this.firstChild );=0A=
			}=0A=
		});=0A=
	},=0A=
=0A=
	before: function() {=0A=
		if ( this[0] && this[0].parentNode ) {=0A=
			return this.domManip(arguments, false, function( elem ) {=0A=
				this.parentNode.insertBefore( elem, this );=0A=
			});=0A=
		} else if ( arguments.length ) {=0A=
			var set =3D jQuery(arguments[0]);=0A=
			set.push.apply( set, this.toArray() );=0A=
			return this.pushStack( set, "before", arguments );=0A=
		}=0A=
	},=0A=
=0A=
	after: function() {=0A=
		if ( this[0] && this[0].parentNode ) {=0A=
			return this.domManip(arguments, false, function( elem ) {=0A=
				this.parentNode.insertBefore( elem, this.nextSibling );=0A=
			});=0A=
		} else if ( arguments.length ) {=0A=
			var set =3D this.pushStack( this, "after", arguments );=0A=
			set.push.apply( set, jQuery(arguments[0]).toArray() );=0A=
			return set;=0A=
		}=0A=
	},=0A=
=0A=
	// keepData is for internal use only--do not document=0A=
	remove: function( selector, keepData ) {=0A=
		for ( var i =3D 0, elem; (elem =3D this[i]) !=3D null; i++ ) {=0A=
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {=0A=
				if ( !keepData && elem.nodeType =3D=3D=3D 1 ) {=0A=
					jQuery.cleanData( elem.getElementsByTagName("*") );=0A=
					jQuery.cleanData( [ elem ] );=0A=
				}=0A=
=0A=
				if ( elem.parentNode ) {=0A=
					elem.parentNode.removeChild( elem );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	empty: function() {=0A=
		for ( var i =3D 0, elem; (elem =3D this[i]) !=3D null; i++ ) {=0A=
			// Remove element nodes and prevent memory leaks=0A=
			if ( elem.nodeType =3D=3D=3D 1 ) {=0A=
				jQuery.cleanData( elem.getElementsByTagName("*") );=0A=
			}=0A=
=0A=
			// Remove any remaining nodes=0A=
			while ( elem.firstChild ) {=0A=
				elem.removeChild( elem.firstChild );=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	clone: function( dataAndEvents, deepDataAndEvents ) {=0A=
		dataAndEvents =3D dataAndEvents =3D=3D null ? false : dataAndEvents;=0A=
		deepDataAndEvents =3D deepDataAndEvents =3D=3D null ? dataAndEvents : =
deepDataAndEvents;=0A=
=0A=
		return this.map( function () {=0A=
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );=0A=
		});=0A=
	},=0A=
=0A=
	html: function( value ) {=0A=
		if ( value =3D=3D=3D undefined ) {=0A=
			return this[0] && this[0].nodeType =3D=3D=3D 1 ?=0A=
				this[0].innerHTML.replace(rinlinejQuery, "") :=0A=
				null;=0A=
=0A=
		// See if we can take a shortcut and just use innerHTML=0A=
		} else if ( typeof value =3D=3D=3D "string" && !rnocache.test( value ) =
&&=0A=
			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value =
)) &&=0A=
			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {=0A=
=0A=
			value =3D value.replace(rxhtmlTag, "<$1></$2>");=0A=
=0A=
			try {=0A=
				for ( var i =3D 0, l =3D this.length; i < l; i++ ) {=0A=
					// Remove element nodes and prevent memory leaks=0A=
					if ( this[i].nodeType =3D=3D=3D 1 ) {=0A=
						jQuery.cleanData( this[i].getElementsByTagName("*") );=0A=
						this[i].innerHTML =3D value;=0A=
					}=0A=
				}=0A=
=0A=
			// If using innerHTML throws an exception, use the fallback method=0A=
			} catch(e) {=0A=
				this.empty().append( value );=0A=
			}=0A=
=0A=
		} else if ( jQuery.isFunction( value ) ) {=0A=
			this.each(function(i){=0A=
				var self =3D jQuery( this );=0A=
=0A=
				self.html( value.call(this, i, self.html()) );=0A=
			});=0A=
=0A=
		} else {=0A=
			this.empty().append( value );=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	replaceWith: function( value ) {=0A=
		if ( this[0] && this[0].parentNode ) {=0A=
			// Make sure that the elements are removed from the DOM before they =
are inserted=0A=
			// this can help fix replacing a parent with child elements=0A=
			if ( jQuery.isFunction( value ) ) {=0A=
				return this.each(function(i) {=0A=
					var self =3D jQuery(this), old =3D self.html();=0A=
					self.replaceWith( value.call( this, i, old ) );=0A=
				});=0A=
			}=0A=
=0A=
			if ( typeof value !=3D=3D "string" ) {=0A=
				value =3D jQuery( value ).detach();=0A=
			}=0A=
=0A=
			return this.each(function() {=0A=
				var next =3D this.nextSibling,=0A=
					parent =3D this.parentNode;=0A=
=0A=
				jQuery( this ).remove();=0A=
=0A=
				if ( next ) {=0A=
					jQuery(next).before( value );=0A=
				} else {=0A=
					jQuery(parent).append( value );=0A=
				}=0A=
			});=0A=
		} else {=0A=
			return this.length ?=0A=
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), =
"replaceWith", value ) :=0A=
				this;=0A=
		}=0A=
	},=0A=
=0A=
	detach: function( selector ) {=0A=
		return this.remove( selector, true );=0A=
	},=0A=
=0A=
	domManip: function( args, table, callback ) {=0A=
		var results, first, fragment, parent,=0A=
			value =3D args[0],=0A=
			scripts =3D [];=0A=
=0A=
		// We can't cloneNode fragments that contain checked, in WebKit=0A=
		if ( !jQuery.support.checkClone && arguments.length =3D=3D=3D 3 && =
typeof value =3D=3D=3D "string" && rchecked.test( value ) ) {=0A=
			return this.each(function() {=0A=
				jQuery(this).domManip( args, table, callback, true );=0A=
			});=0A=
		}=0A=
=0A=
		if ( jQuery.isFunction(value) ) {=0A=
			return this.each(function(i) {=0A=
				var self =3D jQuery(this);=0A=
				args[0] =3D value.call(this, i, table ? self.html() : undefined);=0A=
				self.domManip( args, table, callback );=0A=
			});=0A=
		}=0A=
=0A=
		if ( this[0] ) {=0A=
			parent =3D value && value.parentNode;=0A=
=0A=
			// If we're in a fragment, just use that instead of building a new one=0A=
			if ( jQuery.support.parentNode && parent && parent.nodeType =3D=3D=3D =
11 && parent.childNodes.length =3D=3D=3D this.length ) {=0A=
				results =3D { fragment: parent };=0A=
=0A=
			} else {=0A=
				results =3D jQuery.buildFragment( args, this, scripts );=0A=
			}=0A=
=0A=
			fragment =3D results.fragment;=0A=
=0A=
			if ( fragment.childNodes.length =3D=3D=3D 1 ) {=0A=
				first =3D fragment =3D fragment.firstChild;=0A=
			} else {=0A=
				first =3D fragment.firstChild;=0A=
			}=0A=
=0A=
			if ( first ) {=0A=
				table =3D table && jQuery.nodeName( first, "tr" );=0A=
=0A=
				for ( var i =3D 0, l =3D this.length, lastIndex =3D l - 1; i < l; =
i++ ) {=0A=
					callback.call(=0A=
						table ?=0A=
							root(this[i], first) :=0A=
							this[i],=0A=
						// Make sure that we do not leak memory by inadvertently discarding=0A=
						// the original fragment (which might have attached data) instead =
of=0A=
						// using it; in addition, use the original fragment object for the =
last=0A=
						// item instead of first because it can end up being emptied =
incorrectly=0A=
						// in certain situations (Bug #8070).=0A=
						// Fragments from the fragment cache must always be cloned and =
never used=0A=
						// in place.=0A=
						results.cacheable || (l > 1 && i < lastIndex) ?=0A=
							jQuery.clone( fragment, true, true ) :=0A=
							fragment=0A=
					);=0A=
				}=0A=
			}=0A=
=0A=
			if ( scripts.length ) {=0A=
				jQuery.each( scripts, evalScript );=0A=
			}=0A=
		}=0A=
=0A=
		return this;=0A=
	}=0A=
});=0A=
=0A=
function root( elem, cur ) {=0A=
	return jQuery.nodeName(elem, "table") ?=0A=
		(elem.getElementsByTagName("tbody")[0] ||=0A=
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :=0A=
		elem;=0A=
}=0A=
=0A=
function cloneCopyEvent( src, dest ) {=0A=
=0A=
	if ( dest.nodeType !=3D=3D 1 || !jQuery.hasData( src ) ) {=0A=
		return;=0A=
	}=0A=
=0A=
	var internalKey =3D jQuery.expando,=0A=
		oldData =3D jQuery.data( src ),=0A=
		curData =3D jQuery.data( dest, oldData );=0A=
=0A=
	// Switch to use the internal data object, if it exists, for the next=0A=
	// stage of data copying=0A=
	if ( (oldData =3D oldData[ internalKey ]) ) {=0A=
		var events =3D oldData.events;=0A=
				curData =3D curData[ internalKey ] =3D jQuery.extend({}, oldData);=0A=
=0A=
		if ( events ) {=0A=
			delete curData.handle;=0A=
			curData.events =3D {};=0A=
=0A=
			for ( var type in events ) {=0A=
				for ( var i =3D 0, l =3D events[ type ].length; i < l; i++ ) {=0A=
					jQuery.event.add( dest, type + ( events[ type ][ i ].namespace ? =
"." : "" ) + events[ type ][ i ].namespace, events[ type ][ i ], events[ =
type ][ i ].data );=0A=
				}=0A=
			}=0A=
		}=0A=
	}=0A=
}=0A=
=0A=
function cloneFixAttributes(src, dest) {=0A=
	// We do not need to do anything for non-Elements=0A=
	if ( dest.nodeType !=3D=3D 1 ) {=0A=
		return;=0A=
	}=0A=
=0A=
	var nodeName =3D dest.nodeName.toLowerCase();=0A=
=0A=
	// clearAttributes removes the attributes, which we don't want,=0A=
	// but also removes the attachEvent events, which we *do* want=0A=
	dest.clearAttributes();=0A=
=0A=
	// mergeAttributes, in contrast, only merges back on the=0A=
	// original attributes, not the events=0A=
	dest.mergeAttributes(src);=0A=
=0A=
	// IE6-8 fail to clone children inside object elements that use=0A=
	// the proprietary classid attribute value (rather than the type=0A=
	// attribute) to identify the type of content to display=0A=
	if ( nodeName =3D=3D=3D "object" ) {=0A=
		dest.outerHTML =3D src.outerHTML;=0A=
=0A=
	} else if ( nodeName =3D=3D=3D "input" && (src.type =3D=3D=3D =
"checkbox" || src.type =3D=3D=3D "radio") ) {=0A=
		// IE6-8 fails to persist the checked state of a cloned checkbox=0A=
		// or radio button. Worse, IE6-7 fail to give the cloned element=0A=
		// a checked appearance if the defaultChecked value isn't also set=0A=
		if ( src.checked ) {=0A=
			dest.defaultChecked =3D dest.checked =3D src.checked;=0A=
		}=0A=
=0A=
		// IE6-7 get confused and end up setting the value of a cloned=0A=
		// checkbox/radio button to an empty string instead of "on"=0A=
		if ( dest.value !=3D=3D src.value ) {=0A=
			dest.value =3D src.value;=0A=
		}=0A=
=0A=
	// IE6-8 fails to return the selected option to the default selected=0A=
	// state when cloning options=0A=
	} else if ( nodeName =3D=3D=3D "option" ) {=0A=
		dest.selected =3D src.defaultSelected;=0A=
=0A=
	// IE6-8 fails to set the defaultValue to the correct value when=0A=
	// cloning other types of input fields=0A=
	} else if ( nodeName =3D=3D=3D "input" || nodeName =3D=3D=3D "textarea" =
) {=0A=
		dest.defaultValue =3D src.defaultValue;=0A=
	}=0A=
=0A=
	// Event data gets referenced instead of copied if the expando=0A=
	// gets copied too=0A=
	dest.removeAttribute( jQuery.expando );=0A=
}=0A=
=0A=
jQuery.buildFragment =3D function( args, nodes, scripts ) {=0A=
	var fragment, cacheable, cacheresults,=0A=
		doc =3D (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : =
document);=0A=
=0A=
	// Only cache "small" (1/2 KB) HTML strings that are associated with =
the main document=0A=
	// Cloning options loses the selected state, so don't cache them=0A=
	// IE 6 doesn't like it when you put <object> or <embed> elements in a =
fragment=0A=
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so =
don't cache=0A=
	if ( args.length =3D=3D=3D 1 && typeof args[0] =3D=3D=3D "string" && =
args[0].length < 512 && doc =3D=3D=3D document &&=0A=
		args[0].charAt(0) =3D=3D=3D "<" && !rnocache.test( args[0] ) && =
(jQuery.support.checkClone || !rchecked.test( args[0] )) ) {=0A=
=0A=
		cacheable =3D true;=0A=
		cacheresults =3D jQuery.fragments[ args[0] ];=0A=
		if ( cacheresults ) {=0A=
			if ( cacheresults !=3D=3D 1 ) {=0A=
				fragment =3D cacheresults;=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	if ( !fragment ) {=0A=
		fragment =3D doc.createDocumentFragment();=0A=
		jQuery.clean( args, doc, fragment, scripts );=0A=
	}=0A=
=0A=
	if ( cacheable ) {=0A=
		jQuery.fragments[ args[0] ] =3D cacheresults ? fragment : 1;=0A=
	}=0A=
=0A=
	return { fragment: fragment, cacheable: cacheable };=0A=
};=0A=
=0A=
jQuery.fragments =3D {};=0A=
=0A=
jQuery.each({=0A=
	appendTo: "append",=0A=
	prependTo: "prepend",=0A=
	insertBefore: "before",=0A=
	insertAfter: "after",=0A=
	replaceAll: "replaceWith"=0A=
}, function( name, original ) {=0A=
	jQuery.fn[ name ] =3D function( selector ) {=0A=
		var ret =3D [],=0A=
			insert =3D jQuery( selector ),=0A=
			parent =3D this.length =3D=3D=3D 1 && this[0].parentNode;=0A=
=0A=
		if ( parent && parent.nodeType =3D=3D=3D 11 && =
parent.childNodes.length =3D=3D=3D 1 && insert.length =3D=3D=3D 1 ) {=0A=
			insert[ original ]( this[0] );=0A=
			return this;=0A=
=0A=
		} else {=0A=
			for ( var i =3D 0, l =3D insert.length; i < l; i++ ) {=0A=
				var elems =3D (i > 0 ? this.clone(true) : this).get();=0A=
				jQuery( insert[i] )[ original ]( elems );=0A=
				ret =3D ret.concat( elems );=0A=
			}=0A=
=0A=
			return this.pushStack( ret, name, insert.selector );=0A=
		}=0A=
	};=0A=
});=0A=
=0A=
function getAll( elem ) {=0A=
	if ( "getElementsByTagName" in elem ) {=0A=
		return elem.getElementsByTagName( "*" );=0A=
	=0A=
	} else if ( "querySelectorAll" in elem ) {=0A=
		return elem.querySelectorAll( "*" );=0A=
=0A=
	} else {=0A=
		return [];=0A=
	}=0A=
}=0A=
=0A=
jQuery.extend({=0A=
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {=0A=
		var clone =3D elem.cloneNode(true),=0A=
				srcElements,=0A=
				destElements,=0A=
				i;=0A=
=0A=
		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) =
&&=0A=
				(elem.nodeType =3D=3D=3D 1 || elem.nodeType =3D=3D=3D 11) && =
!jQuery.isXMLDoc(elem) ) {=0A=
			// IE copies events bound via attachEvent when using cloneNode.=0A=
			// Calling detachEvent on the clone will also remove the events=0A=
			// from the original. In order to get around this, we use some=0A=
			// proprietary methods to clear the events. Thanks to MooTools=0A=
			// guys for this hotness.=0A=
=0A=
			cloneFixAttributes( elem, clone );=0A=
=0A=
			// Using Sizzle here is crazy slow, so we use getElementsByTagName=0A=
			// instead=0A=
			srcElements =3D getAll( elem );=0A=
			destElements =3D getAll( clone );=0A=
=0A=
			// Weird iteration because IE will replace the length property=0A=
			// with an element if you are cloning the body and one of the=0A=
			// elements on the page has a name or id of "length"=0A=
			for ( i =3D 0; srcElements[i]; ++i ) {=0A=
				cloneFixAttributes( srcElements[i], destElements[i] );=0A=
			}=0A=
		}=0A=
=0A=
		// Copy the events from the original to the clone=0A=
		if ( dataAndEvents ) {=0A=
			cloneCopyEvent( elem, clone );=0A=
=0A=
			if ( deepDataAndEvents ) {=0A=
				srcElements =3D getAll( elem );=0A=
				destElements =3D getAll( clone );=0A=
=0A=
				for ( i =3D 0; srcElements[i]; ++i ) {=0A=
					cloneCopyEvent( srcElements[i], destElements[i] );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		// Return the cloned set=0A=
		return clone;=0A=
},=0A=
	clean: function( elems, context, fragment, scripts ) {=0A=
		context =3D context || document;=0A=
=0A=
		// !context.createElement fails in IE with an error but returns typeof =
'object'=0A=
		if ( typeof context.createElement =3D=3D=3D "undefined" ) {=0A=
			context =3D context.ownerDocument || context[0] && =
context[0].ownerDocument || document;=0A=
		}=0A=
=0A=
		var ret =3D [];=0A=
=0A=
		for ( var i =3D 0, elem; (elem =3D elems[i]) !=3D null; i++ ) {=0A=
			if ( typeof elem =3D=3D=3D "number" ) {=0A=
				elem +=3D "";=0A=
			}=0A=
=0A=
			if ( !elem ) {=0A=
				continue;=0A=
			}=0A=
=0A=
			// Convert html string into DOM nodes=0A=
			if ( typeof elem =3D=3D=3D "string" && !rhtml.test( elem ) ) {=0A=
				elem =3D context.createTextNode( elem );=0A=
=0A=
			} else if ( typeof elem =3D=3D=3D "string" ) {=0A=
				// Fix "XHTML"-style tags in all browsers=0A=
				elem =3D elem.replace(rxhtmlTag, "<$1></$2>");=0A=
=0A=
				// Trim whitespace, otherwise indexOf won't work as expected=0A=
				var tag =3D (rtagName.exec( elem ) || ["", ""])[1].toLowerCase(),=0A=
					wrap =3D wrapMap[ tag ] || wrapMap._default,=0A=
					depth =3D wrap[0],=0A=
					div =3D context.createElement("div");=0A=
=0A=
				// Go to html and back, then peel off extra wrappers=0A=
				div.innerHTML =3D wrap[1] + elem + wrap[2];=0A=
=0A=
				// Move to the right depth=0A=
				while ( depth-- ) {=0A=
					div =3D div.lastChild;=0A=
				}=0A=
=0A=
				// Remove IE's autoinserted <tbody> from table fragments=0A=
				if ( !jQuery.support.tbody ) {=0A=
=0A=
					// String was a <table>, *may* have spurious <tbody>=0A=
					var hasBody =3D rtbody.test(elem),=0A=
						tbody =3D tag =3D=3D=3D "table" && !hasBody ?=0A=
							div.firstChild && div.firstChild.childNodes :=0A=
=0A=
							// String was a bare <thead> or <tfoot>=0A=
							wrap[1] =3D=3D=3D "<table>" && !hasBody ?=0A=
								div.childNodes :=0A=
								[];=0A=
=0A=
					for ( var j =3D tbody.length - 1; j >=3D 0 ; --j ) {=0A=
						if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j =
].childNodes.length ) {=0A=
							tbody[ j ].parentNode.removeChild( tbody[ j ] );=0A=
						}=0A=
					}=0A=
=0A=
				}=0A=
=0A=
				// IE completely kills leading whitespace when innerHTML is used=0A=
				if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( =
elem ) ) {=0A=
					div.insertBefore( context.createTextNode( =
rleadingWhitespace.exec(elem)[0] ), div.firstChild );=0A=
				}=0A=
=0A=
				elem =3D div.childNodes;=0A=
			}=0A=
=0A=
			if ( elem.nodeType ) {=0A=
				ret.push( elem );=0A=
			} else {=0A=
				ret =3D jQuery.merge( ret, elem );=0A=
			}=0A=
		}=0A=
=0A=
		if ( fragment ) {=0A=
			for ( i =3D 0; ret[i]; i++ ) {=0A=
				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type =
|| ret[i].type.toLowerCase() =3D=3D=3D "text/javascript") ) {=0A=
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( =
ret[i] ) : ret[i] );=0A=
=0A=
				} else {=0A=
					if ( ret[i].nodeType =3D=3D=3D 1 ) {=0A=
						ret.splice.apply( ret, [i + 1, =
0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))) );=0A=
					}=0A=
					fragment.appendChild( ret[i] );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return ret;=0A=
	},=0A=
=0A=
	cleanData: function( elems ) {=0A=
		var data, id, cache =3D jQuery.cache, internalKey =3D jQuery.expando, =
special =3D jQuery.event.special,=0A=
			deleteExpando =3D jQuery.support.deleteExpando;=0A=
=0A=
		for ( var i =3D 0, elem; (elem =3D elems[i]) !=3D null; i++ ) {=0A=
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {=0A=
				continue;=0A=
			}=0A=
=0A=
			id =3D elem[ jQuery.expando ];=0A=
=0A=
			if ( id ) {=0A=
				data =3D cache[ id ] && cache[ id ][ internalKey ];=0A=
=0A=
				if ( data && data.events ) {=0A=
					for ( var type in data.events ) {=0A=
						if ( special[ type ] ) {=0A=
							jQuery.event.remove( elem, type );=0A=
=0A=
						// This is a shortcut to avoid jQuery.event.remove's overhead=0A=
						} else {=0A=
							jQuery.removeEvent( elem, type, data.handle );=0A=
						}=0A=
					}=0A=
=0A=
					// Null the DOM reference to avoid IE6/7/8 leak (#7054)=0A=
					if ( data.handle ) {=0A=
						data.handle.elem =3D null;=0A=
					}=0A=
				}=0A=
=0A=
				if ( deleteExpando ) {=0A=
					delete elem[ jQuery.expando ];=0A=
=0A=
				} else if ( elem.removeAttribute ) {=0A=
					elem.removeAttribute( jQuery.expando );=0A=
				}=0A=
=0A=
				delete cache[ id ];=0A=
			}=0A=
		}=0A=
	}=0A=
});=0A=
=0A=
function evalScript( i, elem ) {=0A=
	if ( elem.src ) {=0A=
		jQuery.ajax({=0A=
			url: elem.src,=0A=
			async: false,=0A=
			dataType: "script"=0A=
		});=0A=
	} else {=0A=
		jQuery.globalEval( elem.text || elem.textContent || elem.innerHTML || =
"" );=0A=
	}=0A=
=0A=
	if ( elem.parentNode ) {=0A=
		elem.parentNode.removeChild( elem );=0A=
	}=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
var ralpha =3D /alpha\([^)]*\)/i,=0A=
	ropacity =3D /opacity=3D([^)]*)/,=0A=
	rdashAlpha =3D /-([a-z])/ig,=0A=
	// fixed for IE9, see #8346=0A=
	rupper =3D /([A-Z]|^ms)/g,=0A=
	rnumpx =3D /^-?\d+(?:px)?$/i,=0A=
	rnum =3D /^-?\d/,=0A=
=0A=
	cssShow =3D { position: "absolute", visibility: "hidden", display: =
"block" },=0A=
	cssWidth =3D [ "Left", "Right" ],=0A=
	cssHeight =3D [ "Top", "Bottom" ],=0A=
	curCSS,=0A=
=0A=
	getComputedStyle,=0A=
	currentStyle,=0A=
=0A=
	fcamelCase =3D function( all, letter ) {=0A=
		return letter.toUpperCase();=0A=
	};=0A=
=0A=
jQuery.fn.css =3D function( name, value ) {=0A=
	// Setting 'undefined' is a no-op=0A=
	if ( arguments.length =3D=3D=3D 2 && value =3D=3D=3D undefined ) {=0A=
		return this;=0A=
	}=0A=
=0A=
	return jQuery.access( this, name, value, true, function( elem, name, =
value ) {=0A=
		return value !=3D=3D undefined ?=0A=
			jQuery.style( elem, name, value ) :=0A=
			jQuery.css( elem, name );=0A=
	});=0A=
};=0A=
=0A=
jQuery.extend({=0A=
	// Add in style property hooks for overriding the default=0A=
	// behavior of getting and setting a style property=0A=
	cssHooks: {=0A=
		opacity: {=0A=
			get: function( elem, computed ) {=0A=
				if ( computed ) {=0A=
					// We should always get a number back from opacity=0A=
					var ret =3D curCSS( elem, "opacity", "opacity" );=0A=
					return ret =3D=3D=3D "" ? "1" : ret;=0A=
=0A=
				} else {=0A=
					return elem.style.opacity;=0A=
				}=0A=
			}=0A=
		}=0A=
	},=0A=
=0A=
	// Exclude the following css properties to add px=0A=
	cssNumber: {=0A=
		"zIndex": true,=0A=
		"fontWeight": true,=0A=
		"opacity": true,=0A=
		"zoom": true,=0A=
		"lineHeight": true=0A=
	},=0A=
=0A=
	// Add in properties whose names you wish to fix before=0A=
	// setting or getting the value=0A=
	cssProps: {=0A=
		// normalize float css property=0A=
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"=0A=
	},=0A=
=0A=
	// Get and set the style property on a DOM Node=0A=
	style: function( elem, name, value, extra ) {=0A=
		// Don't set styles on text and comment nodes=0A=
		if ( !elem || elem.nodeType =3D=3D=3D 3 || elem.nodeType =3D=3D=3D 8 =
|| !elem.style ) {=0A=
			return;=0A=
		}=0A=
=0A=
		// Make sure that we're working with the right name=0A=
		var ret, origName =3D jQuery.camelCase( name ),=0A=
			style =3D elem.style, hooks =3D jQuery.cssHooks[ origName ];=0A=
=0A=
		name =3D jQuery.cssProps[ origName ] || origName;=0A=
=0A=
		// Check if we're setting a value=0A=
		if ( value !=3D=3D undefined ) {=0A=
			// Make sure that NaN and null values aren't set. See: #7116=0A=
			if ( typeof value =3D=3D=3D "number" && isNaN( value ) || value =
=3D=3D null ) {=0A=
				return;=0A=
			}=0A=
=0A=
			// If a number was passed in, add 'px' to the (except for certain CSS =
properties)=0A=
			if ( typeof value =3D=3D=3D "number" && !jQuery.cssNumber[ origName ] =
) {=0A=
				value +=3D "px";=0A=
			}=0A=
=0A=
			// If a hook was provided, use that value, otherwise just set the =
specified value=0A=
			if ( !hooks || !("set" in hooks) || (value =3D hooks.set( elem, value =
)) !=3D=3D undefined ) {=0A=
				// Wrapped to prevent IE from throwing errors when 'invalid' values =
are provided=0A=
				// Fixes bug #5509=0A=
				try {=0A=
					style[ name ] =3D value;=0A=
				} catch(e) {}=0A=
			}=0A=
=0A=
		} else {=0A=
			// If a hook was provided get the non-computed value from there=0A=
			if ( hooks && "get" in hooks && (ret =3D hooks.get( elem, false, =
extra )) !=3D=3D undefined ) {=0A=
				return ret;=0A=
			}=0A=
=0A=
			// Otherwise just get the value from the style object=0A=
			return style[ name ];=0A=
		}=0A=
	},=0A=
=0A=
	css: function( elem, name, extra ) {=0A=
		// Make sure that we're working with the right name=0A=
		var ret, origName =3D jQuery.camelCase( name ),=0A=
			hooks =3D jQuery.cssHooks[ origName ];=0A=
=0A=
		name =3D jQuery.cssProps[ origName ] || origName;=0A=
=0A=
		// If a hook was provided get the computed value from there=0A=
		if ( hooks && "get" in hooks && (ret =3D hooks.get( elem, true, extra =
)) !=3D=3D undefined ) {=0A=
			return ret;=0A=
=0A=
		// Otherwise, if a way to get the computed value exists, use that=0A=
		} else if ( curCSS ) {=0A=
			return curCSS( elem, name, origName );=0A=
		}=0A=
	},=0A=
=0A=
	// A method for quickly swapping in/out CSS properties to get correct =
calculations=0A=
	swap: function( elem, options, callback ) {=0A=
		var old =3D {};=0A=
=0A=
		// Remember the old values, and insert the new ones=0A=
		for ( var name in options ) {=0A=
			old[ name ] =3D elem.style[ name ];=0A=
			elem.style[ name ] =3D options[ name ];=0A=
		}=0A=
=0A=
		callback.call( elem );=0A=
=0A=
		// Revert the old values=0A=
		for ( name in options ) {=0A=
			elem.style[ name ] =3D old[ name ];=0A=
		}=0A=
	},=0A=
=0A=
	camelCase: function( string ) {=0A=
		return string.replace( rdashAlpha, fcamelCase );=0A=
	}=0A=
});=0A=
=0A=
// DEPRECATED, Use jQuery.css() instead=0A=
jQuery.curCSS =3D jQuery.css;=0A=
=0A=
jQuery.each(["height", "width"], function( i, name ) {=0A=
	jQuery.cssHooks[ name ] =3D {=0A=
		get: function( elem, computed, extra ) {=0A=
			var val;=0A=
=0A=
			if ( computed ) {=0A=
				if ( elem.offsetWidth !=3D=3D 0 ) {=0A=
					val =3D getWH( elem, name, extra );=0A=
=0A=
				} else {=0A=
					jQuery.swap( elem, cssShow, function() {=0A=
						val =3D getWH( elem, name, extra );=0A=
					});=0A=
				}=0A=
=0A=
				if ( val <=3D 0 ) {=0A=
					val =3D curCSS( elem, name, name );=0A=
=0A=
					if ( val =3D=3D=3D "0px" && currentStyle ) {=0A=
						val =3D currentStyle( elem, name, name );=0A=
					}=0A=
=0A=
					if ( val !=3D null ) {=0A=
						// Should return "auto" instead of 0, use 0 for=0A=
						// temporary backwards-compat=0A=
						return val =3D=3D=3D "" || val =3D=3D=3D "auto" ? "0px" : val;=0A=
					}=0A=
				}=0A=
=0A=
				if ( val < 0 || val =3D=3D null ) {=0A=
					val =3D elem.style[ name ];=0A=
=0A=
					// Should return "auto" instead of 0, use 0 for=0A=
					// temporary backwards-compat=0A=
					return val =3D=3D=3D "" || val =3D=3D=3D "auto" ? "0px" : val;=0A=
				}=0A=
=0A=
				return typeof val =3D=3D=3D "string" ? val : val + "px";=0A=
			}=0A=
		},=0A=
=0A=
		set: function( elem, value ) {=0A=
			if ( rnumpx.test( value ) ) {=0A=
				// ignore negative width and height values #1599=0A=
				value =3D parseFloat(value);=0A=
=0A=
				if ( value >=3D 0 ) {=0A=
					return value + "px";=0A=
				}=0A=
=0A=
			} else {=0A=
				return value;=0A=
			}=0A=
		}=0A=
	};=0A=
});=0A=
=0A=
if ( !jQuery.support.opacity ) {=0A=
	jQuery.cssHooks.opacity =3D {=0A=
		get: function( elem, computed ) {=0A=
			// IE uses filters for opacity=0A=
			return ropacity.test((computed && elem.currentStyle ? =
elem.currentStyle.filter : elem.style.filter) || "") ?=0A=
				(parseFloat(RegExp.$1) / 100) + "" :=0A=
				computed ? "1" : "";=0A=
		},=0A=
=0A=
		set: function( elem, value ) {=0A=
			var style =3D elem.style;=0A=
=0A=
			// IE has trouble with opacity if it does not have layout=0A=
			// Force it by setting the zoom level=0A=
			style.zoom =3D 1;=0A=
=0A=
			// Set the alpha filter to set the opacity=0A=
			var opacity =3D jQuery.isNaN(value) ?=0A=
				"" :=0A=
				"alpha(opacity=3D" + value * 100 + ")",=0A=
				filter =3D style.filter || "";=0A=
=0A=
			style.filter =3D ralpha.test(filter) ?=0A=
				filter.replace(ralpha, opacity) :=0A=
				style.filter + ' ' + opacity;=0A=
		}=0A=
	};=0A=
}=0A=
=0A=
jQuery(function() {=0A=
	// This hook cannot be added until DOM ready because the support test=0A=
	// for it is not run until after DOM ready=0A=
	if ( !jQuery.support.reliableMarginRight ) {=0A=
		jQuery.cssHooks.marginRight =3D {=0A=
			get: function( elem, computed ) {=0A=
				// WebKit Bug 13343 - getComputedStyle returns wrong value for =
margin-right=0A=
				// Work around by temporarily setting element display to inline-block=0A=
				var ret;=0A=
				jQuery.swap( elem, { "display": "inline-block" }, function() {=0A=
					if ( computed ) {=0A=
						ret =3D curCSS( elem, "margin-right", "marginRight" );=0A=
					} else {=0A=
						ret =3D elem.style.marginRight;=0A=
					}=0A=
				});=0A=
				return ret;=0A=
			}=0A=
		};=0A=
	}=0A=
});=0A=
=0A=
if ( document.defaultView && document.defaultView.getComputedStyle ) {=0A=
	getComputedStyle =3D function( elem, newName, name ) {=0A=
		var ret, defaultView, computedStyle;=0A=
=0A=
		name =3D name.replace( rupper, "-$1" ).toLowerCase();=0A=
=0A=
		if ( !(defaultView =3D elem.ownerDocument.defaultView) ) {=0A=
			return undefined;=0A=
		}=0A=
=0A=
		if ( (computedStyle =3D defaultView.getComputedStyle( elem, null )) ) {=0A=
			ret =3D computedStyle.getPropertyValue( name );=0A=
			if ( ret =3D=3D=3D "" && !jQuery.contains( =
elem.ownerDocument.documentElement, elem ) ) {=0A=
				ret =3D jQuery.style( elem, name );=0A=
			}=0A=
		}=0A=
=0A=
		return ret;=0A=
	};=0A=
}=0A=
=0A=
if ( document.documentElement.currentStyle ) {=0A=
	currentStyle =3D function( elem, name ) {=0A=
		var left,=0A=
			ret =3D elem.currentStyle && elem.currentStyle[ name ],=0A=
			rsLeft =3D elem.runtimeStyle && elem.runtimeStyle[ name ],=0A=
			style =3D elem.style;=0A=
=0A=
		// From the awesome hack by Dean Edwards=0A=
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291=0A=
=0A=
		// If we're not dealing with a regular pixel number=0A=
		// but a number that has a weird ending, we need to convert it to =
pixels=0A=
		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {=0A=
			// Remember the original values=0A=
			left =3D style.left;=0A=
=0A=
			// Put in the new values to get a computed value out=0A=
			if ( rsLeft ) {=0A=
				elem.runtimeStyle.left =3D elem.currentStyle.left;=0A=
			}=0A=
			style.left =3D name =3D=3D=3D "fontSize" ? "1em" : (ret || 0);=0A=
			ret =3D style.pixelLeft + "px";=0A=
=0A=
			// Revert the changed values=0A=
			style.left =3D left;=0A=
			if ( rsLeft ) {=0A=
				elem.runtimeStyle.left =3D rsLeft;=0A=
			}=0A=
		}=0A=
=0A=
		return ret =3D=3D=3D "" ? "auto" : ret;=0A=
	};=0A=
}=0A=
=0A=
curCSS =3D getComputedStyle || currentStyle;=0A=
=0A=
function getWH( elem, name, extra ) {=0A=
	var which =3D name =3D=3D=3D "width" ? cssWidth : cssHeight,=0A=
		val =3D name =3D=3D=3D "width" ? elem.offsetWidth : elem.offsetHeight;=0A=
=0A=
	if ( extra =3D=3D=3D "border" ) {=0A=
		return val;=0A=
	}=0A=
=0A=
	jQuery.each( which, function() {=0A=
		if ( !extra ) {=0A=
			val -=3D parseFloat(jQuery.css( elem, "padding" + this )) || 0;=0A=
		}=0A=
=0A=
		if ( extra =3D=3D=3D "margin" ) {=0A=
			val +=3D parseFloat(jQuery.css( elem, "margin" + this )) || 0;=0A=
=0A=
		} else {=0A=
			val -=3D parseFloat(jQuery.css( elem, "border" + this + "Width" )) || =
0;=0A=
		}=0A=
	});=0A=
=0A=
	return val;=0A=
}=0A=
=0A=
if ( jQuery.expr && jQuery.expr.filters ) {=0A=
	jQuery.expr.filters.hidden =3D function( elem ) {=0A=
		var width =3D elem.offsetWidth,=0A=
			height =3D elem.offsetHeight;=0A=
=0A=
		return (width =3D=3D=3D 0 && height =3D=3D=3D 0) || =
(!jQuery.support.reliableHiddenOffsets && (elem.style.display || =
jQuery.css( elem, "display" )) =3D=3D=3D "none");=0A=
	};=0A=
=0A=
	jQuery.expr.filters.visible =3D function( elem ) {=0A=
		return !jQuery.expr.filters.hidden( elem );=0A=
	};=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
var r20 =3D /%20/g,=0A=
	rbracket =3D /\[\]$/,=0A=
	rCRLF =3D /\r?\n/g,=0A=
	rhash =3D /#.*$/,=0A=
	rheaders =3D /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r =
character at EOL=0A=
	rinput =3D =
/^(?:color|date|datetime|email|hidden|month|number|password|range|search|=
tel|text|time|url|week)$/i,=0A=
	// #7653, #8125, #8152: local protocol detection=0A=
	rlocalProtocol =3D =
/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,=0A=
	rnoContent =3D /^(?:GET|HEAD)$/,=0A=
	rprotocol =3D /^\/\//,=0A=
	rquery =3D /\?/,=0A=
	rscript =3D /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,=0A=
	rselectTextarea =3D /^(?:select|textarea)/i,=0A=
	rspacesAjax =3D /\s+/,=0A=
	rts =3D /([?&])_=3D[^&]*/,=0A=
	rucHeaders =3D /(^|\-)([a-z])/g,=0A=
	rucHeadersFunc =3D function( _, $1, $2 ) {=0A=
		return $1 + $2.toUpperCase();=0A=
	},=0A=
	rurl =3D /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,=0A=
=0A=
	// Keep a copy of the old load method=0A=
	_load =3D jQuery.fn.load,=0A=
=0A=
	/* Prefilters=0A=
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js =
for an example)=0A=
	 * 2) These are called:=0A=
	 *    - BEFORE asking for a transport=0A=
	 *    - AFTER param serialization (s.data is a string if s.processData =
is true)=0A=
	 * 3) key is the dataType=0A=
	 * 4) the catchall symbol "*" can be used=0A=
	 * 5) execution will start with transport dataType and THEN continue =
down to "*" if needed=0A=
	 */=0A=
	prefilters =3D {},=0A=
=0A=
	/* Transports bindings=0A=
	 * 1) key is the dataType=0A=
	 * 2) the catchall symbol "*" can be used=0A=
	 * 3) selection will start with transport dataType and THEN go to "*" =
if needed=0A=
	 */=0A=
	transports =3D {},=0A=
=0A=
	// Document location=0A=
	ajaxLocation,=0A=
=0A=
	// Document location segments=0A=
	ajaxLocParts;=0A=
=0A=
// #8138, IE may throw an exception when accessing=0A=
// a field from document.location if document.domain has been set=0A=
try {=0A=
	ajaxLocation =3D document.location.href;=0A=
} catch( e ) {=0A=
	// Use the href attribute of an A element=0A=
	// since IE will modify it given document.location=0A=
	ajaxLocation =3D document.createElement( "a" );=0A=
	ajaxLocation.href =3D "";=0A=
	ajaxLocation =3D ajaxLocation.href;=0A=
}=0A=
=0A=
// Segment location into parts=0A=
ajaxLocParts =3D rurl.exec( ajaxLocation.toLowerCase() ) || [];=0A=
=0A=
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport=0A=
function addToPrefiltersOrTransports( structure ) {=0A=
=0A=
	// dataTypeExpression is optional and defaults to "*"=0A=
	return function( dataTypeExpression, func ) {=0A=
=0A=
		if ( typeof dataTypeExpression !=3D=3D "string" ) {=0A=
			func =3D dataTypeExpression;=0A=
			dataTypeExpression =3D "*";=0A=
		}=0A=
=0A=
		if ( jQuery.isFunction( func ) ) {=0A=
			var dataTypes =3D dataTypeExpression.toLowerCase().split( rspacesAjax =
),=0A=
				i =3D 0,=0A=
				length =3D dataTypes.length,=0A=
				dataType,=0A=
				list,=0A=
				placeBefore;=0A=
=0A=
			// For each dataType in the dataTypeExpression=0A=
			for(; i < length; i++ ) {=0A=
				dataType =3D dataTypes[ i ];=0A=
				// We control if we're asked to add before=0A=
				// any existing element=0A=
				placeBefore =3D /^\+/.test( dataType );=0A=
				if ( placeBefore ) {=0A=
					dataType =3D dataType.substr( 1 ) || "*";=0A=
				}=0A=
				list =3D structure[ dataType ] =3D structure[ dataType ] || [];=0A=
				// then we add to the structure accordingly=0A=
				list[ placeBefore ? "unshift" : "push" ]( func );=0A=
			}=0A=
		}=0A=
	};=0A=
}=0A=
=0A=
//Base inspection function for prefilters and transports=0A=
function inspectPrefiltersOrTransports( structure, options, =
originalOptions, jqXHR,=0A=
		dataType /* internal */, inspected /* internal */ ) {=0A=
=0A=
	dataType =3D dataType || options.dataTypes[ 0 ];=0A=
	inspected =3D inspected || {};=0A=
=0A=
	inspected[ dataType ] =3D true;=0A=
=0A=
	var list =3D structure[ dataType ],=0A=
		i =3D 0,=0A=
		length =3D list ? list.length : 0,=0A=
		executeOnly =3D ( structure =3D=3D=3D prefilters ),=0A=
		selection;=0A=
=0A=
	for(; i < length && ( executeOnly || !selection ); i++ ) {=0A=
		selection =3D list[ i ]( options, originalOptions, jqXHR );=0A=
		// If we got redirected to another dataType=0A=
		// we try there if executing only and not done already=0A=
		if ( typeof selection =3D=3D=3D "string" ) {=0A=
			if ( !executeOnly || inspected[ selection ] ) {=0A=
				selection =3D undefined;=0A=
			} else {=0A=
				options.dataTypes.unshift( selection );=0A=
				selection =3D inspectPrefiltersOrTransports(=0A=
						structure, options, originalOptions, jqXHR, selection, inspected );=0A=
			}=0A=
		}=0A=
	}=0A=
	// If we're only executing or nothing was selected=0A=
	// we try the catchall dataType if not done already=0A=
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {=0A=
		selection =3D inspectPrefiltersOrTransports(=0A=
				structure, options, originalOptions, jqXHR, "*", inspected );=0A=
	}=0A=
	// unnecessary when only executing (prefilters)=0A=
	// but it'll be ignored by the caller in that case=0A=
	return selection;=0A=
}=0A=
=0A=
jQuery.fn.extend({=0A=
	load: function( url, params, callback ) {=0A=
		if ( typeof url !=3D=3D "string" && _load ) {=0A=
			return _load.apply( this, arguments );=0A=
=0A=
		// Don't do a request if no elements are being requested=0A=
		} else if ( !this.length ) {=0A=
			return this;=0A=
		}=0A=
=0A=
		var off =3D url.indexOf( " " );=0A=
		if ( off >=3D 0 ) {=0A=
			var selector =3D url.slice( off, url.length );=0A=
			url =3D url.slice( 0, off );=0A=
		}=0A=
=0A=
		// Default to a GET request=0A=
		var type =3D "GET";=0A=
=0A=
		// If the second parameter was provided=0A=
		if ( params ) {=0A=
			// If it's a function=0A=
			if ( jQuery.isFunction( params ) ) {=0A=
				// We assume that it's the callback=0A=
				callback =3D params;=0A=
				params =3D undefined;=0A=
=0A=
			// Otherwise, build a param string=0A=
			} else if ( typeof params =3D=3D=3D "object" ) {=0A=
				params =3D jQuery.param( params, jQuery.ajaxSettings.traditional );=0A=
				type =3D "POST";=0A=
			}=0A=
		}=0A=
=0A=
		var self =3D this;=0A=
=0A=
		// Request the remote document=0A=
		jQuery.ajax({=0A=
			url: url,=0A=
			type: type,=0A=
			dataType: "html",=0A=
			data: params,=0A=
			// Complete callback (responseText is used internally)=0A=
			complete: function( jqXHR, status, responseText ) {=0A=
				// Store the response as specified by the jqXHR object=0A=
				responseText =3D jqXHR.responseText;=0A=
				// If successful, inject the HTML into all the matched elements=0A=
				if ( jqXHR.isResolved() ) {=0A=
					// #4825: Get the actual response in case=0A=
					// a dataFilter is present in ajaxSettings=0A=
					jqXHR.done(function( r ) {=0A=
						responseText =3D r;=0A=
					});=0A=
					// See if a selector was specified=0A=
					self.html( selector ?=0A=
						// Create a dummy div to hold the results=0A=
						jQuery("<div>")=0A=
							// inject the contents of the document in, removing the scripts=0A=
							// to avoid any 'Permission Denied' errors in IE=0A=
							.append(responseText.replace(rscript, ""))=0A=
=0A=
							// Locate the specified elements=0A=
							.find(selector) :=0A=
=0A=
						// If not, just inject the full result=0A=
						responseText );=0A=
				}=0A=
=0A=
				if ( callback ) {=0A=
					self.each( callback, [ responseText, status, jqXHR ] );=0A=
				}=0A=
			}=0A=
		});=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	serialize: function() {=0A=
		return jQuery.param( this.serializeArray() );=0A=
	},=0A=
=0A=
	serializeArray: function() {=0A=
		return this.map(function(){=0A=
			return this.elements ? jQuery.makeArray( this.elements ) : this;=0A=
		})=0A=
		.filter(function(){=0A=
			return this.name && !this.disabled &&=0A=
				( this.checked || rselectTextarea.test( this.nodeName ) ||=0A=
					rinput.test( this.type ) );=0A=
		})=0A=
		.map(function( i, elem ){=0A=
			var val =3D jQuery( this ).val();=0A=
=0A=
			return val =3D=3D null ?=0A=
				null :=0A=
				jQuery.isArray( val ) ?=0A=
					jQuery.map( val, function( val, i ){=0A=
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };=0A=
					}) :=0A=
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };=0A=
		}).get();=0A=
	}=0A=
});=0A=
=0A=
// Attach a bunch of functions for handling common AJAX events=0A=
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess =
ajaxSend".split( " " ), function( i, o ){=0A=
	jQuery.fn[ o ] =3D function( f ){=0A=
		return this.bind( o, f );=0A=
	};=0A=
} );=0A=
=0A=
jQuery.each( [ "get", "post" ], function( i, method ) {=0A=
	jQuery[ method ] =3D function( url, data, callback, type ) {=0A=
		// shift arguments if data argument was omitted=0A=
		if ( jQuery.isFunction( data ) ) {=0A=
			type =3D type || callback;=0A=
			callback =3D data;=0A=
			data =3D undefined;=0A=
		}=0A=
=0A=
		return jQuery.ajax({=0A=
			type: method,=0A=
			url: url,=0A=
			data: data,=0A=
			success: callback,=0A=
			dataType: type=0A=
		});=0A=
	};=0A=
} );=0A=
=0A=
jQuery.extend({=0A=
=0A=
	getScript: function( url, callback ) {=0A=
		return jQuery.get( url, undefined, callback, "script" );=0A=
	},=0A=
=0A=
	getJSON: function( url, data, callback ) {=0A=
		return jQuery.get( url, data, callback, "json" );=0A=
	},=0A=
=0A=
	// Creates a full fledged settings object into target=0A=
	// with both ajaxSettings and settings fields.=0A=
	// If target is omitted, writes into ajaxSettings.=0A=
	ajaxSetup: function ( target, settings ) {=0A=
		if ( !settings ) {=0A=
			// Only one parameter, we extend ajaxSettings=0A=
			settings =3D target;=0A=
			target =3D jQuery.extend( true, jQuery.ajaxSettings, settings );=0A=
		} else {=0A=
			// target was provided, we extend into it=0A=
			jQuery.extend( true, target, jQuery.ajaxSettings, settings );=0A=
		}=0A=
		// Flatten fields we don't want deep extended=0A=
		for( var field in { context: 1, url: 1 } ) {=0A=
			if ( field in settings ) {=0A=
				target[ field ] =3D settings[ field ];=0A=
			} else if( field in jQuery.ajaxSettings ) {=0A=
				target[ field ] =3D jQuery.ajaxSettings[ field ];=0A=
			}=0A=
		}=0A=
		return target;=0A=
	},=0A=
=0A=
	ajaxSettings: {=0A=
		url: ajaxLocation,=0A=
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),=0A=
		global: true,=0A=
		type: "GET",=0A=
		contentType: "application/x-www-form-urlencoded",=0A=
		processData: true,=0A=
		async: true,=0A=
		/*=0A=
		timeout: 0,=0A=
		data: null,=0A=
		dataType: null,=0A=
		username: null,=0A=
		password: null,=0A=
		cache: null,=0A=
		traditional: false,=0A=
		headers: {},=0A=
		*/=0A=
=0A=
		accepts: {=0A=
			xml: "application/xml, text/xml",=0A=
			html: "text/html",=0A=
			text: "text/plain",=0A=
			json: "application/json, text/javascript",=0A=
			"*": "*/*"=0A=
		},=0A=
=0A=
		contents: {=0A=
			xml: /xml/,=0A=
			html: /html/,=0A=
			json: /json/=0A=
		},=0A=
=0A=
		responseFields: {=0A=
			xml: "responseXML",=0A=
			text: "responseText"=0A=
		},=0A=
=0A=
		// List of data converters=0A=
		// 1) key format is "source_type destination_type" (a single space =
in-between)=0A=
		// 2) the catchall symbol "*" can be used for source_type=0A=
		converters: {=0A=
=0A=
			// Convert anything to text=0A=
			"* text": window.String,=0A=
=0A=
			// Text to html (true =3D no transformation)=0A=
			"text html": true,=0A=
=0A=
			// Evaluate text as a json expression=0A=
			"text json": jQuery.parseJSON,=0A=
=0A=
			// Parse text as xml=0A=
			"text xml": jQuery.parseXML=0A=
		}=0A=
	},=0A=
=0A=
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),=0A=
	ajaxTransport: addToPrefiltersOrTransports( transports ),=0A=
=0A=
	// Main method=0A=
	ajax: function( url, options ) {=0A=
=0A=
		// If url is an object, simulate pre-1.5 signature=0A=
		if ( typeof url =3D=3D=3D "object" ) {=0A=
			options =3D url;=0A=
			url =3D undefined;=0A=
		}=0A=
=0A=
		// Force options to be an object=0A=
		options =3D options || {};=0A=
=0A=
		var // Create the final options object=0A=
			s =3D jQuery.ajaxSetup( {}, options ),=0A=
			// Callbacks context=0A=
			callbackContext =3D s.context || s,=0A=
			// Context for global events=0A=
			// It's the callbackContext if one was provided in the options=0A=
			// and if it's a DOM node or a jQuery collection=0A=
			globalEventContext =3D callbackContext !=3D=3D s &&=0A=
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?=0A=
						jQuery( callbackContext ) : jQuery.event,=0A=
			// Deferreds=0A=
			deferred =3D jQuery.Deferred(),=0A=
			completeDeferred =3D jQuery._Deferred(),=0A=
			// Status-dependent callbacks=0A=
			statusCode =3D s.statusCode || {},=0A=
			// ifModified key=0A=
			ifModifiedKey,=0A=
			// Headers (they are sent all at once)=0A=
			requestHeaders =3D {},=0A=
			// Response headers=0A=
			responseHeadersString,=0A=
			responseHeaders,=0A=
			// transport=0A=
			transport,=0A=
			// timeout handle=0A=
			timeoutTimer,=0A=
			// Cross-domain detection vars=0A=
			parts,=0A=
			// The jqXHR state=0A=
			state =3D 0,=0A=
			// To know if global events are to be dispatched=0A=
			fireGlobals,=0A=
			// Loop variable=0A=
			i,=0A=
			// Fake xhr=0A=
			jqXHR =3D {=0A=
=0A=
				readyState: 0,=0A=
=0A=
				// Caches the header=0A=
				setRequestHeader: function( name, value ) {=0A=
					if ( !state ) {=0A=
						requestHeaders[ name.toLowerCase().replace( rucHeaders, =
rucHeadersFunc ) ] =3D value;=0A=
					}=0A=
					return this;=0A=
				},=0A=
=0A=
				// Raw string=0A=
				getAllResponseHeaders: function() {=0A=
					return state =3D=3D=3D 2 ? responseHeadersString : null;=0A=
				},=0A=
=0A=
				// Builds headers hashtable if needed=0A=
				getResponseHeader: function( key ) {=0A=
					var match;=0A=
					if ( state =3D=3D=3D 2 ) {=0A=
						if ( !responseHeaders ) {=0A=
							responseHeaders =3D {};=0A=
							while( ( match =3D rheaders.exec( responseHeadersString ) ) ) {=0A=
								responseHeaders[ match[1].toLowerCase() ] =3D match[ 2 ];=0A=
							}=0A=
						}=0A=
						match =3D responseHeaders[ key.toLowerCase() ];=0A=
					}=0A=
					return match =3D=3D=3D undefined ? null : match;=0A=
				},=0A=
=0A=
				// Overrides response content-type header=0A=
				overrideMimeType: function( type ) {=0A=
					if ( !state ) {=0A=
						s.mimeType =3D type;=0A=
					}=0A=
					return this;=0A=
				},=0A=
=0A=
				// Cancel the request=0A=
				abort: function( statusText ) {=0A=
					statusText =3D statusText || "abort";=0A=
					if ( transport ) {=0A=
						transport.abort( statusText );=0A=
					}=0A=
					done( 0, statusText );=0A=
					return this;=0A=
				}=0A=
			};=0A=
=0A=
		// Callback for when everything is done=0A=
		// It is defined here because jslint complains if it is declared=0A=
		// at the end of the function (which would be more logical and =
readable)=0A=
		function done( status, statusText, responses, headers ) {=0A=
=0A=
			// Called once=0A=
			if ( state =3D=3D=3D 2 ) {=0A=
				return;=0A=
			}=0A=
=0A=
			// State is "done" now=0A=
			state =3D 2;=0A=
=0A=
			// Clear timeout if it exists=0A=
			if ( timeoutTimer ) {=0A=
				clearTimeout( timeoutTimer );=0A=
			}=0A=
=0A=
			// Dereference transport for early garbage collection=0A=
			// (no matter how long the jqXHR object will be used)=0A=
			transport =3D undefined;=0A=
=0A=
			// Cache response headers=0A=
			responseHeadersString =3D headers || "";=0A=
=0A=
			// Set readyState=0A=
			jqXHR.readyState =3D status ? 4 : 0;=0A=
=0A=
			var isSuccess,=0A=
				success,=0A=
				error,=0A=
				response =3D responses ? ajaxHandleResponses( s, jqXHR, responses ) =
: undefined,=0A=
				lastModified,=0A=
				etag;=0A=
=0A=
			// If successful, handle type chaining=0A=
			if ( status >=3D 200 && status < 300 || status =3D=3D=3D 304 ) {=0A=
=0A=
				// Set the If-Modified-Since and/or If-None-Match header, if in =
ifModified mode.=0A=
				if ( s.ifModified ) {=0A=
=0A=
					if ( ( lastModified =3D jqXHR.getResponseHeader( "Last-Modified" ) =
) ) {=0A=
						jQuery.lastModified[ ifModifiedKey ] =3D lastModified;=0A=
					}=0A=
					if ( ( etag =3D jqXHR.getResponseHeader( "Etag" ) ) ) {=0A=
						jQuery.etag[ ifModifiedKey ] =3D etag;=0A=
					}=0A=
				}=0A=
=0A=
				// If not modified=0A=
				if ( status =3D=3D=3D 304 ) {=0A=
=0A=
					statusText =3D "notmodified";=0A=
					isSuccess =3D true;=0A=
=0A=
				// If we have data=0A=
				} else {=0A=
=0A=
					try {=0A=
						success =3D ajaxConvert( s, response );=0A=
						statusText =3D "success";=0A=
						isSuccess =3D true;=0A=
					} catch(e) {=0A=
						// We have a parsererror=0A=
						statusText =3D "parsererror";=0A=
						error =3D e;=0A=
					}=0A=
				}=0A=
			} else {=0A=
				// We extract error from statusText=0A=
				// then normalize statusText and status for non-aborts=0A=
				error =3D statusText;=0A=
				if( !statusText || status ) {=0A=
					statusText =3D "error";=0A=
					if ( status < 0 ) {=0A=
						status =3D 0;=0A=
					}=0A=
				}=0A=
			}=0A=
=0A=
			// Set data for the fake xhr object=0A=
			jqXHR.status =3D status;=0A=
			jqXHR.statusText =3D statusText;=0A=
=0A=
			// Success/Error=0A=
			if ( isSuccess ) {=0A=
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR =
] );=0A=
			} else {=0A=
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );=0A=
			}=0A=
=0A=
			// Status-dependent callbacks=0A=
			jqXHR.statusCode( statusCode );=0A=
			statusCode =3D undefined;=0A=
=0A=
			if ( fireGlobals ) {=0A=
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : =
"Error" ),=0A=
						[ jqXHR, s, isSuccess ? success : error ] );=0A=
			}=0A=
=0A=
			// Complete=0A=
			completeDeferred.resolveWith( callbackContext, [ jqXHR, statusText ] =
);=0A=
=0A=
			if ( fireGlobals ) {=0A=
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s] );=0A=
				// Handle the global AJAX counter=0A=
				if ( !( --jQuery.active ) ) {=0A=
					jQuery.event.trigger( "ajaxStop" );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		// Attach deferreds=0A=
		deferred.promise( jqXHR );=0A=
		jqXHR.success =3D jqXHR.done;=0A=
		jqXHR.error =3D jqXHR.fail;=0A=
		jqXHR.complete =3D completeDeferred.done;=0A=
=0A=
		// Status-dependent callbacks=0A=
		jqXHR.statusCode =3D function( map ) {=0A=
			if ( map ) {=0A=
				var tmp;=0A=
				if ( state < 2 ) {=0A=
					for( tmp in map ) {=0A=
						statusCode[ tmp ] =3D [ statusCode[tmp], map[tmp] ];=0A=
					}=0A=
				} else {=0A=
					tmp =3D map[ jqXHR.status ];=0A=
					jqXHR.then( tmp, tmp );=0A=
				}=0A=
			}=0A=
			return this;=0A=
		};=0A=
=0A=
		// Remove hash character (#7531: and string promotion)=0A=
		// Add protocol if not provided (#5866: IE7 issue with protocol-less =
urls)=0A=
		// We also use the url parameter if available=0A=
		s.url =3D ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( =
rprotocol, ajaxLocParts[ 1 ] + "//" );=0A=
=0A=
		// Extract dataTypes list=0A=
		s.dataTypes =3D jQuery.trim( s.dataType || "*" ).toLowerCase().split( =
rspacesAjax );=0A=
=0A=
		// Determine if a cross-domain request is in order=0A=
		if ( s.crossDomain =3D=3D null ) {=0A=
			parts =3D rurl.exec( s.url.toLowerCase() );=0A=
			s.crossDomain =3D !!( parts &&=0A=
				( parts[ 1 ] !=3D ajaxLocParts[ 1 ] || parts[ 2 ] !=3D ajaxLocParts[ =
2 ] ||=0A=
					( parts[ 3 ] || ( parts[ 1 ] =3D=3D=3D "http:" ? 80 : 443 ) ) !=3D=0A=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] =3D=3D=3D "http:" ? 80 =
: 443 ) ) )=0A=
			);=0A=
		}=0A=
=0A=
		// Convert data if not already a string=0A=
		if ( s.data && s.processData && typeof s.data !=3D=3D "string" ) {=0A=
			s.data =3D jQuery.param( s.data, s.traditional );=0A=
		}=0A=
=0A=
		// Apply prefilters=0A=
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );=0A=
=0A=
		// If request was aborted inside a prefiler, stop there=0A=
		if ( state =3D=3D=3D 2 ) {=0A=
			return false;=0A=
		}=0A=
=0A=
		// We can fire global events as of now if asked to=0A=
		fireGlobals =3D s.global;=0A=
=0A=
		// Uppercase the type=0A=
		s.type =3D s.type.toUpperCase();=0A=
=0A=
		// Determine if request has content=0A=
		s.hasContent =3D !rnoContent.test( s.type );=0A=
=0A=
		// Watch for a new set of requests=0A=
		if ( fireGlobals && jQuery.active++ =3D=3D=3D 0 ) {=0A=
			jQuery.event.trigger( "ajaxStart" );=0A=
		}=0A=
=0A=
		// More options handling for requests with no content=0A=
		if ( !s.hasContent ) {=0A=
=0A=
			// If data is available, append data to url=0A=
			if ( s.data ) {=0A=
				s.url +=3D ( rquery.test( s.url ) ? "&" : "?" ) + s.data;=0A=
			}=0A=
=0A=
			// Get ifModifiedKey before adding the anti-cache parameter=0A=
			ifModifiedKey =3D s.url;=0A=
=0A=
			// Add anti-cache in url if needed=0A=
			if ( s.cache =3D=3D=3D false ) {=0A=
=0A=
				var ts =3D jQuery.now(),=0A=
					// try replacing _=3D if it is there=0A=
					ret =3D s.url.replace( rts, "$1_=3D" + ts );=0A=
=0A=
				// if nothing was replaced, add timestamp to the end=0A=
				s.url =3D ret + ( (ret =3D=3D=3D s.url ) ? ( rquery.test( s.url ) ? =
"&" : "?" ) + "_=3D" + ts : "" );=0A=
			}=0A=
		}=0A=
=0A=
		// Set the correct header, if data is being sent=0A=
		if ( s.data && s.hasContent && s.contentType !=3D=3D false || =
options.contentType ) {=0A=
			requestHeaders[ "Content-Type" ] =3D s.contentType;=0A=
		}=0A=
=0A=
		// Set the If-Modified-Since and/or If-None-Match header, if in =
ifModified mode.=0A=
		if ( s.ifModified ) {=0A=
			ifModifiedKey =3D ifModifiedKey || s.url;=0A=
			if ( jQuery.lastModified[ ifModifiedKey ] ) {=0A=
				requestHeaders[ "If-Modified-Since" ] =3D jQuery.lastModified[ =
ifModifiedKey ];=0A=
			}=0A=
			if ( jQuery.etag[ ifModifiedKey ] ) {=0A=
				requestHeaders[ "If-None-Match" ] =3D jQuery.etag[ ifModifiedKey ];=0A=
			}=0A=
		}=0A=
=0A=
		// Set the Accepts header for the server, depending on the dataType=0A=
		requestHeaders.Accept =3D s.dataTypes[ 0 ] && s.accepts[ =
s.dataTypes[0] ] ?=0A=
			s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !=3D=3D "*" ? ", =
*/*; q=3D0.01" : "" ) :=0A=
			s.accepts[ "*" ];=0A=
=0A=
		// Check for headers option=0A=
		for ( i in s.headers ) {=0A=
			jqXHR.setRequestHeader( i, s.headers[ i ] );=0A=
		}=0A=
=0A=
		// Allow custom headers/mimetypes and early abort=0A=
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) =
=3D=3D=3D false || state =3D=3D=3D 2 ) ) {=0A=
				// Abort if not done already=0A=
				jqXHR.abort();=0A=
				return false;=0A=
=0A=
		}=0A=
=0A=
		// Install callbacks on deferreds=0A=
		for ( i in { success: 1, error: 1, complete: 1 } ) {=0A=
			jqXHR[ i ]( s[ i ] );=0A=
		}=0A=
=0A=
		// Get transport=0A=
		transport =3D inspectPrefiltersOrTransports( transports, s, options, =
jqXHR );=0A=
=0A=
		// If no transport, we auto-abort=0A=
		if ( !transport ) {=0A=
			done( -1, "No Transport" );=0A=
		} else {=0A=
			jqXHR.readyState =3D 1;=0A=
			// Send global event=0A=
			if ( fireGlobals ) {=0A=
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );=0A=
			}=0A=
			// Timeout=0A=
			if ( s.async && s.timeout > 0 ) {=0A=
				timeoutTimer =3D setTimeout( function(){=0A=
					jqXHR.abort( "timeout" );=0A=
				}, s.timeout );=0A=
			}=0A=
=0A=
			try {=0A=
				state =3D 1;=0A=
				transport.send( requestHeaders, done );=0A=
			} catch (e) {=0A=
				// Propagate exception as error if not done=0A=
				if ( status < 2 ) {=0A=
					done( -1, e );=0A=
				// Simply rethrow otherwise=0A=
				} else {=0A=
					jQuery.error( e );=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		return jqXHR;=0A=
	},=0A=
=0A=
	// Serialize an array of form elements or a set of=0A=
	// key/values into a query string=0A=
	param: function( a, traditional ) {=0A=
		var s =3D [],=0A=
			add =3D function( key, value ) {=0A=
				// If value is a function, invoke it and return its value=0A=
				value =3D jQuery.isFunction( value ) ? value() : value;=0A=
				s[ s.length ] =3D encodeURIComponent( key ) + "=3D" + =
encodeURIComponent( value );=0A=
			};=0A=
=0A=
		// Set traditional to true for jQuery <=3D 1.3.2 behavior.=0A=
		if ( traditional =3D=3D=3D undefined ) {=0A=
			traditional =3D jQuery.ajaxSettings.traditional;=0A=
		}=0A=
=0A=
		// If an array was passed in, assume that it is an array of form =
elements.=0A=
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) =
) {=0A=
			// Serialize the form elements=0A=
			jQuery.each( a, function() {=0A=
				add( this.name, this.value );=0A=
			} );=0A=
=0A=
		} else {=0A=
			// If traditional, encode the "old" way (the way 1.3.2 or older=0A=
			// did it), otherwise encode params recursively.=0A=
			for ( var prefix in a ) {=0A=
				buildParams( prefix, a[ prefix ], traditional, add );=0A=
			}=0A=
		}=0A=
=0A=
		// Return the resulting serialization=0A=
		return s.join( "&" ).replace( r20, "+" );=0A=
	}=0A=
});=0A=
=0A=
function buildParams( prefix, obj, traditional, add ) {=0A=
	if ( jQuery.isArray( obj ) && obj.length ) {=0A=
		// Serialize array item.=0A=
		jQuery.each( obj, function( i, v ) {=0A=
			if ( traditional || rbracket.test( prefix ) ) {=0A=
				// Treat each array item as a scalar.=0A=
				add( prefix, v );=0A=
=0A=
			} else {=0A=
				// If array item is non-scalar (array or object), encode its=0A=
				// numeric index to resolve deserialization ambiguity issues.=0A=
				// Note that rack (as of 1.0.0) can't currently deserialize=0A=
				// nested arrays properly, and attempting to do so may cause=0A=
				// a server error. Possible fixes are to modify rack's=0A=
				// deserialization algorithm or to provide an option or flag=0A=
				// to force array serialization to be shallow.=0A=
				buildParams( prefix + "[" + ( typeof v =3D=3D=3D "object" || =
jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );=0A=
			}=0A=
		});=0A=
=0A=
	} else if ( !traditional && obj !=3D null && typeof obj =3D=3D=3D =
"object" ) {=0A=
		// If we see an array here, it is empty and should be treated as an =
empty=0A=
		// object=0A=
		if ( jQuery.isArray( obj ) || jQuery.isEmptyObject( obj ) ) {=0A=
			add( prefix, "" );=0A=
=0A=
		// Serialize object item.=0A=
		} else {=0A=
			for ( var name in obj ) {=0A=
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, =
add );=0A=
			}=0A=
		}=0A=
=0A=
	} else {=0A=
		// Serialize scalar item.=0A=
		add( prefix, obj );=0A=
	}=0A=
}=0A=
=0A=
// This is still on the jQuery object... for now=0A=
// Want to move this to jQuery.ajax some day=0A=
jQuery.extend({=0A=
=0A=
	// Counter for holding the number of active queries=0A=
	active: 0,=0A=
=0A=
	// Last-Modified header cache for next request=0A=
	lastModified: {},=0A=
	etag: {}=0A=
=0A=
});=0A=
=0A=
/* Handles responses to an ajax request:=0A=
 * - sets all responseXXX fields accordingly=0A=
 * - finds the right dataType (mediates between content-type and =
expected dataType)=0A=
 * - returns the corresponding response=0A=
 */=0A=
function ajaxHandleResponses( s, jqXHR, responses ) {=0A=
=0A=
	var contents =3D s.contents,=0A=
		dataTypes =3D s.dataTypes,=0A=
		responseFields =3D s.responseFields,=0A=
		ct,=0A=
		type,=0A=
		finalDataType,=0A=
		firstDataType;=0A=
=0A=
	// Fill responseXXX fields=0A=
	for( type in responseFields ) {=0A=
		if ( type in responses ) {=0A=
			jqXHR[ responseFields[type] ] =3D responses[ type ];=0A=
		}=0A=
	}=0A=
=0A=
	// Remove auto dataType and get content-type in the process=0A=
	while( dataTypes[ 0 ] =3D=3D=3D "*" ) {=0A=
		dataTypes.shift();=0A=
		if ( ct =3D=3D=3D undefined ) {=0A=
			ct =3D s.mimeType || jqXHR.getResponseHeader( "content-type" );=0A=
		}=0A=
	}=0A=
=0A=
	// Check if we're dealing with a known content-type=0A=
	if ( ct ) {=0A=
		for ( type in contents ) {=0A=
			if ( contents[ type ] && contents[ type ].test( ct ) ) {=0A=
				dataTypes.unshift( type );=0A=
				break;=0A=
			}=0A=
		}=0A=
	}=0A=
=0A=
	// Check to see if we have a response for the expected dataType=0A=
	if ( dataTypes[ 0 ] in responses ) {=0A=
		finalDataType =3D dataTypes[ 0 ];=0A=
	} else {=0A=
		// Try convertible dataTypes=0A=
		for ( type in responses ) {=0A=
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {=0A=
				finalDataType =3D type;=0A=
				break;=0A=
			}=0A=
			if ( !firstDataType ) {=0A=
				firstDataType =3D type;=0A=
			}=0A=
		}=0A=
		// Or just use first one=0A=
		finalDataType =3D finalDataType || firstDataType;=0A=
	}=0A=
=0A=
	// If we found a dataType=0A=
	// We add the dataType to the list if needed=0A=
	// and return the corresponding response=0A=
	if ( finalDataType ) {=0A=
		if ( finalDataType !=3D=3D dataTypes[ 0 ] ) {=0A=
			dataTypes.unshift( finalDataType );=0A=
		}=0A=
		return responses[ finalDataType ];=0A=
	}=0A=
}=0A=
=0A=
// Chain conversions given the request and the original response=0A=
function ajaxConvert( s, response ) {=0A=
=0A=
	// Apply the dataFilter if provided=0A=
	if ( s.dataFilter ) {=0A=
		response =3D s.dataFilter( response, s.dataType );=0A=
	}=0A=
=0A=
	var dataTypes =3D s.dataTypes,=0A=
		converters =3D {},=0A=
		i,=0A=
		key,=0A=
		length =3D dataTypes.length,=0A=
		tmp,=0A=
		// Current and previous dataTypes=0A=
		current =3D dataTypes[ 0 ],=0A=
		prev,=0A=
		// Conversion expression=0A=
		conversion,=0A=
		// Conversion function=0A=
		conv,=0A=
		// Conversion functions (transitive conversion)=0A=
		conv1,=0A=
		conv2;=0A=
=0A=
	// For each dataType in the chain=0A=
	for( i =3D 1; i < length; i++ ) {=0A=
=0A=
		// Create converters map=0A=
		// with lowercased keys=0A=
		if ( i =3D=3D=3D 1 ) {=0A=
			for( key in s.converters ) {=0A=
				if( typeof key =3D=3D=3D "string" ) {=0A=
					converters[ key.toLowerCase() ] =3D s.converters[ key ];=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		// Get the dataTypes=0A=
		prev =3D current;=0A=
		current =3D dataTypes[ i ];=0A=
=0A=
		// If current is auto dataType, update it to prev=0A=
		if( current =3D=3D=3D "*" ) {=0A=
			current =3D prev;=0A=
		// If no auto and dataTypes are actually different=0A=
		} else if ( prev !=3D=3D "*" && prev !=3D=3D current ) {=0A=
=0A=
			// Get the converter=0A=
			conversion =3D prev + " " + current;=0A=
			conv =3D converters[ conversion ] || converters[ "* " + current ];=0A=
=0A=
			// If there is no direct converter, search transitively=0A=
			if ( !conv ) {=0A=
				conv2 =3D undefined;=0A=
				for( conv1 in converters ) {=0A=
					tmp =3D conv1.split( " " );=0A=
					if ( tmp[ 0 ] =3D=3D=3D prev || tmp[ 0 ] =3D=3D=3D "*" ) {=0A=
						conv2 =3D converters[ tmp[1] + " " + current ];=0A=
						if ( conv2 ) {=0A=
							conv1 =3D converters[ conv1 ];=0A=
							if ( conv1 =3D=3D=3D true ) {=0A=
								conv =3D conv2;=0A=
							} else if ( conv2 =3D=3D=3D true ) {=0A=
								conv =3D conv1;=0A=
							}=0A=
							break;=0A=
						}=0A=
					}=0A=
				}=0A=
			}=0A=
			// If we found no converter, dispatch an error=0A=
			if ( !( conv || conv2 ) ) {=0A=
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") =
);=0A=
			}=0A=
			// If found converter is not an equivalence=0A=
			if ( conv !=3D=3D true ) {=0A=
				// Convert with 1 or 2 converters accordingly=0A=
				response =3D conv ? conv( response ) : conv2( conv1(response) );=0A=
			}=0A=
		}=0A=
	}=0A=
	return response;=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
var jsc =3D jQuery.now(),=0A=
	jsre =3D /(\=3D)\?(&|$)|\?\?/i;=0A=
=0A=
// Default jsonp settings=0A=
jQuery.ajaxSetup({=0A=
	jsonp: "callback",=0A=
	jsonpCallback: function() {=0A=
		return jQuery.expando + "_" + ( jsc++ );=0A=
	}=0A=
});=0A=
=0A=
// Detect, normalize options and install callbacks for jsonp requests=0A=
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR =
) {=0A=
=0A=
	var dataIsString =3D ( typeof s.data =3D=3D=3D "string" );=0A=
=0A=
	if ( s.dataTypes[ 0 ] =3D=3D=3D "jsonp" ||=0A=
		originalSettings.jsonpCallback ||=0A=
		originalSettings.jsonp !=3D null ||=0A=
		s.jsonp !=3D=3D false && ( jsre.test( s.url ) ||=0A=
				dataIsString && jsre.test( s.data ) ) ) {=0A=
=0A=
		var responseContainer,=0A=
			jsonpCallback =3D s.jsonpCallback =3D=0A=
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : =
s.jsonpCallback,=0A=
			previous =3D window[ jsonpCallback ],=0A=
			url =3D s.url,=0A=
			data =3D s.data,=0A=
			replace =3D "$1" + jsonpCallback + "$2",=0A=
			cleanUp =3D function() {=0A=
				// Set callback back to previous value=0A=
				window[ jsonpCallback ] =3D previous;=0A=
				// Call if it was a function and we have a response=0A=
				if ( responseContainer && jQuery.isFunction( previous ) ) {=0A=
					window[ jsonpCallback ]( responseContainer[ 0 ] );=0A=
				}=0A=
			};=0A=
=0A=
		if ( s.jsonp !=3D=3D false ) {=0A=
			url =3D url.replace( jsre, replace );=0A=
			if ( s.url =3D=3D=3D url ) {=0A=
				if ( dataIsString ) {=0A=
					data =3D data.replace( jsre, replace );=0A=
				}=0A=
				if ( s.data =3D=3D=3D data ) {=0A=
					// Add callback manually=0A=
					url +=3D (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=3D" + =
jsonpCallback;=0A=
				}=0A=
			}=0A=
		}=0A=
=0A=
		s.url =3D url;=0A=
		s.data =3D data;=0A=
=0A=
		// Install callback=0A=
		window[ jsonpCallback ] =3D function( response ) {=0A=
			responseContainer =3D [ response ];=0A=
		};=0A=
=0A=
		// Install cleanUp function=0A=
		jqXHR.then( cleanUp, cleanUp );=0A=
=0A=
		// Use data converter to retrieve json after script execution=0A=
		s.converters["script json"] =3D function() {=0A=
			if ( !responseContainer ) {=0A=
				jQuery.error( jsonpCallback + " was not called" );=0A=
			}=0A=
			return responseContainer[ 0 ];=0A=
		};=0A=
=0A=
		// force json dataType=0A=
		s.dataTypes[ 0 ] =3D "json";=0A=
=0A=
		// Delegate to script=0A=
		return "script";=0A=
	}=0A=
} );=0A=
=0A=
=0A=
=0A=
=0A=
// Install script dataType=0A=
jQuery.ajaxSetup({=0A=
	accepts: {=0A=
		script: "text/javascript, application/javascript, =
application/ecmascript, application/x-ecmascript"=0A=
	},=0A=
	contents: {=0A=
		script: /javascript|ecmascript/=0A=
	},=0A=
	converters: {=0A=
		"text script": function( text ) {=0A=
			jQuery.globalEval( text );=0A=
			return text;=0A=
		}=0A=
	}=0A=
});=0A=
=0A=
// Handle cache's special case and global=0A=
jQuery.ajaxPrefilter( "script", function( s ) {=0A=
	if ( s.cache =3D=3D=3D undefined ) {=0A=
		s.cache =3D false;=0A=
	}=0A=
	if ( s.crossDomain ) {=0A=
		s.type =3D "GET";=0A=
		s.global =3D false;=0A=
	}=0A=
} );=0A=
=0A=
// Bind script tag hack transport=0A=
jQuery.ajaxTransport( "script", function(s) {=0A=
=0A=
	// This transport only deals with cross domain requests=0A=
	if ( s.crossDomain ) {=0A=
=0A=
		var script,=0A=
			head =3D document.head || document.getElementsByTagName( "head" )[0] =
|| document.documentElement;=0A=
=0A=
		return {=0A=
=0A=
			send: function( _, callback ) {=0A=
=0A=
				script =3D document.createElement( "script" );=0A=
=0A=
				script.async =3D "async";=0A=
=0A=
				if ( s.scriptCharset ) {=0A=
					script.charset =3D s.scriptCharset;=0A=
				}=0A=
=0A=
				script.src =3D s.url;=0A=
=0A=
				// Attach handlers for all browsers=0A=
				script.onload =3D script.onreadystatechange =3D function( _, isAbort =
) {=0A=
=0A=
					if ( !script.readyState || /loaded|complete/.test( =
script.readyState ) ) {=0A=
=0A=
						// Handle memory leak in IE=0A=
						script.onload =3D script.onreadystatechange =3D null;=0A=
=0A=
						// Remove the script=0A=
						if ( head && script.parentNode ) {=0A=
							head.removeChild( script );=0A=
						}=0A=
=0A=
						// Dereference the script=0A=
						script =3D undefined;=0A=
=0A=
						// Callback if not abort=0A=
						if ( !isAbort ) {=0A=
							callback( 200, "success" );=0A=
						}=0A=
					}=0A=
				};=0A=
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.=0A=
				// This arises when a base node is used (#2709 and #4378).=0A=
				head.insertBefore( script, head.firstChild );=0A=
			},=0A=
=0A=
			abort: function() {=0A=
				if ( script ) {=0A=
					script.onload( 0, 1 );=0A=
				}=0A=
			}=0A=
		};=0A=
	}=0A=
} );=0A=
=0A=
=0A=
=0A=
=0A=
var // #5280: next active xhr id and list of active xhrs' callbacks=0A=
	xhrId =3D jQuery.now(),=0A=
	xhrCallbacks,=0A=
=0A=
	// XHR used to determine supports properties=0A=
	testXHR;=0A=
=0A=
// #5280: Internet Explorer will keep connections alive if we don't =
abort on unload=0A=
function xhrOnUnloadAbort() {=0A=
	jQuery( window ).unload(function() {=0A=
		// Abort all pending requests=0A=
		for ( var key in xhrCallbacks ) {=0A=
			xhrCallbacks[ key ]( 0, 1 );=0A=
		}=0A=
	});=0A=
}=0A=
=0A=
// Functions to create xhrs=0A=
function createStandardXHR() {=0A=
	try {=0A=
		return new window.XMLHttpRequest();=0A=
	} catch( e ) {}=0A=
}=0A=
=0A=
function createActiveXHR() {=0A=
	try {=0A=
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );=0A=
	} catch( e ) {}=0A=
}=0A=
=0A=
// Create the request object=0A=
// (This is still attached to ajaxSettings for backward compatibility)=0A=
jQuery.ajaxSettings.xhr =3D window.ActiveXObject ?=0A=
	/* Microsoft failed to properly=0A=
	 * implement the XMLHttpRequest in IE7 (can't request local files),=0A=
	 * so we use the ActiveXObject when it is available=0A=
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so=0A=
	 * we need a fallback.=0A=
	 */=0A=
	function() {=0A=
		return !this.isLocal && createStandardXHR() || createActiveXHR();=0A=
	} :=0A=
	// For all other browsers, use the standard XMLHttpRequest object=0A=
	createStandardXHR;=0A=
=0A=
// Test if we can create an xhr object=0A=
testXHR =3D jQuery.ajaxSettings.xhr();=0A=
jQuery.support.ajax =3D !!testXHR;=0A=
=0A=
// Does this browser support crossDomain XHR requests=0A=
jQuery.support.cors =3D testXHR && ( "withCredentials" in testXHR );=0A=
=0A=
// No need for the temporary xhr anymore=0A=
testXHR =3D undefined;=0A=
=0A=
// Create transport if the browser can provide an xhr=0A=
if ( jQuery.support.ajax ) {=0A=
=0A=
	jQuery.ajaxTransport(function( s ) {=0A=
		// Cross domain only allowed if supported through XMLHttpRequest=0A=
		if ( !s.crossDomain || jQuery.support.cors ) {=0A=
=0A=
			var callback;=0A=
=0A=
			return {=0A=
				send: function( headers, complete ) {=0A=
=0A=
					// Get a new xhr=0A=
					var xhr =3D s.xhr(),=0A=
						handle,=0A=
						i;=0A=
=0A=
					// Open the socket=0A=
					// Passing null username, generates a login popup on Opera (#2865)=0A=
					if ( s.username ) {=0A=
						xhr.open( s.type, s.url, s.async, s.username, s.password );=0A=
					} else {=0A=
						xhr.open( s.type, s.url, s.async );=0A=
					}=0A=
=0A=
					// Apply custom fields if provided=0A=
					if ( s.xhrFields ) {=0A=
						for ( i in s.xhrFields ) {=0A=
							xhr[ i ] =3D s.xhrFields[ i ];=0A=
						}=0A=
					}=0A=
=0A=
					// Override mime type if needed=0A=
					if ( s.mimeType && xhr.overrideMimeType ) {=0A=
						xhr.overrideMimeType( s.mimeType );=0A=
					}=0A=
=0A=
					// X-Requested-With header=0A=
					// For cross-domain requests, seeing as conditions for a preflight =
are=0A=
					// akin to a jigsaw puzzle, we simply never set it to be sure.=0A=
					// (it can always be set on a per-request basis or even using =
ajaxSetup)=0A=
					// For same-domain requests, won't change header if already =
provided.=0A=
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {=0A=
						headers[ "X-Requested-With" ] =3D "XMLHttpRequest";=0A=
					}=0A=
=0A=
					// Need an extra try/catch for cross domain requests in Firefox 3=0A=
					try {=0A=
						for ( i in headers ) {=0A=
							xhr.setRequestHeader( i, headers[ i ] );=0A=
						}=0A=
					} catch( _ ) {}=0A=
=0A=
					// Do send the request=0A=
					// This may raise an exception which is actually=0A=
					// handled in jQuery.ajax (so no try/catch here)=0A=
					xhr.send( ( s.hasContent && s.data ) || null );=0A=
=0A=
					// Listener=0A=
					callback =3D function( _, isAbort ) {=0A=
=0A=
						var status,=0A=
							statusText,=0A=
							responseHeaders,=0A=
							responses,=0A=
							xml;=0A=
=0A=
						// Firefox throws exceptions when accessing properties=0A=
						// of an xhr when a network error occured=0A=
						// =
http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:=
_0x80040111_(NS_ERROR_NOT_AVAILABLE)=0A=
						try {=0A=
=0A=
							// Was never called and is aborted or complete=0A=
							if ( callback && ( isAbort || xhr.readyState =3D=3D=3D 4 ) ) {=0A=
=0A=
								// Only called once=0A=
								callback =3D undefined;=0A=
=0A=
								// Do not keep as active anymore=0A=
								if ( handle ) {=0A=
									xhr.onreadystatechange =3D jQuery.noop;=0A=
									delete xhrCallbacks[ handle ];=0A=
								}=0A=
=0A=
								// If it's an abort=0A=
								if ( isAbort ) {=0A=
									// Abort it manually if needed=0A=
									if ( xhr.readyState !=3D=3D 4 ) {=0A=
										xhr.abort();=0A=
									}=0A=
								} else {=0A=
									status =3D xhr.status;=0A=
									responseHeaders =3D xhr.getAllResponseHeaders();=0A=
									responses =3D {};=0A=
									xml =3D xhr.responseXML;=0A=
=0A=
									// Construct response list=0A=
									if ( xml && xml.documentElement /* #4958 */ ) {=0A=
										responses.xml =3D xml;=0A=
									}=0A=
									responses.text =3D xhr.responseText;=0A=
=0A=
									// Firefox throws an exception when accessing=0A=
									// statusText for faulty cross-domain requests=0A=
									try {=0A=
										statusText =3D xhr.statusText;=0A=
									} catch( e ) {=0A=
										// We normalize with Webkit giving an empty statusText=0A=
										statusText =3D "";=0A=
									}=0A=
=0A=
									// Filter status for non standard behaviors=0A=
=0A=
									// If the request is local and we have data: assume a success=0A=
									// (success with no data won't get notified, that's the best we=0A=
									// can do given current implementations)=0A=
									if ( !status && s.isLocal && !s.crossDomain ) {=0A=
										status =3D responses.text ? 200 : 404;=0A=
									// IE - #1450: sometimes returns 1223 when it should be 204=0A=
									} else if ( status =3D=3D=3D 1223 ) {=0A=
										status =3D 204;=0A=
									}=0A=
								}=0A=
							}=0A=
						} catch( firefoxAccessException ) {=0A=
							if ( !isAbort ) {=0A=
								complete( -1, firefoxAccessException );=0A=
							}=0A=
						}=0A=
=0A=
						// Call complete if needed=0A=
						if ( responses ) {=0A=
							complete( status, statusText, responses, responseHeaders );=0A=
						}=0A=
					};=0A=
=0A=
					// if we're in sync mode or it's in cache=0A=
					// and has been retrieved directly (IE6 & IE7)=0A=
					// we need to manually fire the callback=0A=
					if ( !s.async || xhr.readyState =3D=3D=3D 4 ) {=0A=
						callback();=0A=
					} else {=0A=
						// Create the active xhrs callbacks list if needed=0A=
						// and attach the unload handler=0A=
						if ( !xhrCallbacks ) {=0A=
							xhrCallbacks =3D {};=0A=
							xhrOnUnloadAbort();=0A=
						}=0A=
						// Add to list of active xhrs callbacks=0A=
						handle =3D xhrId++;=0A=
						xhr.onreadystatechange =3D xhrCallbacks[ handle ] =3D callback;=0A=
					}=0A=
				},=0A=
=0A=
				abort: function() {=0A=
					if ( callback ) {=0A=
						callback(0,1);=0A=
					}=0A=
				}=0A=
			};=0A=
		}=0A=
	});=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
var elemdisplay =3D {},=0A=
	rfxtypes =3D /^(?:toggle|show|hide)$/,=0A=
	rfxnum =3D /^([+\-]=3D)?([\d+.\-]+)([a-z%]*)$/i,=0A=
	timerId,=0A=
	fxAttrs =3D [=0A=
		// height animations=0A=
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" =
],=0A=
		// width animations=0A=
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" =
],=0A=
		// opacity animations=0A=
		[ "opacity" ]=0A=
	];=0A=
=0A=
jQuery.fn.extend({=0A=
	show: function( speed, easing, callback ) {=0A=
		var elem, display;=0A=
=0A=
		if ( speed || speed =3D=3D=3D 0 ) {=0A=
			return this.animate( genFx("show", 3), speed, easing, callback);=0A=
=0A=
		} else {=0A=
			for ( var i =3D 0, j =3D this.length; i < j; i++ ) {=0A=
				elem =3D this[i];=0A=
				display =3D elem.style.display;=0A=
=0A=
				// Reset the inline display of this element to learn if it is=0A=
				// being hidden by cascaded rules or not=0A=
				if ( !jQuery._data(elem, "olddisplay") && display =3D=3D=3D "none" ) =
{=0A=
					display =3D elem.style.display =3D "";=0A=
				}=0A=
=0A=
				// Set elements which have been overridden with display: none=0A=
				// in a stylesheet to whatever the default browser style is=0A=
				// for such an element=0A=
				if ( display =3D=3D=3D "" && jQuery.css( elem, "display" ) =3D=3D=3D =
"none" ) {=0A=
					jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));=0A=
				}=0A=
			}=0A=
=0A=
			// Set the display of most of the elements in a second loop=0A=
			// to avoid the constant reflow=0A=
			for ( i =3D 0; i < j; i++ ) {=0A=
				elem =3D this[i];=0A=
				display =3D elem.style.display;=0A=
=0A=
				if ( display =3D=3D=3D "" || display =3D=3D=3D "none" ) {=0A=
					elem.style.display =3D jQuery._data(elem, "olddisplay") || "";=0A=
				}=0A=
			}=0A=
=0A=
			return this;=0A=
		}=0A=
	},=0A=
=0A=
	hide: function( speed, easing, callback ) {=0A=
		if ( speed || speed =3D=3D=3D 0 ) {=0A=
			return this.animate( genFx("hide", 3), speed, easing, callback);=0A=
=0A=
		} else {=0A=
			for ( var i =3D 0, j =3D this.length; i < j; i++ ) {=0A=
				var display =3D jQuery.css( this[i], "display" );=0A=
=0A=
				if ( display !=3D=3D "none" && !jQuery._data( this[i], "olddisplay" =
) ) {=0A=
					jQuery._data( this[i], "olddisplay", display );=0A=
				}=0A=
			}=0A=
=0A=
			// Set the display of the elements in a second loop=0A=
			// to avoid the constant reflow=0A=
			for ( i =3D 0; i < j; i++ ) {=0A=
				this[i].style.display =3D "none";=0A=
			}=0A=
=0A=
			return this;=0A=
		}=0A=
	},=0A=
=0A=
	// Save the old toggle function=0A=
	_toggle: jQuery.fn.toggle,=0A=
=0A=
	toggle: function( fn, fn2, callback ) {=0A=
		var bool =3D typeof fn =3D=3D=3D "boolean";=0A=
=0A=
		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {=0A=
			this._toggle.apply( this, arguments );=0A=
=0A=
		} else if ( fn =3D=3D null || bool ) {=0A=
			this.each(function() {=0A=
				var state =3D bool ? fn : jQuery(this).is(":hidden");=0A=
				jQuery(this)[ state ? "show" : "hide" ]();=0A=
			});=0A=
=0A=
		} else {=0A=
			this.animate(genFx("toggle", 3), fn, fn2, callback);=0A=
		}=0A=
=0A=
		return this;=0A=
	},=0A=
=0A=
	fadeTo: function( speed, to, easing, callback ) {=0A=
		return this.filter(":hidden").css("opacity", 0).show().end()=0A=
					.animate({opacity: to}, speed, easing, callback);=0A=
	},=0A=
=0A=
	animate: function( prop, speed, easing, callback ) {=0A=
		var optall =3D jQuery.speed(speed, easing, callback);=0A=
=0A=
		if ( jQuery.isEmptyObject( prop ) ) {=0A=
			return this.each( optall.complete );=0A=
		}=0A=
=0A=
		return this[ optall.queue =3D=3D=3D false ? "each" : "queue" =
](function() {=0A=
			// XXX 'this' does not always have a nodeName when running the=0A=
			// test suite=0A=
=0A=
			var opt =3D jQuery.extend({}, optall), p,=0A=
				isElement =3D this.nodeType =3D=3D=3D 1,=0A=
				hidden =3D isElement && jQuery(this).is(":hidden"),=0A=
				self =3D this;=0A=
=0A=
			for ( p in prop ) {=0A=
				var name =3D jQuery.camelCase( p );=0A=
=0A=
				if ( p !=3D=3D name ) {=0A=
					prop[ name ] =3D prop[ p ];=0A=
					delete prop[ p ];=0A=
					p =3D name;=0A=
				}=0A=
=0A=
				if ( prop[p] =3D=3D=3D "hide" && hidden || prop[p] =3D=3D=3D "show" =
&& !hidden ) {=0A=
					return opt.complete.call(this);=0A=
				}=0A=
=0A=
				if ( isElement && ( p =3D=3D=3D "height" || p =3D=3D=3D "width" ) ) {=0A=
					// Make sure that nothing sneaks out=0A=
					// Record all 3 overflow attributes because IE does not=0A=
					// change the overflow attribute when overflowX and=0A=
					// overflowY are set to the same value=0A=
					opt.overflow =3D [ this.style.overflow, this.style.overflowX, =
this.style.overflowY ];=0A=
=0A=
					// Set display property to inline-block for height/width=0A=
					// animations on inline elements that are having width/height=0A=
					// animated=0A=
					if ( jQuery.css( this, "display" ) =3D=3D=3D "inline" &&=0A=
							jQuery.css( this, "float" ) =3D=3D=3D "none" ) {=0A=
						if ( !jQuery.support.inlineBlockNeedsLayout ) {=0A=
							this.style.display =3D "inline-block";=0A=
=0A=
						} else {=0A=
							var display =3D defaultDisplay(this.nodeName);=0A=
=0A=
							// inline-level elements accept inline-block;=0A=
							// block-level elements need to be inline with layout=0A=
							if ( display =3D=3D=3D "inline" ) {=0A=
								this.style.display =3D "inline-block";=0A=
=0A=
							} else {=0A=
								this.style.display =3D "inline";=0A=
								this.style.zoom =3D 1;=0A=
							}=0A=
						}=0A=
					}=0A=
				}=0A=
=0A=
				if ( jQuery.isArray( prop[p] ) ) {=0A=
					// Create (if needed) and add to specialEasing=0A=
					(opt.specialEasing =3D opt.specialEasing || {})[p] =3D prop[p][1];=0A=
					prop[p] =3D prop[p][0];=0A=
				}=0A=
			}=0A=
=0A=
			if ( opt.overflow !=3D null ) {=0A=
				this.style.overflow =3D "hidden";=0A=
			}=0A=
=0A=
			opt.curAnim =3D jQuery.extend({}, prop);=0A=
=0A=
			jQuery.each( prop, function( name, val ) {=0A=
				var e =3D new jQuery.fx( self, opt, name );=0A=
=0A=
				if ( rfxtypes.test(val) ) {=0A=
					e[ val =3D=3D=3D "toggle" ? hidden ? "show" : "hide" : val ]( prop =
);=0A=
=0A=
				} else {=0A=
					var parts =3D rfxnum.exec(val),=0A=
						start =3D e.cur();=0A=
=0A=
					if ( parts ) {=0A=
						var end =3D parseFloat( parts[2] ),=0A=
							unit =3D parts[3] || ( jQuery.cssNumber[ name ] ? "" : "px" );=0A=
=0A=
						// We need to compute starting value=0A=
						if ( unit !=3D=3D "px" ) {=0A=
							jQuery.style( self, name, (end || 1) + unit);=0A=
							start =3D ((end || 1) / e.cur()) * start;=0A=
							jQuery.style( self, name, start + unit);=0A=
						}=0A=
=0A=
						// If a +=3D/-=3D token was provided, we're doing a relative =
animation=0A=
						if ( parts[1] ) {=0A=
							end =3D ((parts[1] =3D=3D=3D "-=3D" ? -1 : 1) * end) + start;=0A=
						}=0A=
=0A=
						e.custom( start, end, unit );=0A=
=0A=
					} else {=0A=
						e.custom( start, val, "" );=0A=
					}=0A=
				}=0A=
			});=0A=
=0A=
			// For JS strict compliance=0A=
			return true;=0A=
		});=0A=
	},=0A=
=0A=
	stop: function( clearQueue, gotoEnd ) {=0A=
		var timers =3D jQuery.timers;=0A=
=0A=
		if ( clearQueue ) {=0A=
			this.queue([]);=0A=
		}=0A=
=0A=
		this.each(function() {=0A=
			// go in reverse order so anything added to the queue during the loop =
is ignored=0A=
			for ( var i =3D timers.length - 1; i >=3D 0; i-- ) {=0A=
				if ( timers[i].elem =3D=3D=3D this ) {=0A=
					if (gotoEnd) {=0A=
						// force the next step to be the last=0A=
						timers[i](true);=0A=
					}=0A=
=0A=
					timers.splice(i, 1);=0A=
				}=0A=
			}=0A=
		});=0A=
=0A=
		// start the next in the queue if the last step wasn't forced=0A=
		if ( !gotoEnd ) {=0A=
			this.dequeue();=0A=
		}=0A=
=0A=
		return this;=0A=
	}=0A=
=0A=
});=0A=
=0A=
function genFx( type, num ) {=0A=
	var obj =3D {};=0A=
=0A=
	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice(0,num)), function() =
{=0A=
		obj[ this ] =3D type;=0A=
	});=0A=
=0A=
	return obj;=0A=
}=0A=
=0A=
// Generate shortcuts for custom animations=0A=
jQuery.each({=0A=
	slideDown: genFx("show", 1),=0A=
	slideUp: genFx("hide", 1),=0A=
	slideToggle: genFx("toggle", 1),=0A=
	fadeIn: { opacity: "show" },=0A=
	fadeOut: { opacity: "hide" },=0A=
	fadeToggle: { opacity: "toggle" }=0A=
}, function( name, props ) {=0A=
	jQuery.fn[ name ] =3D function( speed, easing, callback ) {=0A=
		return this.animate( props, speed, easing, callback );=0A=
	};=0A=
});=0A=
=0A=
jQuery.extend({=0A=
	speed: function( speed, easing, fn ) {=0A=
		var opt =3D speed && typeof speed =3D=3D=3D "object" ? =
jQuery.extend({}, speed) : {=0A=
			complete: fn || !fn && easing ||=0A=
				jQuery.isFunction( speed ) && speed,=0A=
			duration: speed,=0A=
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing=0A=
		};=0A=
=0A=
		opt.duration =3D jQuery.fx.off ? 0 : typeof opt.duration =3D=3D=3D =
"number" ? opt.duration :=0A=
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : =
jQuery.fx.speeds._default;=0A=
=0A=
		// Queueing=0A=
		opt.old =3D opt.complete;=0A=
		opt.complete =3D function() {=0A=
			if ( opt.queue !=3D=3D false ) {=0A=
				jQuery(this).dequeue();=0A=
			}=0A=
			if ( jQuery.isFunction( opt.old ) ) {=0A=
				opt.old.call( this );=0A=
			}=0A=
		};=0A=
=0A=
		return opt;=0A=
	},=0A=
=0A=
	easing: {=0A=
		linear: function( p, n, firstNum, diff ) {=0A=
			return firstNum + diff * p;=0A=
		},=0A=
		swing: function( p, n, firstNum, diff ) {=0A=
			return ((-Math.cos(p*Math.PI)/2) + 0.5) * diff + firstNum;=0A=
		}=0A=
	},=0A=
=0A=
	timers: [],=0A=
=0A=
	fx: function( elem, options, prop ) {=0A=
		this.options =3D options;=0A=
		this.elem =3D elem;=0A=
		this.prop =3D prop;=0A=
=0A=
		if ( !options.orig ) {=0A=
			options.orig =3D {};=0A=
		}=0A=
	}=0A=
=0A=
});=0A=
=0A=
jQuery.fx.prototype =3D {=0A=
	// Simple function for setting a style value=0A=
	update: function() {=0A=
		if ( this.options.step ) {=0A=
			this.options.step.call( this.elem, this.now, this );=0A=
		}=0A=
=0A=
		(jQuery.fx.step[this.prop] || jQuery.fx.step._default)( this );=0A=
	},=0A=
=0A=
	// Get the current size=0A=
	cur: function() {=0A=
		if ( this.elem[this.prop] !=3D null && (!this.elem.style || =
this.elem.style[this.prop] =3D=3D null) ) {=0A=
			return this.elem[ this.prop ];=0A=
		}=0A=
=0A=
		var parsed,=0A=
			r =3D jQuery.css( this.elem, this.prop );=0A=
		// Empty strings, null, undefined and "auto" are converted to 0,=0A=
		// complex values such as "rotate(1rad)" are returned as is,=0A=
		// simple values such as "10px" are parsed to Float.=0A=
		return isNaN( parsed =3D parseFloat( r ) ) ? !r || r =3D=3D=3D "auto" =
? 0 : r : parsed;=0A=
	},=0A=
=0A=
	// Start an animation from one number to another=0A=
	custom: function( from, to, unit ) {=0A=
		var self =3D this,=0A=
			fx =3D jQuery.fx;=0A=
=0A=
		this.startTime =3D jQuery.now();=0A=
		this.start =3D from;=0A=
		this.end =3D to;=0A=
		this.unit =3D unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? =
"" : "px" );=0A=
		this.now =3D this.start;=0A=
		this.pos =3D this.state =3D 0;=0A=
=0A=
		function t( gotoEnd ) {=0A=
			return self.step(gotoEnd);=0A=
		}=0A=
=0A=
		t.elem =3D this.elem;=0A=
=0A=
		if ( t() && jQuery.timers.push(t) && !timerId ) {=0A=
			timerId =3D setInterval(fx.tick, fx.interval);=0A=
		}=0A=
	},=0A=
=0A=
	// Simple 'show' function=0A=
	show: function() {=0A=
		// Remember where we started, so that we can go back to it later=0A=
		this.options.orig[this.prop] =3D jQuery.style( this.elem, this.prop );=0A=
		this.options.show =3D true;=0A=
=0A=
		// Begin the animation=0A=
		// Make sure that we start at a small width/height to avoid any=0A=
		// flash of content=0A=
		this.custom(this.prop =3D=3D=3D "width" || this.prop =3D=3D=3D =
"height" ? 1 : 0, this.cur());=0A=
=0A=
		// Start by showing the element=0A=
		jQuery( this.elem ).show();=0A=
	},=0A=
=0A=
	// Simple 'hide' function=0A=
	hide: function() {=0A=
		// Remember where we started, so that we can go back to it later=0A=
		this.options.orig[this.prop] =3D jQuery.style( this.elem, this.prop );=0A=
		this.options.hide =3D true;=0A=
=0A=
		// Begin the animation=0A=
		this.custom(this.cur(), 0);=0A=
	},=0A=
=0A=
	// Each step of an animation=0A=
	step: function( gotoEnd ) {=0A=
		var t =3D jQuery.now(), done =3D true;=0A=
=0A=
		if ( gotoEnd || t >=3D this.options.duration + this.startTime ) {=0A=
			this.now =3D this.end;=0A=
			this.pos =3D this.state =3D 1;=0A=
			this.update();=0A=
=0A=
			this.options.curAnim[ this.prop ] =3D true;=0A=
=0A=
			for ( var i in this.options.curAnim ) {=0A=
				if ( this.options.curAnim[i] !=3D=3D true ) {=0A=
					done =3D false;=0A=
				}=0A=
			}=0A=
=0A=
			if ( done ) {=0A=
				// Reset the overflow=0A=
				if ( this.options.overflow !=3D null && =
!jQuery.support.shrinkWrapBlocks ) {=0A=
					var elem =3D this.elem,=0A=
						options =3D this.options;=0A=
=0A=
					jQuery.each( [ "", "X", "Y" ], function (index, value) {=0A=
						elem.style[ "overflow" + value ] =3D options.overflow[index];=0A=
					} );=0A=
				}=0A=
=0A=
				// Hide the element if the "hide" operation was done=0A=
				if ( this.options.hide ) {=0A=
					jQuery(this.elem).hide();=0A=
				}=0A=
=0A=
				// Reset the properties, if the item has been hidden or shown=0A=
				if ( this.options.hide || this.options.show ) {=0A=
					for ( var p in this.options.curAnim ) {=0A=
						jQuery.style( this.elem, p, this.options.orig[p] );=0A=
					}=0A=
				}=0A=
=0A=
				// Execute the complete function=0A=
				this.options.complete.call( this.elem );=0A=
			}=0A=
=0A=
			return false;=0A=
=0A=
		} else {=0A=
			var n =3D t - this.startTime;=0A=
			this.state =3D n / this.options.duration;=0A=
=0A=
			// Perform the easing function, defaults to swing=0A=
			var specialEasing =3D this.options.specialEasing && =
this.options.specialEasing[this.prop];=0A=
			var defaultEasing =3D this.options.easing || (jQuery.easing.swing ? =
"swing" : "linear");=0A=
			this.pos =3D jQuery.easing[specialEasing || =
defaultEasing](this.state, n, 0, 1, this.options.duration);=0A=
			this.now =3D this.start + ((this.end - this.start) * this.pos);=0A=
=0A=
			// Perform the next step of the animation=0A=
			this.update();=0A=
		}=0A=
=0A=
		return true;=0A=
	}=0A=
};=0A=
=0A=
jQuery.extend( jQuery.fx, {=0A=
	tick: function() {=0A=
		var timers =3D jQuery.timers;=0A=
=0A=
		for ( var i =3D 0; i < timers.length; i++ ) {=0A=
			if ( !timers[i]() ) {=0A=
				timers.splice(i--, 1);=0A=
			}=0A=
		}=0A=
=0A=
		if ( !timers.length ) {=0A=
			jQuery.fx.stop();=0A=
		}=0A=
	},=0A=
=0A=
	interval: 13,=0A=
=0A=
	stop: function() {=0A=
		clearInterval( timerId );=0A=
		timerId =3D null;=0A=
	},=0A=
=0A=
	speeds: {=0A=
		slow: 600,=0A=
		fast: 200,=0A=
		// Default speed=0A=
		_default: 400=0A=
	},=0A=
=0A=
	step: {=0A=
		opacity: function( fx ) {=0A=
			jQuery.style( fx.elem, "opacity", fx.now );=0A=
		},=0A=
=0A=
		_default: function( fx ) {=0A=
			if ( fx.elem.style && fx.elem.style[ fx.prop ] !=3D null ) {=0A=
				fx.elem.style[ fx.prop ] =3D (fx.prop =3D=3D=3D "width" || fx.prop =
=3D=3D=3D "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;=0A=
			} else {=0A=
				fx.elem[ fx.prop ] =3D fx.now;=0A=
			}=0A=
		}=0A=
	}=0A=
});=0A=
=0A=
if ( jQuery.expr && jQuery.expr.filters ) {=0A=
	jQuery.expr.filters.animated =3D function( elem ) {=0A=
		return jQuery.grep(jQuery.timers, function( fn ) {=0A=
			return elem =3D=3D=3D fn.elem;=0A=
		}).length;=0A=
	};=0A=
}=0A=
=0A=
function defaultDisplay( nodeName ) {=0A=
	if ( !elemdisplay[ nodeName ] ) {=0A=
		var elem =3D jQuery("<" + nodeName + ">").appendTo("body"),=0A=
			display =3D elem.css("display");=0A=
=0A=
		elem.remove();=0A=
=0A=
		if ( display =3D=3D=3D "none" || display =3D=3D=3D "" ) {=0A=
			display =3D "block";=0A=
		}=0A=
=0A=
		elemdisplay[ nodeName ] =3D display;=0A=
	}=0A=
=0A=
	return elemdisplay[ nodeName ];=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
var rtable =3D /^t(?:able|d|h)$/i,=0A=
	rroot =3D /^(?:body|html)$/i;=0A=
=0A=
if ( "getBoundingClientRect" in document.documentElement ) {=0A=
	jQuery.fn.offset =3D function( options ) {=0A=
		var elem =3D this[0], box;=0A=
=0A=
		if ( options ) {=0A=
			return this.each(function( i ) {=0A=
				jQuery.offset.setOffset( this, options, i );=0A=
			});=0A=
		}=0A=
=0A=
		if ( !elem || !elem.ownerDocument ) {=0A=
			return null;=0A=
		}=0A=
=0A=
		if ( elem =3D=3D=3D elem.ownerDocument.body ) {=0A=
			return jQuery.offset.bodyOffset( elem );=0A=
		}=0A=
=0A=
		try {=0A=
			box =3D elem.getBoundingClientRect();=0A=
		} catch(e) {}=0A=
=0A=
		var doc =3D elem.ownerDocument,=0A=
			docElem =3D doc.documentElement;=0A=
=0A=
		// Make sure we're not dealing with a disconnected DOM node=0A=
		if ( !box || !jQuery.contains( docElem, elem ) ) {=0A=
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };=0A=
		}=0A=
=0A=
		var body =3D doc.body,=0A=
			win =3D getWindow(doc),=0A=
			clientTop  =3D docElem.clientTop  || body.clientTop  || 0,=0A=
			clientLeft =3D docElem.clientLeft || body.clientLeft || 0,=0A=
			scrollTop  =3D win.pageYOffset || jQuery.support.boxModel && =
docElem.scrollTop  || body.scrollTop,=0A=
			scrollLeft =3D win.pageXOffset || jQuery.support.boxModel && =
docElem.scrollLeft || body.scrollLeft,=0A=
			top  =3D box.top  + scrollTop  - clientTop,=0A=
			left =3D box.left + scrollLeft - clientLeft;=0A=
=0A=
		return { top: top, left: left };=0A=
	};=0A=
=0A=
} else {=0A=
	jQuery.fn.offset =3D function( options ) {=0A=
		var elem =3D this[0];=0A=
=0A=
		if ( options ) {=0A=
			return this.each(function( i ) {=0A=
				jQuery.offset.setOffset( this, options, i );=0A=
			});=0A=
		}=0A=
=0A=
		if ( !elem || !elem.ownerDocument ) {=0A=
			return null;=0A=
		}=0A=
=0A=
		if ( elem =3D=3D=3D elem.ownerDocument.body ) {=0A=
			return jQuery.offset.bodyOffset( elem );=0A=
		}=0A=
=0A=
		jQuery.offset.initialize();=0A=
=0A=
		var computedStyle,=0A=
			offsetParent =3D elem.offsetParent,=0A=
			prevOffsetParent =3D elem,=0A=
			doc =3D elem.ownerDocument,=0A=
			docElem =3D doc.documentElement,=0A=
			body =3D doc.body,=0A=
			defaultView =3D doc.defaultView,=0A=
			prevComputedStyle =3D defaultView ? defaultView.getComputedStyle( =
elem, null ) : elem.currentStyle,=0A=
			top =3D elem.offsetTop,=0A=
			left =3D elem.offsetLeft;=0A=
=0A=
		while ( (elem =3D elem.parentNode) && elem !=3D=3D body && elem =
!=3D=3D docElem ) {=0A=
			if ( jQuery.offset.supportsFixedPosition && =
prevComputedStyle.position =3D=3D=3D "fixed" ) {=0A=
				break;=0A=
			}=0A=
=0A=
			computedStyle =3D defaultView ? defaultView.getComputedStyle(elem, =
null) : elem.currentStyle;=0A=
			top  -=3D elem.scrollTop;=0A=
			left -=3D elem.scrollLeft;=0A=
=0A=
			if ( elem =3D=3D=3D offsetParent ) {=0A=
				top  +=3D elem.offsetTop;=0A=
				left +=3D elem.offsetLeft;=0A=
=0A=
				if ( jQuery.offset.doesNotAddBorder && =
!(jQuery.offset.doesAddBorderForTableAndCells && =
rtable.test(elem.nodeName)) ) {=0A=
					top  +=3D parseFloat( computedStyle.borderTopWidth  ) || 0;=0A=
					left +=3D parseFloat( computedStyle.borderLeftWidth ) || 0;=0A=
				}=0A=
=0A=
				prevOffsetParent =3D offsetParent;=0A=
				offsetParent =3D elem.offsetParent;=0A=
			}=0A=
=0A=
			if ( jQuery.offset.subtractsBorderForOverflowNotVisible && =
computedStyle.overflow !=3D=3D "visible" ) {=0A=
				top  +=3D parseFloat( computedStyle.borderTopWidth  ) || 0;=0A=
				left +=3D parseFloat( computedStyle.borderLeftWidth ) || 0;=0A=
			}=0A=
=0A=
			prevComputedStyle =3D computedStyle;=0A=
		}=0A=
=0A=
		if ( prevComputedStyle.position =3D=3D=3D "relative" || =
prevComputedStyle.position =3D=3D=3D "static" ) {=0A=
			top  +=3D body.offsetTop;=0A=
			left +=3D body.offsetLeft;=0A=
		}=0A=
=0A=
		if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position =
=3D=3D=3D "fixed" ) {=0A=
			top  +=3D Math.max( docElem.scrollTop, body.scrollTop );=0A=
			left +=3D Math.max( docElem.scrollLeft, body.scrollLeft );=0A=
		}=0A=
=0A=
		return { top: top, left: left };=0A=
	};=0A=
}=0A=
=0A=
jQuery.offset =3D {=0A=
	initialize: function() {=0A=
		var body =3D document.body, container =3D =
document.createElement("div"), innerDiv, checkDiv, table, td, =
bodyMarginTop =3D parseFloat( jQuery.css(body, "marginTop") ) || 0,=0A=
			html =3D "<div =
style=3D'position:absolute;top:0;left:0;margin:0;border:5px solid =
#000;padding:0;width:1px;height:1px;'><div></div></div><table =
style=3D'position:absolute;top:0;left:0;margin:0;border:5px solid =
#000;padding:0;width:1px;height:1px;' cellpadding=3D'0' =
cellspacing=3D'0'><tr><td></td></tr></table>";=0A=
=0A=
		jQuery.extend( container.style, { position: "absolute", top: 0, left: =
0, margin: 0, border: 0, width: "1px", height: "1px", visibility: =
"hidden" } );=0A=
=0A=
		container.innerHTML =3D html;=0A=
		body.insertBefore( container, body.firstChild );=0A=
		innerDiv =3D container.firstChild;=0A=
		checkDiv =3D innerDiv.firstChild;=0A=
		td =3D innerDiv.nextSibling.firstChild.firstChild;=0A=
=0A=
		this.doesNotAddBorder =3D (checkDiv.offsetTop !=3D=3D 5);=0A=
		this.doesAddBorderForTableAndCells =3D (td.offsetTop =3D=3D=3D 5);=0A=
=0A=
		checkDiv.style.position =3D "fixed";=0A=
		checkDiv.style.top =3D "20px";=0A=
=0A=
		// safari subtracts parent border width here which is 5px=0A=
		this.supportsFixedPosition =3D (checkDiv.offsetTop =3D=3D=3D 20 || =
checkDiv.offsetTop =3D=3D=3D 15);=0A=
		checkDiv.style.position =3D checkDiv.style.top =3D "";=0A=
=0A=
		innerDiv.style.overflow =3D "hidden";=0A=
		innerDiv.style.position =3D "relative";=0A=
=0A=
		this.subtractsBorderForOverflowNotVisible =3D (checkDiv.offsetTop =
=3D=3D=3D -5);=0A=
=0A=
		this.doesNotIncludeMarginInBodyOffset =3D (body.offsetTop !=3D=3D =
bodyMarginTop);=0A=
=0A=
		body.removeChild( container );=0A=
		jQuery.offset.initialize =3D jQuery.noop;=0A=
	},=0A=
=0A=
	bodyOffset: function( body ) {=0A=
		var top =3D body.offsetTop,=0A=
			left =3D body.offsetLeft;=0A=
=0A=
		jQuery.offset.initialize();=0A=
=0A=
		if ( jQuery.offset.doesNotIncludeMarginInBodyOffset ) {=0A=
			top  +=3D parseFloat( jQuery.css(body, "marginTop") ) || 0;=0A=
			left +=3D parseFloat( jQuery.css(body, "marginLeft") ) || 0;=0A=
		}=0A=
=0A=
		return { top: top, left: left };=0A=
	},=0A=
=0A=
	setOffset: function( elem, options, i ) {=0A=
		var position =3D jQuery.css( elem, "position" );=0A=
=0A=
		// set position first, in-case top/left are set even on static elem=0A=
		if ( position =3D=3D=3D "static" ) {=0A=
			elem.style.position =3D "relative";=0A=
		}=0A=
=0A=
		var curElem =3D jQuery( elem ),=0A=
			curOffset =3D curElem.offset(),=0A=
			curCSSTop =3D jQuery.css( elem, "top" ),=0A=
			curCSSLeft =3D jQuery.css( elem, "left" ),=0A=
			calculatePosition =3D (position =3D=3D=3D "absolute" || position =
=3D=3D=3D "fixed") && jQuery.inArray('auto', [curCSSTop, curCSSLeft]) > =
-1,=0A=
			props =3D {}, curPosition =3D {}, curTop, curLeft;=0A=
=0A=
		// need to be able to calculate position if either top or left is auto =
and position is either absolute or fixed=0A=
		if ( calculatePosition ) {=0A=
			curPosition =3D curElem.position();=0A=
		}=0A=
=0A=
		curTop  =3D calculatePosition ? curPosition.top  : parseInt( =
curCSSTop,  10 ) || 0;=0A=
		curLeft =3D calculatePosition ? curPosition.left : parseInt( =
curCSSLeft, 10 ) || 0;=0A=
=0A=
		if ( jQuery.isFunction( options ) ) {=0A=
			options =3D options.call( elem, i, curOffset );=0A=
		}=0A=
=0A=
		if (options.top !=3D null) {=0A=
			props.top =3D (options.top - curOffset.top) + curTop;=0A=
		}=0A=
		if (options.left !=3D null) {=0A=
			props.left =3D (options.left - curOffset.left) + curLeft;=0A=
		}=0A=
=0A=
		if ( "using" in options ) {=0A=
			options.using.call( elem, props );=0A=
		} else {=0A=
			curElem.css( props );=0A=
		}=0A=
	}=0A=
};=0A=
=0A=
=0A=
jQuery.fn.extend({=0A=
	position: function() {=0A=
		if ( !this[0] ) {=0A=
			return null;=0A=
		}=0A=
=0A=
		var elem =3D this[0],=0A=
=0A=
		// Get *real* offsetParent=0A=
		offsetParent =3D this.offsetParent(),=0A=
=0A=
		// Get correct offsets=0A=
		offset       =3D this.offset(),=0A=
		parentOffset =3D rroot.test(offsetParent[0].nodeName) ? { top: 0, =
left: 0 } : offsetParent.offset();=0A=
=0A=
		// Subtract element margins=0A=
		// note: when an element has margin: auto the offsetLeft and marginLeft=0A=
		// are the same in Safari causing offset.left to incorrectly be 0=0A=
		offset.top  -=3D parseFloat( jQuery.css(elem, "marginTop") ) || 0;=0A=
		offset.left -=3D parseFloat( jQuery.css(elem, "marginLeft") ) || 0;=0A=
=0A=
		// Add offsetParent borders=0A=
		parentOffset.top  +=3D parseFloat( jQuery.css(offsetParent[0], =
"borderTopWidth") ) || 0;=0A=
		parentOffset.left +=3D parseFloat( jQuery.css(offsetParent[0], =
"borderLeftWidth") ) || 0;=0A=
=0A=
		// Subtract the two offsets=0A=
		return {=0A=
			top:  offset.top  - parentOffset.top,=0A=
			left: offset.left - parentOffset.left=0A=
		};=0A=
	},=0A=
=0A=
	offsetParent: function() {=0A=
		return this.map(function() {=0A=
			var offsetParent =3D this.offsetParent || document.body;=0A=
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && =
jQuery.css(offsetParent, "position") =3D=3D=3D "static") ) {=0A=
				offsetParent =3D offsetParent.offsetParent;=0A=
			}=0A=
			return offsetParent;=0A=
		});=0A=
	}=0A=
});=0A=
=0A=
=0A=
// Create scrollLeft and scrollTop methods=0A=
jQuery.each( ["Left", "Top"], function( i, name ) {=0A=
	var method =3D "scroll" + name;=0A=
=0A=
	jQuery.fn[ method ] =3D function(val) {=0A=
		var elem =3D this[0], win;=0A=
=0A=
		if ( !elem ) {=0A=
			return null;=0A=
		}=0A=
=0A=
		if ( val !=3D=3D undefined ) {=0A=
			// Set the scroll offset=0A=
			return this.each(function() {=0A=
				win =3D getWindow( this );=0A=
=0A=
				if ( win ) {=0A=
					win.scrollTo(=0A=
						!i ? val : jQuery(win).scrollLeft(),=0A=
						i ? val : jQuery(win).scrollTop()=0A=
					);=0A=
=0A=
				} else {=0A=
					this[ method ] =3D val;=0A=
				}=0A=
			});=0A=
		} else {=0A=
			win =3D getWindow( elem );=0A=
=0A=
			// Return the scroll offset=0A=
			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : =
"pageXOffset" ] :=0A=
				jQuery.support.boxModel && win.document.documentElement[ method ] ||=0A=
					win.document.body[ method ] :=0A=
				elem[ method ];=0A=
		}=0A=
	};=0A=
});=0A=
=0A=
function getWindow( elem ) {=0A=
	return jQuery.isWindow( elem ) ?=0A=
		elem :=0A=
		elem.nodeType =3D=3D=3D 9 ?=0A=
			elem.defaultView || elem.parentWindow :=0A=
			false;=0A=
}=0A=
=0A=
=0A=
=0A=
=0A=
// Create innerHeight, innerWidth, outerHeight and outerWidth methods=0A=
jQuery.each([ "Height", "Width" ], function( i, name ) {=0A=
=0A=
	var type =3D name.toLowerCase();=0A=
=0A=
	// innerHeight and innerWidth=0A=
	jQuery.fn["inner" + name] =3D function() {=0A=
		return this[0] ?=0A=
			parseFloat( jQuery.css( this[0], type, "padding" ) ) :=0A=
			null;=0A=
	};=0A=
=0A=
	// outerHeight and outerWidth=0A=
	jQuery.fn["outer" + name] =3D function( margin ) {=0A=
		return this[0] ?=0A=
			parseFloat( jQuery.css( this[0], type, margin ? "margin" : "border" ) =
) :=0A=
			null;=0A=
	};=0A=
=0A=
	jQuery.fn[ type ] =3D function( size ) {=0A=
		// Get window width or height=0A=
		var elem =3D this[0];=0A=
		if ( !elem ) {=0A=
			return size =3D=3D null ? null : this;=0A=
		}=0A=
=0A=
		if ( jQuery.isFunction( size ) ) {=0A=
			return this.each(function( i ) {=0A=
				var self =3D jQuery( this );=0A=
				self[ type ]( size.call( this, i, self[ type ]() ) );=0A=
			});=0A=
		}=0A=
=0A=
		if ( jQuery.isWindow( elem ) ) {=0A=
			// Everyone else use document.documentElement or document.body =
depending on Quirks vs Standards mode=0A=
			// 3rd condition allows Nokia support, as it supports the docElem =
prop but not CSS1Compat=0A=
			var docElemProp =3D elem.document.documentElement[ "client" + name ];=0A=
			return elem.document.compatMode =3D=3D=3D "CSS1Compat" && docElemProp =
||=0A=
				elem.document.body[ "client" + name ] || docElemProp;=0A=
=0A=
		// Get document width or height=0A=
		} else if ( elem.nodeType =3D=3D=3D 9 ) {=0A=
			// Either scroll[Width/Height] or offset[Width/Height], whichever is =
greater=0A=
			return Math.max(=0A=
				elem.documentElement["client" + name],=0A=
				elem.body["scroll" + name], elem.documentElement["scroll" + name],=0A=
				elem.body["offset" + name], elem.documentElement["offset" + name]=0A=
			);=0A=
=0A=
		// Get or set width or height on the element=0A=
		} else if ( size =3D=3D=3D undefined ) {=0A=
			var orig =3D jQuery.css( elem, type ),=0A=
				ret =3D parseFloat( orig );=0A=
=0A=
			return jQuery.isNaN( ret ) ? orig : ret;=0A=
=0A=
		// Set the width or height on the element (default to pixels if value =
is unitless)=0A=
		} else {=0A=
			return this.css( type, typeof size =3D=3D=3D "string" ? size : size + =
"px" );=0A=
		}=0A=
	};=0A=
=0A=
});=0A=
=0A=
=0A=
window.jQuery =3D window.$ =3D jQuery;=0A=
})(window);=0A=

------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/shCore.js

/**=0A=
 * SyntaxHighlighter=0A=
 * http://alexgorbatchev.com/=0A=
 *=0A=
 * SyntaxHighlighter is donationware. If you are using it, please donate.=0A=
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate=0A=
 *=0A=
 * @version=0A=
 * 2.1.382 (June 24 2010)=0A=
 * =0A=
 * @copyright=0A=
 * Copyright (C) 2004-2009 Alex Gorbatchev.=0A=
 *=0A=
 * @license=0A=
 * This file is part of SyntaxHighlighter.=0A=
 * =0A=
 * SyntaxHighlighter is free software: you can redistribute it and/or =
modify=0A=
 * it under the terms of the GNU Lesser General Public License as =
published by=0A=
 * the Free Software Foundation, either version 3 of the License, or=0A=
 * (at your option) any later version.=0A=
 * =0A=
 * SyntaxHighlighter is distributed in the hope that it will be useful,=0A=
 * but WITHOUT ANY WARRANTY; without even the implied warranty of=0A=
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the=0A=
 * GNU General Public License for more details.=0A=
 * =0A=
 * You should have received a copy of the GNU General Public License=0A=
 * along with SyntaxHighlighter.  If not, see =
<http://www.gnu.org/copyleft/lesser.html>.=0A=
 */=0A=
eval(function(p,a,c,k,e,d){e=3Dfunction(c){return(c<a?'':e(parseInt(c/a))=
)+((c=3Dc%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace=
(/^/,String)){while(c--){d[e(c)]=3Dk[c]||e(c)}k=3D[function(e){return =
d[e]}];e=3Dfunction(){return'\\w+'};c=3D1};while(c--){if(k[c]){p=3Dp.repl=
ace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('c(!1k.2G){h =
2G=3Dl(){h =
p=3D{6b:{"1o-U":"","84-2d":1,"83-2d-82":I,"1M":v,"8z-8H":I,"1H-2L":4,"3j"=
:I,"1y":I,"67":N,"8B-8o":I,"7X":N,"5h-1n":I,"1F-1m":N},M:{4Q:I,6f:v,5o:16=
,5k:16,8s:N,8G:N,89:"58",1g:{5p:"54 1j",5b:"9O 1j",5j:"9P 6k 6q",76:"9N =
C 9M 26 9J 6q 9K",3o:"3o",6F:"?",1x:"2G\\n\\n",6M:"9L\'t 9Q 2V D: =
",86:"9R 9W\'t 9X D 1F-1m 9V: ",78:"<!9U 1F 9S \\"-//9T//6j 9I 1.0 =
9H//9w\\" \\"2o://5x.6J.6u/9x/6H/6j/6H-9v.9u\\"><1F =
9r=3D\\"2o://5x.6J.6u/9y/9z\\"><6y><9F 2o-9G=3D\\"9E-9D\\" =
60=3D\\"1X/1F; 9A=3D9B-8\\" /><39>9C 2G</39></6y><2Z =
1t=3D\\"3H-9Z:an,ao,am,al-ai;aj-43:#ak;43:#ap;3H-2L:aq;1X-6z:6A;\\"><B =
1t=3D\\"1X-6z:6A;6x-4G:au;\\"><B 1t=3D\\"3H-2L:at-ar;\\">2G</B><B =
1t=3D\\"3H-2L:.ah;6x-9q:ag;\\"><B>6O 2.1.a5 (a6 24 a4)</B><B><a =
1Q=3D\\"2o://6G.3x\\" a3=3D\\"44\\" =
1t=3D\\"43:#6E;1X-6t:6r;\\">2o://6G.3x</a></B><B>a1 a2 a7 f 1m, a8 <a =
1Q=3D\\"ae://5x.af.3x/ad-ac/a9?aa=3Dab-ax&8Z=3D8Q\\" =
1t=3D\\"43:#6E;1X-6t:6r;\\">8P</a> 6k 8N 8R 8S!</B></B><B>8W C 8V =
8U.</B><B>8X 8J-8K 8O =
9h.</B></B></2Z></1F>"},8C:N},1q:{4U:v,9g:v,3D:v,6g:{}},2n:{},8l:{9f:/\\/=
\\*[\\s\\S]*?\\*\\//3v,9d:/\\/\\/.*$/3v,9e:/#.*$/3v,9j:/"([^\\\\"\\n]|\\\=
\.)*"/g,9o:/\'([^\\\\\'\\n]|\\\\.)*\'/g,8Y:/"([^\\\\"]|\\\\.)*"/g,9m:/\'(=
[^\\\\\']|\\\\.)*\'/g,9k:/(&X;|<)!--[\\s\\S]*?--(&Y;|>)/3v,3Q:/&X;\\w+:\\=
/\\/[\\w-.\\/?%&=3D@:;]*&Y;|\\w+:\\/\\/[\\w-.\\/?%&=3D@:;]*/g,9c:{F:/(&X;=
|<)\\?=3D?/g,19:/\\?(&Y;|>)/g},92:{F:/(&X;|<)%=3D?/g,19:/%(&Y;|>)/g},91:{=
F:/(&X;|<)\\s*1m.*?(&Y;|>)/4v,19:/(&X;|<)\\/\\s*1m\\s*(&Y;|>)/4v}},1y:{18=
:l(3f){h 3C=3DQ.1N("3c"),5s=3Dp.1y.7d;3C.L=3D"1y";D(h 35 26 5s){h =
6h=3D5s[35],5r=3DW =
6h(3f),1U=3D5r.18();3f.6a[35]=3D5r;c(1U=3D=3Dv){1J}c(7I(1U)=3D=3D"90"){1U=
=3Dp.1y.6l(1U,3f.1h,35)}1U.L+=3D"5v "+35;3C.2u(1U)}q =
3C},6l:l(5K,6m,5D){h =
a=3DQ.1N("a"),5M=3Da.1t,5u=3Dp.M,5L=3D5u.5o,5N=3D5u.5k;a.1Q=3D"#"+5D;a.39=
=3D5K;a.5g=3D6m;a.75=3D5D;a.27=3D5K;c(38(5L)=3D=3DN){5M.1W=3D5L+"73"}c(38=
(5N)=3D=3DN){5M.2s=3D5N+"73"}a.96=3Dl(e){9n{p.1y.7a(f,e||1k.6V,f.5g,f.75)=
}97(e){p.A.1x(e.77)}q N};q a},7a:l(7f,7e,7b,7h,7c){h =
5G=3Dp.1q.6g[7b],5H;c(5G=3D=3Dv||(5H=3D5G.6a[7h])=3D=3Dv){q v}q =
5H.2B(7f,7e,7c)},7d:{5p:l(59){f.18=3Dl(){c(59.T("67")!=3DI){q}q =
p.M.1g.5p};f.2B=3Dl(5a,8T,8M){h =
B=3D59.B;5a.8v.4u(5a);B.L=3DB.L.E("5O","")}},5b:l(71){f.18=3Dl(){q =
p.M.1g.5b};f.2B=3Dl(aV,bV,bW){h =
3Y=3Dp.A.3E(71.5f).E(/</g,"&X;"),2t=3Dp.A.4M("","44",bU,bT,"bR=3D0, =
bS=3D1, bX=3D0, =
6s=3D1");3Y=3Dp.A.2I(3Y);2t.Q.3I("<58>"+3Y+"</58>");2t.Q.4c()}},5j:l(65){=
h 3k,bY,5i=3D65.1h;f.18=3Dl(){h 2Q=3Dp.M;c(2Q.6f=3D=3Dv){q v}l 1I(52){h =
5e=3D"";D(h 56 26 52){5e+=3D"<c3 U=3D\'"+56+"\' 23=3D\'"+52[56]+"\'/>"}q =
5e};l 2q(5l){h 5n=3D"";D(h 5m 26 5l){5n+=3D" "+5m+"=3D\'"+5l[5m]+"\'"}q =
5n};h =
68=3D{1W:2Q.5o,2s:2Q.5k,1h:5i+"c0",4j:"bQ/x-6Z-6U",39:p.M.1g.5j},5V=3D{bP=
:"ay",bG:"bH",bF:"5g=3D"+5i,bD:"N"},5W=3D2Q.6f,3O;c(/bI/i.1R(7j.6B)){3O=3D=
"<4d"+2q({bJ:"bO:bN-bM-bK-bL-c4",cl:"2o://cj.c7.3x/ce/6Z/ck/6U/c9.ci#6O=3D=
9,0,0,0"})+2q(68)+">"+1I(5V)+1I({c8:5W})+"</4d>"}G{3O=3D"<c6"+2q(68)+2q(5=
V)+2q({cf:5W})+"/>"}3k=3DQ.1N("B");3k.27=3D3O;q 3k};f.2B=3Dl(co,cn,63){h =
72=3D63.bA;6S(72){2O"7l":h =
64=3Dp.A.2I(p.A.3E(65.5f).E(/&X;/g,"<").E(/&Y;/g,">").E(/&aT;/g,"&"));c(1=
k.74){1k.74.aU("1X",64)}G{q =
p.A.2I(64)}2O"aS":p.A.1x(p.M.1g.76);2y;2O"aP":p.A.1x(63.77);2y}}},bB:l(61=
){f.18=3Dl(){q p.M.1g.3o};f.2B=3Dl(aW,b1,b2){h =
29=3DQ.1N("b0"),1G=3Dv;c(p.1q.3D!=3Dv){Q.2Z.4u(p.1q.3D)}p.1q.3D=3D29;29.1=
t.aX=3D"aY:aO;1W:6w;2s:6w;F:-6o;4G:-6o;";Q.2Z.2u(29);1G=3D29.5Z.Q;6D(1G,1=
k.Q);1G.3I("<B 1o=3D\\""+61.B.L.E("5O","")+" =
aD\\">"+61.B.27+"</B>");1G.4c();29.5Z.4Y();29.5Z.3o();l 6D(6I,6C){h =
2E=3D6C.4D("4e");D(h =
i=3D0;i<2E.u;i++){c(2E[i].6i.70()=3D=3D"6P"&&/aC\\.1a$/.1R(2E[i].1Q)){6I.=
3I("<4e 4j=3D\\"1X/1a\\" 6i=3D\\"6P\\" =
1Q=3D\\""+2E[i].1Q+"\\"></4e>")}}}}},az:l(aA){f.18=3Dl(){q =
p.M.1g.6F};f.2B=3Dl(aG,aL){h =
2t=3Dp.A.4M("","44",aK,aJ,"6s=3D0"),1G=3D2t.Q;1G.3I(p.M.1g.78);1G.4c();2t=
.4Y()}}}},A:{Z:l(4a,6L,3U){3U=3D3w.aH(3U||0,0);D(h =
i=3D3U;i<4a.u;i++){c(4a[i]=3D=3D6L){q i}}q-1},6d:l(7g){q =
7g+3w.aI(3w.b3()*b4).2h()},6c:l(47,46){h 3m=3D{},28;D(28 26 =
47){3m[28]=3D47[28]}D(28 26 46){3m[28]=3D46[28]}q =
3m},7t:l(4L){6S(4L){2O"I":q I;2O"N":q N}q 4L},4M:l(3Q,6W,4H,4O,2R){h =
x=3D(6T.1W-4H)/2,y=3D(6T.2s-4O)/2;2R+=3D", F=3D"+x+", 4G=3D"+y+", =
1W=3D"+4H+", 2s=3D"+4O;2R=3D2R.E(/^,/,"");h =
4V=3D1k.bn(3Q,6W,2R);4V.4Y();q =
4V},7y:l(1E,1Y,1Z){c(1E.6X){1E["e"+1Y+1Z]=3D1Z;1E[1Y+1Z]=3Dl(){1E["e"+1Y+=
1Z](1k.6V)};1E.6X("bt"+1Y,1E[1Y+1Z])}G{1E.by(1Y,1Z,N)}},1x:l(z){1x(p.M.1g=
.1x+z)},4P:l(4h,6N){h 2w=3Dp.1q.4U,3W=3Dv;c(2w=3D=3Dv){2w=3D{};D(h 2W 26 =
p.2n){h 3g=3Dp.2n[2W].bx;c(3g=3D=3Dv){1J}p.2n[2W].U=3D2W.70();D(h =
i=3D0;i<3g.u;i++){2w[3g[i]]=3D2W}}p.1q.4U=3D2w}3W=3Dp.2n[2w[4h]];c(3W=3D=3D=
v&&6N!=3DN){p.A.1x(p.M.1g.6M+4h)}q 3W},4x:l(z,6Q){h 2C=3Dz.1O("\\n");D(h =
i=3D0;i<2C.u;i++){2C[i]=3D6Q(2C[i])}q 2C.5A("\\n")},7A:l(z){q z.E(/^[ =
]*[\\n]+|[\\n]*[ ]*$/g,"")},8b:l(z){h 42,4E=3D{},4S=3DW =
V("^\\\\[(?<4T>(.*?))\\\\]$"),6R=3DW =
V("(?<U>[\\\\w-]+)"+"\\\\s*:\\\\s*"+"(?<23>"+"[\\\\w-%#]+|"+"\\\\[.*?\\\\=
]|"+"\\".*?\\"|"+"\'.*?\'"+")\\\\s*;?","g");2r((42=3D6R.R(z))!=3Dv){h =
2f=3D42.23.E(/^[\'"]|[\'"]$/g,"");c(2f!=3Dv&&4S.1R(2f)){h =
m=3D4S.R(2f);2f=3Dm.4T.u>0?m.4T.1O(/\\s*,\\s*/):[]}4E[42.U]=3D2f}q =
4E},7Q:l(z,1a){c(z=3D=3Dv||z.u=3D=3D0||z=3D=3D"\\n"){q =
z}z=3Dz.E(/</g,"&X;");z=3Dz.E(/ {2,}/g,l(m){h 4o=3D"";D(h =
i=3D0;i<m.u-1;i++){4o+=3D"&2m;"}q 4o+" =
"});c(1a!=3Dv){z=3Dp.A.4x(z,l(2j){c(2j.u=3D=3D0){q""}h =
3F=3D"";2j=3D2j.E(/^(&2m;| )+/,l(s){3F=3Ds;q""});c(2j.u=3D=3D0){q 3F}q =
3F+"<C 1o=3D\\""+1a+"\\">"+2j+"</C>"})}q z},81:l(79,7i){h =
34=3D79.2h();2r(34.u<7i){34=3D"0"+34}q 34},6p:l(){h =
40=3DQ.1N("B"),3J,3i=3D0,4y=3DQ.2Z,1h=3Dp.A.6d("6p"),36=3D"<B =
1o=3D\\"",33=3D"</B>",4A=3D"</4t>";40.27=3D36+"6e\\">"+36+"1n\\">"+36+"2d=
\\">"+36+"60"+"\\"><4t 1o=3D\\"b7\\"><4t =
1h=3D\\""+1h+"\\">&2m;"+4A+4A+33+33+33+33;4y.2u(40);3J=3DQ.b6(1h);c(/bb/i=
.1R(7j.6B)){h =
6v=3D1k.bh(3J,v);3i=3D80(6v.bg("1W"))}G{3i=3D3J.bd}4y.4u(40);q =
3i},8c:l(6n,6K){h 1H=3D"";D(h i=3D0;i<6K;i++){1H+=3D" "}q =
6n.E(/\\t/g,1H)},8D:l(2F,4w){h be=3D2F.1O("\\n"),1H=3D"\\t",62=3D"";D(h =
i=3D0;i<50;i++){62+=3D"                    "}l 8u(3n,17,8y){q =
3n.22(0,17)+62.22(0,8y)+3n.22(17+1,3n.u)};2F=3Dp.A.4x(2F,l(21){c(21.Z(1H)=
=3D=3D-1){q 21}h 17=3D0;2r((17=3D21.Z(1H))!=3D-1){h =
8r=3D4w-17%4w;21=3D8u(21,17,8r)}q 21});q 2F},3E:l(z){h =
br=3D/<br\\s*\\/?>|&X;br\\s*\\/?&Y;/4v;c(p.M.8s=3D=3DI){z=3Dz.E(br,"\\n")=
}c(p.M.8G=3D=3DI){z=3Dz.E(br,"")}q z},2J:l(z){q =
z.E(/^\\s+|\\s+$/g,"")},2I:l(z){h 2a=3Dp.A.3E(z).1O("\\n"),bf=3DW =
bi(),8g=3D/^\\s*/,20=3Dbc;D(h i=3D0;i<2a.u&&20>0;i++){h =
4z=3D2a[i];c(p.A.2J(4z).u=3D=3D0){1J}h 4C=3D8g.R(4z);c(4C=3D=3Dv){q =
z}20=3D3w.20(4C[0].u,20)}c(20>0){D(h =
i=3D0;i<2a.u;i++){2a[i]=3D2a[i].22(20)}}q =
2a.5A("\\n")},7W:l(31,30){c(31.H<30.H){q-1}G{c(31.H>30.H){q =
1}G{c(31.u<30.u){q-1}G{c(31.u>30.u){q 1}}}}q 0},2S:l(8i,2Y){l =
8p(4B,87){q[W p.4W(4B[0],4B.H,87.1a)]};h =
b5=3D0,4s=3Dv,3Z=3D[],8h=3D2Y.4K?2Y.4K:8p;2r((4s=3D2Y.3K.R(8i))!=3Dv){3Z=3D=
3Z.2l(8h(4s,2Y))}q 3Z},8m:l(8k){h X=3D"&X;",Y=3D"&Y;";q =
8k.E(p.8l.3Q,l(m){h =
4k=3D"",4l=3D"";c(m.Z(X)=3D=3D0){4l=3DX;m=3Dm.3M(X.u)}c(m.Z(Y)=3D=3Dm.u-Y=
.u){m=3Dm.3M(0,m.u-Y.u);4k=3DY}q 4l+"<a =
1Q=3D\\""+m+"\\">"+m+"</a>"+4k})},8a:l(){h 3G=3DQ.4D("1m"),4i=3D[];D(h =
i=3D0;i<3G.u;i++){c(3G[i].4j=3D=3D"6e"){4i.K(3G[i])}}q 4i},8t:l(4n){h =
4m=3D"<![b8[",3P=3D"]]>",1u=3Dp.A.2J(4n),3L=3DN;c(1u.Z(4m)=3D=3D0){1u=3D1=
u.3M(4m.u);3L=3DI}c(1u.Z(3P)=3D=3D1u.u-3P.u){1u=3D1u.3M(0,1u.u-3P.u);3L=3D=
I}q 3L?1u:4n}},1M:l(8e,4p){l 8f(4r){h 4q=3D[];D(h =
i=3D0;i<4r.u;i++){4q.K(4r[i])}q 4q};h =
2k=3D4p?[4p]:8f(Q.4D(p.M.89)),8q=3D"27",2v=3Dv,4R=3Dp.M;c(4R.4Q){2k=3D2k.=
2l(p.A.8a())}c(2k.u=3D=3D=3D0){q}D(h i=3D0;i<2k.u;i++){h =
2T=3D2k[i],1T=3Dp.A.8b(2T.L),1L,2D,1P;1T=3Dp.A.6c(8e,1T);1L=3D1T["2V"];c(=
1L=3D=3Dv){1J}c(1T["1F-1m"]=3D=3D"I"||p.6b["1F-1m"]=3D=3DI){2v=3DW =
p.4b(1L);1L=3D"b9"}G{h 3S=3Dp.A.4P(1L);c(3S){1L=3D3S.U;2v=3DW =
3S()}G{1J}}2D=3D2T[8q];c(4R.4Q){2D=3Dp.A.8t(2D)}1T["2V-U"]=3D1L;2v.1M(2D,=
1T);1P=3D2v.B;c(p.M.8C){1P=3DQ.1N("bk");1P.23=3D2v.B.27;1P.1t.1W=3D"bu";1=
P.1t.2s=3D"bw"}2T.8v.bz(1P,2T)}},bs:l(7x){p.A.7y(1k,"bm",l(){p.1M(7x)})}}=
;p.4W=3Dl(4X,7B,1a){f.23=3D4X;f.H=3D7B;f.u=3D4X.u;f.1a=3D1a;f.5S=3Dv};p.4=
W.1c.2h=3Dl(){q f.23};p.4b=3Dl(4F){h 3t=3Dp.A.4P(4F),2p,4J=3DW =
p.2n.bl(),bo=3Dv;c(3t=3D=3Dv){q}2p=3DW =
3t();f.49=3D4J;c(2p.3N=3D=3Dv){p.A.1x(p.M.1g.86+4F);q}4J.5c.K({3K:2p.3N.C=
,4K:7E});l 3l(4N,7F){D(h j=3D0;j<4N.u;j++){4N[j].H+=3D7F}};l 7E(15,bq){h =
7w=3D15.C,1l=3D[],4Z=3D2p.5c,7v=3D15.H+15.F.u,2P=3D2p.3N,1p;D(h =
i=3D0;i<4Z.u;i++){1p=3Dp.A.2S(7w,4Z[i]);3l(1p,7v);1l=3D1l.2l(1p)}c(2P.F!=3D=
v&&15.F!=3Dv){1p=3Dp.A.2S(15.F,2P.F);3l(1p,15.H);1l=3D1l.2l(1p)}c(2P.19!=3D=
v&&15.19!=3Dv){1p=3Dp.A.2S(15.19,2P.19);3l(1p,15.H+15[0].bp(15.19));1l=3D=
1l.2l(1p)}D(h j=3D0;j<1l.u;j++){1l[j].5S=3D3t.U}q =
1l}};p.4b.1c.1M=3Dl(7k,7p){f.49.1M(7k,7p);f.B=3Df.49.B};p.7q=3Dl(){};p.7q=
.1c=3D{T:l(7u,7s){h 48=3Df.1I[7u];q p.A.7t(48=3D=3Dv?7s:48)},18:l(7H){q =
Q.1N(7H)},8n:l(32,7Y){h 3A=3D[];c(32!=3Dv){D(h =
i=3D0;i<32.u;i++){c(7I(32[i])=3D=3D"4d"){3A=3D3A.2l(p.A.2S(7Y,32[i]))}}}q=
 3A.aM(p.A.7W)},8F:l(){h 1V=3Df.2X;D(h =
i=3D0;i<1V.u;i++){c(1V[i]=3D=3D=3Dv){1J}h 2z=3D1V[i],45=3D2z.H+2z.u;D(h =
j=3Di+1;j<1V.u&&1V[i]!=3D=3Dv;j++){h =
25=3D1V[j];c(25=3D=3D=3Dv){1J}G{c(25.H>45){2y}G{c(25.H=3D=3D2z.H&&25.u>2z=
.u){f.2X[i]=3Dv}G{c(25.H>=3D2z.H&&25.H<45){f.2X[j]=3Dv}}}}}}},7Z:l(2U){h =
3h=3D2U.1O("\\n"),3X=3D80(f.T("84-2d")),2i=3Df.T("83-2d-82"),7U=3Df.T("1M=
",[]),7M=3Df.T("3j");2U=3D"";c(2i=3D=3DI){2i=3D(3X+3h.u-1).2h().u}G{c(38(=
2i)=3D=3DI){2i=3D0}}D(h i=3D0;i<3h.u;i++){h =
1A=3D3h[i],66=3D/^(&2m;|\\s)+/.R(1A),51=3D"aE"+(i%2=3D=3D0?1:2),7N=3Dp.A.=
81(3X+i,2i),7T=3Dp.A.Z(7U,(3X+i).2h())!=3D-1,2H=3Dv;c(66!=3Dv){2H=3D66[0]=
.2h();1A=3D1A.22(2H.u)}1A=3Dp.A.2J(1A);c(1A.u=3D=3D0){1A=3D"&2m;"}c(7T){5=
1+=3D" aN"}2U+=3D"<B 1o=3D\\"2d "+51+"\\">"+"<7P>"+"<7R>"+(7M?"<3T =
1o=3D\\"aZ\\"><C>"+7N+"</C></3T>":"")+"<3T 1o=3D\\"60\\">"+(2H!=3Dv?"<C =
1o=3D\\"aQ\\">"+2H.E(" =
","&2m;")+"</C>":"")+1A+"</3T>"+"</7R>"+"</7P>"+"</B>"}q =
2U},88:l(69,5T){h 17=3D0,3p=3D"",3r=3Dp.A.7Q,5R=3Df.T("2V-U","");l =
5X(5Y){h 5Q=3D5Y?(5Y.5S||5R):5R;q 5Q?5Q+" ":""};D(h i=3D0;i<5T.u;i++){h =
1v=3D5T[i],3y;c(1v=3D=3D=3Dv||1v.u=3D=3D=3D0){1J}3y=3D5X(1v);3p+=3D3r(69.=
22(17,1v.H-17),3y+"7K")+3r(1v.23,3y+1v.1a);17=3D1v.H+1v.u}3p+=3D3r(69.22(=
17),5X()+"7K");q 3p},1M:l(C,7V){h =
cg=3Dp.M,1q=3Dp.1q,B,ca,3e,cd=3D"cm";f.1I=3D{};f.B=3Dv;f.1n=3Dv;f.C=3Dv;f=
.1e=3Dv;f.6a=3D{};f.1h=3Dp.A.6d("ch");1q.6g[f.1h]=3Df;c(C=3D=3D=3Dv){C=3D=
""}f.1I=3Dp.A.6c(p.6b,7V||{});c(f.T("7X")=3D=3DI){f.1I.1y=3Df.1I.3j=3DN}f=
.B=3DB=3Df.18("3c");f.1n=3Df.18("3c");f.1n.L=3D"1n";L=3D"6e";B.1h=3Df.1h;=
c(f.T("67")){L+=3D" 5O"}c(f.T("3j")=3D=3DN){L+=3D" =
c5"}c(f.T("5h-1n")=3D=3DN){f.1n.L+=3D" bC-5h"}L+=3D" =
"+f.T("1o-U");L+=3D" =
"+f.T("2V-U");B.L=3DL;f.5f=3DC;f.C=3Dp.A.7A(C).E(/\\r/g," =
");3e=3Df.T("1H-2L");f.C=3Df.T("8z-8H")=3D=3DI?p.A.8D(f.C,3e):p.A.8c(f.C,=
3e);f.C=3Dp.A.2I(f.C);c(f.T("1y")){f.1e=3Df.18("3c");f.1e.L=3D"1e";f.1e.2=
u(p.1y.18(f));B.2u(f.1e);h 1e=3Df.1e;l =
53(){1e.L=3D1e.L.E("54","")};B.c1=3Dl(){53();1e.L+=3D" =
54"};B.c2=3Dl(){53()}}B.2u(f.1n);f.2X=3Df.8n(f.5c,f.C);f.8F();C=3Df.88(f.=
C,f.2X);C=3Df.7Z(p.A.2J(C));c(f.T("8B-8o")){C=3Dp.A.8m(C)}f.1n.27=3DC},9i=
:l(z){z=3Dz.E(/^\\s+|\\s+$/g,"").E(/\\s+/g,"|");q"\\\\b(?:"+z+")\\\\b"},9=
l:l(2K){f.3N=3D{F:{3K:2K.F,1a:"1m"},19:{3K:2K.19,1a:"1m"},C:W =
V("(?<F>"+2K.F.1j+")"+"(?<C>.*?)"+"(?<19>"+2K.19.1j+")","99")}}};q =
p}()}c(!1k.V){(l(){h =
2A=3D{R:10.1c.R,8w:5I.1c.8w,E:5I.1c.E,1O:5I.1c.1O},1D=3D{13:/(?:[^\\\\([#=
\\s.]+|\\\\(?!k<[\\w$]+>|[7z]{[^}]+})[\\S\\s]?|\\((?=3D\\?(?!#|<[\\w$]+>)=
))+|(\\()(?:\\?(?:(#)[^)]*\\)|<([$\\w]+)>))?|\\\\(?:k<([\\w$]+)>|[7z]{([^=
}]+)})|(\\[\\^?)|([\\S\\s])/g,98:/(?:[^$]+|\\$(?![1-9$&`\']|{[$\\w]+}))+|=
\\$(?:([1-9]\\d*|[$&`\'])|{([$\\w]+)})/g,3d:/^(?:\\s+|#.*)+/,5B:/^(?:[?*+=
]|{\\d+(?:,\\d*)?})/,7J:/&&\\[\\^?/g,7O:/]/g},7G=3Dl(5C,5v,5t){D(h =
i=3D5t||0;i<5C.u;i++){c(5C[i]=3D=3D=3D5v){q =
i}}q-1},8I=3D/()??/.R("")[1]!=3D=3D3a,3b=3D{};V=3Dl(1d,1S){c(1d 5U =
10){c(1S!=3D=3D3a){3q 7n("4g\'t 4I 9a 8A 95 7r 10 5t 94")}q 1d.3z()}h =
1S=3D1S||"",7S=3D1S.Z("s")>-1,7L=3D1S.Z("x")>-1,5z=3DN,3R=3D[],14=3D[],13=
=3D1D.13,J,cc,3V,37,3u;13.O=3D0;2r(J=3D2A.R.2e(13,1d)){c(J[2]){c(!1D.5B.1=
R(1d.1b(13.O))){14.K("(?:)")}}G{c(J[1]){3R.K(J[3]||v);c(J[3]){5z=3DI}14.K=
("(")}G{c(J[4]){37=3D7G(3R,J[4]);14.K(37>-1?"\\\\"+(37+1)+(38(1d.5w(13.O)=
)?"":"(?:)"):J[0])}G{c(J[5]){14.K(3b.7o?3b.7o.7l(J[5],J[0].5w(1)=3D=3D=3D=
"P"):J[0])}G{c(J[6]){c(1d.5w(13.O)=3D=3D=3D"]"){14.K(J[6]=3D=3D=3D"["?"(?=
!)":"[\\\\S\\\\s]");13.O++}G{cc=3DV.8d("&&"+1d.1b(J.H),1D.7J,1D.7O,"",{7D=
:"\\\\"})[0];14.K(J[6]+cc+"]");13.O+=3Dcc.u+1}}G{c(J[7]){c(7S&&J[7]=3D=3D=
=3D"."){14.K("[\\\\S\\\\s]")}G{c(7L&&1D.3d.1R(J[7])){3V=3D2A.R.2e(1D.3d,1=
d.1b(13.O-1))[0].u;c(!1D.5B.1R(1d.1b(13.O-1+3V))){14.K("(?:)")}13.O+=3D3V=
-1}G{14.K(J[7])}}}G{14.K(J[0])}}}}}}}3u=3D10(14.5A(""),2A.E.2e(1S,/[9Y]+/=
g,""));3u.1B=3D{1j:1d,2g:5z?3R:v};q =
3u};V.9s=3Dl(U,o){3b[U]=3Do};10.1c.R=3Dl(z){h =
1f=3D2A.R.2e(f,z),U,i,5y;c(1f){c(8I&&1f.u>1){5y=3DW =
10("^"+f.1j+"$(?!\\\\s)",f.5J());2A.E.2e(1f[0],5y,l(){D(i=3D1;i<8j.u-2;i+=
+){c(8j[i]=3D=3D=3D3a){1f[i]=3D3a}}})}c(f.1B&&f.1B.2g){D(i=3D1;i<1f.u;i++=
){U=3Df.1B.2g[i-1];c(U){1f[U]=3D1f[i]}}}c(f.3s&&f.O>(1f.H+1f[0].u)){f.O--=
}}q =
1f}})()}10.1c.5J=3Dl(){q(f.3s?"g":"")+(f.aw?"i":"")+(f.8E?"m":"")+(f.3d?"=
x":"")+(f.a0?"y":"")};10.1c.3z=3Dl(7C){h 5E=3DW =
V(f.1j,(7C||"")+f.5J());c(f.1B){5E.1B=3D{1j:f.1B.1j,2g:f.1B.2g?f.1B.2g.1b=
(0):v}}q 5E};10.1c.2e=3Dl(93,z){q f.R(z)};10.1c.9b=3Dl(9p,8x){q =
f.R(8x[0])};V.57=3Dl(55,5d){h 5P=3D"/"+55+"/"+(5d||"");q =
V.57[5P]||(V.57[5P]=3DW V(55,5d))};V.41=3Dl(z){q =
z.E(/[-[\\]{}()*+?.\\\\^$|,#\\s]/g,"\\\\$&")};V.8d=3Dl(z,F,11,1i,2N){h =
2N=3D2N||{},2M=3D2N.7D,12=3D2N.cb,1i=3D1i||"",5F=3D1i.Z("g")>-1,6Y=3D1i.Z=
("i")>-1,7m=3D1i.Z("m")>-1,5q=3D1i.Z("y")>-1,1i=3D1i.E(/y/g,""),F=3DF 5U =
10?(F.3s?F:F.3z("g")):W V(F,"g"+1i),11=3D11 5U =
10?(11.3s?11:11.3z("g")):W =
V(11,"g"+1i),1K=3D[],2x=3D0,1s=3D0,1r=3D0,1w=3D0,2c,2b,1z,1C,3B,4f;c(2M){=
c(2M.u>1){3q aR("4g\'t 4I aB aF 7r 41 85")}c(7m){3q 7n("4g\'t 4I 41 85 =
8A bv bj 8E ba")}3B=3DV.41(2M);4f=3DW =
10("^(?:"+3B+"[\\\\S\\\\s]|(?:(?!"+F.1j+"|"+11.1j+")[^"+3B+"])+)+",6Y?"i"=
:"")}2r(I){F.O=3D11.O=3D1r+(2M?(4f.R(z.1b(1r))||[""])[0].u:0);1z=3DF.R(z)=
;1C=3D11.R(z);c(1z&&1C){c(1z.H<=3D1C.H){1C=3Dv}G{1z=3Dv}}c(1z||1C){1s=3D(=
1z||1C).H;1r=3D(1z?F:11).O}G{c(!2x){2y}}c(5q&&!2x&&1s>1w){2y}c(1z){c(!2x+=
+){2c=3D1s;2b=3D1r}}G{c(1C&&2x){c(!--2x){c(12){c(12[0]&&2c>1w){1K.K([12[0=
],z.1b(1w,2c),1w,2c])}c(12[1]){1K.K([12[1],z.1b(2c,2b),2c,2b])}c(12[2]){1=
K.K([12[2],z.1b(2b,1s),2b,1s])}c(12[3]){1K.K([12[3],z.1b(1s,1r),1s,1r])}}=
G{1K.K(z.1b(2b,1s))}1w=3D1r;c(!5F){2y}}}G{F.O=3D11.O=3D0;3q bE("bZ 8L av =
9t =
as")}}c(1s=3D=3D=3D1r){1r++}}c(5F&&!5q&&12&&12[0]&&z.u>1w){1K.K([12[0],z.=
1b(1w),1w,z.u])}F.O=3D11.O=3D0;q =
1K};',62,769,'||||||||||||if|||this||var||||function||||sh|return||||leng=
th|null||||str|utils|div|code|for|replace|left|else|index|true|_121|push|=
className|config|false|lastIndex||document|exec||getParam|name|XRegExp|ne=
w|lt|gt|indexOf|RegExp|_139|vN|part|_11f|_d3||pos|create|right|css|slice|=
prototype|_119|bar|_129|strings|id|_13a|source|window|_d6|script|lines|cl=
ass|_da|vars|_145|_144|style|_b5|_103|_146|alert|toolbar|_149|_f4|_x|_14a=
|lib|obj|html|doc|tab|params|continue|_142|_c3|highlight|createElement|sp=
lit|_c5|href|test|_11a|_c2|_8|_e7|width|text|_5a|_5b|min|_91|substr|value=
||_ec|in|innerHTML|_4f|_3c|_98|_148|_147|line|call|_6e|captureNames|toStr=
ing|_f0|_75|_bc|concat|nbsp|brushes|http|_cd|attributes|while|height|wnd|=
appendChild|_be|_5f|_143|break|_e9|real|execute|_66|_c4|_40|_88|SyntaxHig=
hlighter|_f9|unindent|trim|_10f|size|_13c|_13b|case|_d9|_28|_55|getMatche=
s|_c1|_ed|brush|_61|matches|_a2|body|m2|m1|_e3|_81|_7a|_5|_80|_124|isNaN|=
title|undefined|_118|DIV|extended|_10b|_2|_62|_ee|_7d|gutter|_25|offsetMa=
tches|_4e|_8e|print|_fd|throw|_fe|global|_cc|_125|gm|Math|com|_104|addFla=
gs|_e5|_14b|_3|printFrame|fixInputString|_76|_af|font|write|_7c|regex|_b6=
|substring|htmlScript|_32|_b4|url|_11e|_c6|td|_49|len|_60|_ef|_22|_a7|_7b=
|escape|_6a|color|_blank|_ea|_4d|_4c|_e1|xmlBrush|_47|HtmlScript|close|ob=
ject|link|esc|can|_5d|_b0|type|_ad|_ae|_b3|_b2|_73|_b8|_ba|_b9|_a6|span|r=
emoveChild|gi|_89|eachLine|_7e|_9d|_82|_a3|_9e|getElementsByTagName|_6b|_=
cb|top|_53|supply|_ce|func|_50|popup|_d0|_54|findBrush|useScriptTags|_bf|=
_6c|values|discoveredBrushes|win|Match|_c8|focus|_d7||_f6|_29|hide|show|_=
133|_2b|cache|pre|_19|_1a|viewSource|regexList|_134|_2a|originalCode|high=
lighterId|wrap|_27|copyToClipboard|toolbarItemHeight|_2c|_2e|_2d|toolbarI=
temWidth|expandSource|_141|_7|_4|from|_e|item|charAt|www|r2|_11d|join|qua=
ntifier|_113|_b|_12e|_13e|_17|_18|String|getNativeFlags|_9|_f|_d|_10|coll=
apsed|key|_101|_ff|brushName|_fb|instanceof|_30|swf|getBrushNameCss|_100|=
contentWindow|content|_38|_8c|_35|_37|_24|_f5|collapse|_2f|_fa|toolbarCom=
mands|defaults|merge|guid|syntaxhighlighter|clipboardSwf|highlighters|_6|=
rel|DTD|to|createButton|_a|_84|500px|measureSpace|clipboard|none|scrollba=
rs|decoration|org|_83|0px|margin|head|align|center|userAgent|_3f|copyStyl=
es|0099FF|help|alexgorbatchev|xhtml1|_3e|w3|_85|_48|noBrush|_5e|version|s=
tylesheet|_65|_6d|switch|screen|flash|event|_52|attachEvent|_13f|shockwav=
e|toLowerCase|_1e|_36|px|clipboardData|commandName|copyToClipboardConfirm=
ation|message|aboutDialog|_78|executeCommand|_14|_16|items|_13|_12|_4b|_1=
5|_79|navigator|_dd|get|_140|TypeError|unicode|_de|Highlighter|one|_e0|to=
Boolean|_df|_d8|_d5|_c7|addEvent|pP|trimFirstAndLastLines|_c9|_12d|escape=
Char|process|_d1|_112|_e2|typeof|classLeft|plain|_11c|_f2|_f7|classRight|=
table|decorate|tr|_11b|_f8|_f1|_106|matchesSortCallback|light|_e4|createD=
isplayLines|parseInt|padNumber|numbers|pad|first|character|brushNotHtmlSc=
ript|_a4|processMatches|tagName|getSyntaxHighlighterScriptTags|parseParam=
s|processTabs|matchRecursive|_b7|toArray|_9a|_a8|_a1|arguments|_a9|regexL=
ib|processUrls|findMatches|links|defaultAdd|_bd|_93|bloggerMode|stripCDat=
a|insertSpaces|parentNode|match|args|_90|smart|when|auto|debug|processSma=
rtTabs|multiline|removeNestedMatches|stripBrs|tabs|_117|2004|2009|data|_1=
c|keep|Alex|donate|2930402|development|active|_1b|highlighter|syntax|Java=
Script|Copyright|multiLineDoubleQuotedString|hosted_button_id|string|scri=
ptScriptTags|aspScriptTags|_12f|another|constructing|onclick|catch|replac=
eVar|sgi|flags|apply|phpScriptTags|singleLineCComments|singleLinePerlComm=
ents|multiLineCComments|spaceWidth|Gorbatchev|getKeywords|doubleQuotedStr=
ing|xmlComments|forHtmlScript|multiLineSingleQuotedString|try|singleQuote=
dString|_131|bottom|xmlns|addPlugin|unbalanced|dtd|transitional|EN|TR|199=
9|xhtml|charset|utf|About|Type|Content|meta|equiv|Transitional|XHTML|your=
|now|Can|is|The|view|copy|find|Brush|PUBLIC|W3C|DOCTYPE|option|wasn|confi=
gured|sx|family|sticky|If|you|target|2010|382|June|like|please|webscr|cmd=
|_s|bin|cgi|https|paypal|4em|75em|serif|background|fff|sans|Helvetica|Gen=
eva|Arial|000|1em|large|delimiters|xx|3em|contains|ignoreCase|xclick|alwa=
ys|about|_42|more|shCore|printing|alt|than|_43|max|round|250|500|_44|sort=
|highlighted|absolute|error|spaces|SyntaxError|ok|amp|setData|_1f|_39|css=
Text|position|number|IFRAME|_3a|_3b|random|1000000|_a5|getElementById|blo=
ck|CDATA|htmlscript|flag|opera|1000|offsetWidth|_8a|_99|getPropertyValue|=
getComputedStyle|Array|the|textarea|Xml|load|open|_cf|lastIndexOf|_d4||al=
l|on|70em|using|30em|aliases|addEventListener|replaceChild|command|printS=
ource|no|menu|Error|flashVars|wmode|transparent|msie|classid|11cf|96b8|ae=
6d|d27cdb6e|clsid|allowScriptAccess|application|location|resizable|400|75=
0|_20|_21|menubar|_26|subject|_clipboard|onmouseover|onmouseout|param|444=
553540000|nogutter|embed|macromedia|movie|swflash|_10a|valueNames||_10c|p=
ub|src|conf|highlighter_|cab|download|cabs|codebase|important|_34|_33'.sp=
lit('|'),0,{}))
------=_NextPart_000_0000_01CD1A49.568899A0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///D:/Project/javascript/WebContent/jQuery/jQuery Fundamentals_files/shBrushJScript.js

/**=0A=
 * SyntaxHighlighter=0A=
 * http://alexgorbatchev.com/=0A=
 *=0A=
 * SyntaxHighlighter is donationware. If you are using it, please donate.=0A=
 * http://alexgorbatchev.com/wiki/SyntaxHighlighter:Donate=0A=
 *=0A=
 * @version=0A=
 * 2.1.382 (June 24 2010)=0A=
 * =0A=
 * @copyright=0A=
 * Copyright (C) 2004-2009 Alex Gorbatchev.=0A=
 *=0A=
 * @license=0A=
 * This file is part of SyntaxHighlighter.=0A=
 * =0A=
 * SyntaxHighlighter is free software: you can redistribute it and/or =
modify=0A=
 * it under the terms of the GNU Lesser General Public License as =
published by=0A=
 * the Free Software Foundation, either version 3 of the License, or=0A=
 * (at your option) any later version.=0A=
 * =0A=
 * SyntaxHighlighter is distributed in the hope that it will be useful,=0A=
 * but WITHOUT ANY WARRANTY; without even the implied warranty of=0A=
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the=0A=
 * GNU General Public License for more details.=0A=
 * =0A=
 * You should have received a copy of the GNU General Public License=0A=
 * along with SyntaxHighlighter.  If not, see =
<http://www.gnu.org/copyleft/lesser.html>.=0A=
 */=0A=
SyntaxHighlighter.brushes.JScript =3D function()=0A=
{=0A=
	var keywords =3D	'break case catch continue ' +=0A=
					'default delete do else false  ' +=0A=
					'for function if in instanceof ' +=0A=
					'new null return super switch ' +=0A=
					'this throw true try typeof var while with'=0A=
					;=0A=
=0A=
	this.regexList =3D [=0A=
		{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: =
'comments' },			// one line comments=0A=
		{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: =
'comments' },			// multiline comments=0A=
		{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' =
},			// double quoted strings=0A=
		{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' =
},			// single quoted strings=0A=
		{ regex: /\s*#.*/gm,										css: 'preprocessor' },		// preprocessor =
tags like #region and #endregion=0A=
		{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' =
}			// keywords=0A=
		];=0A=
	=0A=
	this.forHtmlScript(SyntaxHighlighter.regexLib.scriptScriptTags);=0A=
};=0A=
=0A=
SyntaxHighlighter.brushes.JScript.prototype	=3D new =
SyntaxHighlighter.Highlighter();=0A=
SyntaxHighlighter.brushes.JScript.aliases	=3D ['js', 'jscript', =
'javascript'];
------=_NextPart_000_0000_01CD1A49.568899A0--
